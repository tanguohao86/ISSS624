---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## 1.1 Overview

In this hands-on exercise, i learn how to import and wrangling geospatial data in R using **sf** packages.

## 1.3 Getting Started

The code chunk below install and load sf and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## 1.4 Importing Geospatial Data

### 1.4.1 Importing polygon feature data

The code chunk below uses *st_read()* function of **sf** package to import ESRI shapefile into R as a polygon feature data frame.

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### 1.4.2 Importing polyline feature data in shapefile form

The code chunk below uses *st_read()* function of **sf** package to import ESRI shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

### 1.4.3 Importing GIS data in kml format

The code chunk below will be used to import the kml into R.

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.

## 1.5 Checking the Content of A Simple Feature Data Frame

### 1.5.1 Working with *st_geometry()*

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\$geom or mpsz\[\[1\]\], but the more general way uses *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

Notice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

### 1.5.2 Working with glimpse()

The code chunk below is used to learn more about the associated attribute information in the data frame.

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### 1.5.3 Working with *head()*

The code chunk below is used to reveal complete information of a feature object.

```{r}
head(mpsz, n=5)
```

## 1.6 Plotting the Geospatial Data

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz['PLN_AREA_N'])
```

## 1.7 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

### 1.7.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 = st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### 1.7.2 Transforming the projection of preschool from wgs84 to svy21.

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
preschool3414 = st_transform(preschool, crs=3414)
```

```{r}
st_geometry(preschool3414)
```

## 1.8 Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as `listing`of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there aretwo fields that capture the x- and y coordinates of the data points.

In this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.

For the purpose of this exercise, the `listings.csv` data downloaded from AirBnb will be used.

### 1.8.1 Importing the aspatial data

```{r}
listings = read_csv('data/aspatial/listings.csv')
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### 1.8.2 Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf = st_as_sf(listings,
                       coords = c('longitude', 'latitude'),
                       crs=4326) %>%
    st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

-   Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## 1.9 Geoprocessing with sf package

### 1.9.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling = st_buffer(cyclingpath,
                           dist = 5,
                           nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA = st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### 1.9.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` = lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

**DIY: Calculate the density of pre-school by planning subzone.**

The solution:

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area = mpsz3414 %>%
    st_area()
```

```{r}
mpsz3414 = mpsz3414 %>%
    mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

```{r}
summary(mpsz3414$`PreSch Density`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Density`)
```

## 1.10 Exploratory Data Analysis (EDA)

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`)))+
    geom_histogram(bins=30,
                   color= 'black',
                   fill='light blue') +
    labs(title = 'Are pre-school even distributed in Singapore?',
         subtitle = 'There are many planning sub-zones with a single pre-school, on the hand, \nthere are two planning sub-zones with at least 20 pre-schools',
         x = 'Pre-school density (per km sq)',
         y = 'Frequency')
```

**DIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**

The solution:

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) +
    geom_point() + 
    labs(x = 'Pre-school density (per km sq)',
         y = 'Pre-school count')
```

## 
