[
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "title": "In-class_Ex5: Modeling the Spatial Variation of the Explanatory Factors of Water Point Status using Geographically Weighted Logistic Regression",
    "section": "",
    "text": "To build an explanatory model to discover factor affecting water point status in Osun State, Nigeria\nStudy area: Osun State, Nigeria\nData sets:\n\nOsun.rds, contains LGAs boundaries of Osun State. It is in sf polygon data frame.\nOsum_wp_sf_rds, contained water points within Osun State. It is in sf point data frame.\n\n\n\n\n\nDependent variable: Water point status (i.e. functional/non-functional)\nIndependent variables:\n\ndistance_to_primary_road\ndistance_to_secondary_road\ndistance_to_tertiary_road\ndistance_to_city\ndistance_to_town\nwater_point_population\nlocal_population_1km,\nusage_capacity\nis_urban\nwater_source_clean\nlast 3 are categorical\n\n\n\n\n\nThe R packages required for this exercise are as follows:\n\nSpatial data handling\n\nsf and spdep\n\nAttribute data handling\n\ntidyverse\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncorrplot and ggpubr\n\nExploratory Data Analysis\n\nfunModeling\nskimr\n\nRegression Modelling\n\nGWmodel - geographically weighted regression\ncaret - Classification And REgression Training\nblorr - binary logistic regression model\n\n\nThe following code chunk is used to load the necessary R packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, tmap, funModeling, blorr, corrplot, ggpubr, GWmodel, skimr,caret)\n\n\n\n\nThe code chunk below uses read_rds() function of tidyverse package to import rds files.\nOsun is imported into R as a polygon feature data frame.\nOsun_wp_sf is imported into R as a point feature data frame\nThese files have been cleaned and prepared.\nThe raw data for Osun can be obtained from WPdx Global Data Repositories. There are two versions of the data. They are: WPdx-Basic and WPdx+. We are required to use WPdx+ data set.\nThe raw data for Osun_wp_sf is Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries. We are required to use “nga_polnda_adm2_1m_salb” data set.\n\nOsun <- read_rds(\"rds/Osun.rds\")\nOsun_wp_sf <- read_rds(\"rds/Osun_wp_sf.rds\")\n\n\n\n\nThe following code chunk serves to perform a quick exploratory analysis on status column of Osun_wp_sf data frame. True indicates that the waterpoint is functional and False indicates that the waterpoint is non-functional. We can see that the 2118 waterpoints which is 44.5% of the Osun’s waterpoints are non-functional. This is a worrisome situation and we should investigate the reason for such a high percentage.\n\nOsun_wp_sf %>%\n    freq(input = 'status')\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n  status frequency percentage cumulative_perc\n1   TRUE      2642       55.5            55.5\n2  FALSE      2118       44.5           100.0\n\n\nThe following code chunk produces a choropleth map which indicates the location of functional waterpoints and non-functional waterpoints in the Osun State, Nigeria.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(Osun) +\n    tm_polygons(alpha = 0.4)+\n    tm_shape(Osun_wp_sf) +\n    tm_dots(col = 'status',\n            alpha = 0.6)+\n    tm_view(set.zoom.limits = c(9,12))\n\n\n\n\n\n\n\n\n\nSummary statistics is obtained using the code chunk below using skimr(). The purpose is to have a quick glance and evaluate how many missing data are there under each field and decide which independent variable(s) to exclude in the initial regression modelling.\nEg. fecal_coliform_value has 4760 n_missing, install_year has 1144 n_missing, rehab_priority has 2654 n_missing, crucialness_score has 798 n_missing, pressure_score has 798 n_missing, rehab_year has 4760 n_missing. These are examples of independent variables which will be excluded in the initial regression model.\n\nOsun_wp_sf %>%\n    skim()\n\nWarning: Couldn't find skimmers for class: sfc_POINT, sfc; No user-defined `sfl`\nprovided. Falling back to `character`.\n\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n4760\n\n\nNumber of columns\n75\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n47\n\n\nlogical\n5\n\n\nnumeric\n23\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsource\n0\n1.00\n5\n44\n0\n2\n0\n\n\nreport_date\n0\n1.00\n22\n22\n0\n42\n0\n\n\nstatus_id\n0\n1.00\n2\n7\n0\n3\n0\n\n\nwater_source_clean\n0\n1.00\n8\n22\n0\n3\n0\n\n\nwater_source_category\n0\n1.00\n4\n6\n0\n2\n0\n\n\nwater_tech_clean\n24\n0.99\n9\n23\n0\n3\n0\n\n\nwater_tech_category\n24\n0.99\n9\n15\n0\n2\n0\n\n\nfacility_type\n0\n1.00\n8\n8\n0\n1\n0\n\n\nclean_country_name\n0\n1.00\n7\n7\n0\n1\n0\n\n\nclean_adm1\n0\n1.00\n3\n5\n0\n5\n0\n\n\nclean_adm2\n0\n1.00\n3\n14\n0\n35\n0\n\n\nclean_adm3\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nclean_adm4\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\ninstaller\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nmanagement_clean\n1573\n0.67\n5\n37\n0\n7\n0\n\n\nstatus_clean\n0\n1.00\n9\n32\n0\n7\n0\n\n\npay\n0\n1.00\n2\n39\n0\n7\n0\n\n\nfecal_coliform_presence\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nsubjective_quality\n0\n1.00\n18\n20\n0\n4\n0\n\n\nactivity_id\n4757\n0.00\n36\n36\n0\n3\n0\n\n\nscheme_id\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nwpdx_id\n0\n1.00\n12\n12\n0\n4760\n0\n\n\nnotes\n0\n1.00\n2\n96\n0\n3502\n0\n\n\norig_lnk\n4757\n0.00\n84\n84\n0\n1\n0\n\n\nphoto_lnk\n41\n0.99\n84\n84\n0\n4719\n0\n\n\ncountry_id\n0\n1.00\n2\n2\n0\n1\n0\n\n\ndata_lnk\n0\n1.00\n79\n96\n0\n2\n0\n\n\nwater_point_history\n0\n1.00\n142\n834\n0\n4750\n0\n\n\nclean_country_id\n0\n1.00\n3\n3\n0\n1\n0\n\n\ncountry_name\n0\n1.00\n7\n7\n0\n1\n0\n\n\nwater_source\n0\n1.00\n8\n30\n0\n4\n0\n\n\nwater_tech\n0\n1.00\n5\n37\n0\n20\n0\n\n\nadm2\n0\n1.00\n3\n14\n0\n33\n0\n\n\nadm3\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nmanagement\n1573\n0.67\n5\n47\n0\n7\n0\n\n\nadm1\n0\n1.00\n4\n5\n0\n4\n0\n\n\nNew Georeferenced Column\n0\n1.00\n16\n35\n0\n4760\n0\n\n\nlat_lon_deg\n0\n1.00\n13\n32\n0\n4760\n0\n\n\npublic_data_source\n0\n1.00\n84\n102\n0\n2\n0\n\n\nconverted\n0\n1.00\n53\n53\n0\n1\n0\n\n\ncreated_timestamp\n0\n1.00\n22\n22\n0\n2\n0\n\n\nupdated_timestamp\n0\n1.00\n22\n22\n0\n2\n0\n\n\nGeometry\n0\n1.00\n33\n37\n0\n4760\n0\n\n\nADM2_EN\n0\n1.00\n3\n14\n0\n30\n0\n\n\nADM2_PCODE\n0\n1.00\n8\n8\n0\n30\n0\n\n\nADM1_EN\n0\n1.00\n4\n4\n0\n1\n0\n\n\nADM1_PCODE\n0\n1.00\n5\n5\n0\n1\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nrehab_year\n4760\n0\nNaN\n:\n\n\nrehabilitator\n4760\n0\nNaN\n:\n\n\nis_urban\n0\n1\n0.39\nFAL: 2884, TRU: 1876\n\n\nlatest_record\n0\n1\n1.00\nTRU: 4760\n\n\nstatus\n0\n1\n0.56\nTRU: 2642, FAL: 2118\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n68550.48\n10216.94\n49601.00\n66874.75\n68244.50\n69562.25\n471319.00\n▇▁▁▁▁\n\n\nlat_deg\n0\n1.00\n7.68\n0.22\n7.06\n7.51\n7.71\n7.88\n8.06\n▁▂▇▇▇\n\n\nlon_deg\n0\n1.00\n4.54\n0.21\n4.08\n4.36\n4.56\n4.71\n5.06\n▃▆▇▇▂\n\n\ninstall_year\n1144\n0.76\n2008.63\n6.04\n1917.00\n2006.00\n2010.00\n2013.00\n2015.00\n▁▁▁▁▇\n\n\nfecal_coliform_value\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\ndistance_to_primary_road\n0\n1.00\n5021.53\n5648.34\n0.01\n719.36\n2972.78\n7314.73\n26909.86\n▇▂▁▁▁\n\n\ndistance_to_secondary_road\n0\n1.00\n3750.47\n3938.63\n0.15\n460.90\n2554.25\n5791.94\n19559.48\n▇▃▁▁▁\n\n\ndistance_to_tertiary_road\n0\n1.00\n1259.28\n1680.04\n0.02\n121.25\n521.77\n1834.42\n10966.27\n▇▂▁▁▁\n\n\ndistance_to_city\n0\n1.00\n16663.99\n10960.82\n53.05\n7930.75\n15030.41\n24255.75\n47934.34\n▇▇▆▃▁\n\n\ndistance_to_town\n0\n1.00\n16726.59\n12452.65\n30.00\n6876.92\n12204.53\n27739.46\n44020.64\n▇▅▃▃▂\n\n\nrehab_priority\n2654\n0.44\n489.33\n1658.81\n0.00\n7.00\n91.50\n376.25\n29697.00\n▇▁▁▁▁\n\n\nwater_point_population\n4\n1.00\n513.58\n1458.92\n0.00\n14.00\n119.00\n433.25\n29697.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n4\n1.00\n2727.16\n4189.46\n0.00\n176.00\n1032.00\n3717.00\n36118.00\n▇▁▁▁▁\n\n\ncrucialness_score\n798\n0.83\n0.26\n0.28\n0.00\n0.07\n0.15\n0.35\n1.00\n▇▃▁▁▁\n\n\npressure_score\n798\n0.83\n1.46\n4.16\n0.00\n0.12\n0.41\n1.24\n93.69\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n560.74\n338.46\n300.00\n300.00\n300.00\n1000.00\n1000.00\n▇▁▁▁▅\n\n\ndays_since_report\n0\n1.00\n2692.69\n41.92\n1483.00\n2688.00\n2693.00\n2700.00\n4645.00\n▁▇▁▁▁\n\n\nstaleness_score\n0\n1.00\n42.80\n0.58\n23.13\n42.70\n42.79\n42.86\n62.66\n▁▁▇▁▁\n\n\nlocation_id\n0\n1.00\n235865.49\n6657.60\n23741.00\n230638.75\n236199.50\n240061.25\n267454.00\n▁▁▁▁▇\n\n\ncluster_size\n0\n1.00\n1.05\n0.25\n1.00\n1.00\n1.00\n1.00\n4.00\n▇▁▁▁▁\n\n\nlat_deg_original\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nlon_deg_original\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\ncount\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\n\n\n\nOsun_wp_sf_clean is created through the selection of the fields using the code chunk below. all_vars(!is.na(.)) removes the 4 n_missing observations for column ‘water_point_population’ and column ‘local_population_1km’. water_point_population and local_population_1km are included in the initial regression model as we deem the impact of 4 n_missing obs out of 4760 obs as negligible. mutate(usage_capacity = as.factor(usage_capacity)) is to ensure that R treats ‘usage_capacity’ as a categorical variable instead of a continuous variable.\n\nOsun_wp_sf_clean <- Osun_wp_sf %>%\n    filter_at(vars(status,\n                   distance_to_primary_road,\n                   distance_to_secondary_road,\n                   distance_to_tertiary_road,\n                   distance_to_city,\n                   distance_to_town,\n                   water_point_population,\n                   local_population_1km,\n                   usage_capacity,\n                   is_urban,\n                   water_source_clean),\n              all_vars(!is.na(.))) %>%\n    mutate(usage_capacity = as.factor(usage_capacity))\n\nThe code chunk below selects the necessary independent variables as indicated in the code chunk above for the initial regression model and dropping the geometry column so that we can use corrplot.mixed()\n\nOsun_wp <- Osun_wp_sf_clean %>%\n    select(c(7,35:39,42:43, 46:47,57)) %>% # you can create a list and point this to the list instead for more elegance.\n    st_set_geometry(NULL)\n\nIn the code chunk below, corrplot.mixed() function of corrplot package is used visualise and analyse the correlation of the independent variables. The correlation plot below shows that none of the independent variables are highly correlated (>=0.85). Hence no independent variables will be removed due to Multicollinearity.\n\ncluster_vars.cor = cor(Osun_wp[,(2:7)])\ncorrplot.mixed(cluster_vars.cor,\n               lower = 'ellipse',\n               upper = 'number',\n               tl.pos = 'lt',\n               diag = 'l',\n               tl.col = 'black')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#building-initial-logistical-regression-model",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#building-initial-logistical-regression-model",
    "title": "In-class_Ex5: Modeling the Spatial Variation of the Explanatory Factors of Water Point Status using Geographically Weighted Logistic Regression",
    "section": "2.1 Building Initial Logistical Regression Model",
    "text": "2.1 Building Initial Logistical Regression Model\nThe following code chunk uses glm() to build our initial logistical regression model.\n\nmodel <- glm(status ~ distance_to_primary_road +\n                 distance_to_secondary_road +\n                 distance_to_tertiary_road +\n                 distance_to_city +\n                 distance_to_town +\n                 is_urban +\n                 usage_capacity +\n                 water_source_clean +\n                 water_point_population +\n                 local_population_1km,\n             data = Osun_wp_sf_clean,\n             family = binomial(link = 'logit'))\n\nInstead of using typical R report, blr_regress() is used to generate comprehensive regression output. Using this output, we identify independent variables which are not significant (P-values > 0.05) as we are using 95% confidence level. The identified independent variables are distance_to_primary_road (P-value 0.4744) and distance_to_secondary_road (0.5802).\n\nblr_regress(model)\n\n                             Model Overview                              \n------------------------------------------------------------------------\nData Set    Resp Var    Obs.    Df. Model    Df. Residual    Convergence \n------------------------------------------------------------------------\n  data       status     4756      4755           4744           TRUE     \n------------------------------------------------------------------------\n\n                    Response Summary                     \n--------------------------------------------------------\nOutcome        Frequency        Outcome        Frequency \n--------------------------------------------------------\n   0             2114              1             2642    \n--------------------------------------------------------\n\n                                 Maximum Likelihood Estimates                                   \n-----------------------------------------------------------------------------------------------\n               Parameter                    DF    Estimate    Std. Error    z value     Pr(>|z|) \n-----------------------------------------------------------------------------------------------\n              (Intercept)                   1      0.3887        0.1124      3.4588       5e-04 \n        distance_to_primary_road            1      0.0000        0.0000     -0.7153      0.4744 \n       distance_to_secondary_road           1      0.0000        0.0000     -0.5530      0.5802 \n       distance_to_tertiary_road            1      1e-04         0.0000      4.6708      0.0000 \n            distance_to_city                1      0.0000        0.0000     -4.7574      0.0000 \n            distance_to_town                1      0.0000        0.0000     -4.9170      0.0000 \n              is_urbanTRUE                  1     -0.2971        0.0819     -3.6294       3e-04 \n           usage_capacity1000               1     -0.6230        0.0697     -8.9366      0.0000 \nwater_source_cleanProtected Shallow Well    1      0.5040        0.0857      5.8783      0.0000 \n   water_source_cleanProtected Spring       1      1.2882        0.4388      2.9359      0.0033 \n         water_point_population             1      -5e-04        0.0000    -11.3686      0.0000 \n          local_population_1km              1      3e-04         0.0000     19.2953      0.0000 \n-----------------------------------------------------------------------------------------------\n\n Association of Predicted Probabilities and Observed Responses  \n---------------------------------------------------------------\n% Concordant          0.7347          Somers' D        0.4693   \n% Discordant          0.2653          Gamma            0.4693   \n% Tied                0.0000          Tau-a            0.2318   \nPairs                5585188          c                0.7347   \n---------------------------------------------------------------"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#building-revised-logistical-regression-model",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#building-revised-logistical-regression-model",
    "title": "In-class_Ex5: Modeling the Spatial Variation of the Explanatory Factors of Water Point Status using Geographically Weighted Logistic Regression",
    "section": "2.2 Building Revised Logistical Regression Model",
    "text": "2.2 Building Revised Logistical Regression Model\nAfter identifying the insignificant variables, we should build a revised logistical regression model. This time, we will exclude the identified insignificant variables as found in section 2.1\n\nmodel_r <- glm(status ~ distance_to_tertiary_road +\n                 distance_to_city +\n                 distance_to_town +\n                 is_urban +\n                 usage_capacity +\n                 water_source_clean +\n                 water_point_population +\n                 local_population_1km,\n             data = Osun_wp_sf_clean,\n             family = binomial(link = 'logit'))\n\nblr_regress() is used again to confirm that the revised logistical regression model does not have insignificant independent variables.\n\nblr_regress(model_r)\n\n                             Model Overview                              \n------------------------------------------------------------------------\nData Set    Resp Var    Obs.    Df. Model    Df. Residual    Convergence \n------------------------------------------------------------------------\n  data       status     4756      4755           4746           TRUE     \n------------------------------------------------------------------------\n\n                    Response Summary                     \n--------------------------------------------------------\nOutcome        Frequency        Outcome        Frequency \n--------------------------------------------------------\n   0             2114              1             2642    \n--------------------------------------------------------\n\n                                 Maximum Likelihood Estimates                                   \n-----------------------------------------------------------------------------------------------\n               Parameter                    DF    Estimate    Std. Error    z value     Pr(>|z|) \n-----------------------------------------------------------------------------------------------\n              (Intercept)                   1      0.3540        0.1055      3.3541       8e-04 \n       distance_to_tertiary_road            1      1e-04         0.0000      4.9096      0.0000 \n            distance_to_city                1      0.0000        0.0000     -5.2022      0.0000 \n            distance_to_town                1      0.0000        0.0000     -5.4660      0.0000 \n              is_urbanTRUE                  1     -0.2667        0.0747     -3.5690       4e-04 \n           usage_capacity1000               1     -0.6206        0.0697     -8.9081      0.0000 \nwater_source_cleanProtected Shallow Well    1      0.4947        0.0850      5.8228      0.0000 \n   water_source_cleanProtected Spring       1      1.2790        0.4384      2.9174      0.0035 \n         water_point_population             1      -5e-04        0.0000    -11.3902      0.0000 \n          local_population_1km              1      3e-04         0.0000     19.4069      0.0000 \n-----------------------------------------------------------------------------------------------\n\n Association of Predicted Probabilities and Observed Responses  \n---------------------------------------------------------------\n% Concordant          0.7349          Somers' D        0.4697   \n% Discordant          0.2651          Gamma            0.4697   \n% Tied                0.0000          Tau-a            0.2320   \nPairs                5585188          c                0.7349   \n---------------------------------------------------------------\n\n\n\n2.2.1 Non-geography weighted confusion matrix\nThe code chunk below shows the creation of a non-geography weighted confusion matrix with cutoff = 50%\n\nblr_confusion_matrix(model_r, cutoff = 0.5) # non-geography weighted\n\nConfusion Matrix and Statistics \n\n          Reference\nPrediction FALSE TRUE\n         0  1300  743\n         1   814 1899\n\n                Accuracy : 0.6726 \n     No Information Rate : 0.4445 \n\n                   Kappa : 0.3348 \n\nMcNemars's Test P-Value  : 0.0761 \n\n             Sensitivity : 0.7188 \n             Specificity : 0.6149 \n          Pos Pred Value : 0.7000 \n          Neg Pred Value : 0.6363 \n              Prevalence : 0.5555 \n          Detection Rate : 0.3993 \n    Detection Prevalence : 0.5704 \n       Balanced Accuracy : 0.6669 \n               Precision : 0.7000 \n                  Recall : 0.7188 \n\n        'Positive' Class : 1\n\n\n\n\n2.2.2 Conversion from simple features (sf) to SpatialPointsDataFrame (sp)\nThe code chunk below selects the necessary fields and converts it to a SpatialPointsDataFrame file. Please take note of as_Spatial()\nThis is necessary as bw.ggwr requires SpatialPointsDataFrame file as input.\n\nOsun_wp_sp_r <- Osun_wp_sf_clean %>% \n    select(c(status,\n             distance_to_tertiary_road,\n             distance_to_city,\n             distance_to_town,\n             water_point_population,\n             local_population_1km,\n             is_urban,\n             usage_capacity,\n             water_source_clean)) %>%\n    as_Spatial()\nOsun_wp_sp_r\n\nclass       : SpatialPointsDataFrame \nfeatures    : 4756 \nextent      : 182502.4, 290751, 340054.1, 450905.3  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 9\nnames       : status, distance_to_tertiary_road, distance_to_city, distance_to_town, water_point_population, local_population_1km, is_urban, usage_capacity, water_source_clean \nmin values  :      0,         0.017815121653488, 53.0461399623541, 30.0019777713073,                      0,                    0,        0,           1000,           Borehole \nmax values  :      1,          10966.2705628969,  47934.343603562, 44020.6393368124,                  29697,                36118,        1,            300,   Protected Spring \n\n\n\n\n2.2.3 Finding fixed bandwidth\nThe code chunk below bw.ggwr() to generate the fixed bandwidth which will be necessary to calibrate a generalized Geographically Weighted Regression (GWR) model.\n\nbw.fixed_r <- bw.ggwr(status ~\n                        distance_to_tertiary_road +\n                        distance_to_city +\n                        distance_to_town +\n                        water_point_population +\n                        local_population_1km +\n                        usage_capacity +\n                        is_urban +\n                        water_source_clean,\n                    data = Osun_wp_sp_r,\n                    family = \"binomial\",\n                    approach = \"AIC\",\n                    kernel = \"gaussian\",\n                    adaptive = FALSE,\n                    longlat = FALSE)\n\nThe code chunk below reads the generated fixed bandwidth.\n\nbw.fixed_r\n\n\nbw.fixed_r <- 2377.371 # in the essence of time (long duration required for rendering, value of bw.fixed_r is found and indicated here.)\n\n\n\n2.2.4 Implement Generalized Geographically Weighted Regression (GWR)\nThe code chunk below uses ggwr.basic() to implement generalized GWR. Notice that bw.fixed_r is included as input (bw = bw.fixed_r) into the function.\n\ngwlr.fixed_r <- ggwr.basic(status ~\n                  distance_to_tertiary_road +\n                        distance_to_city +\n                        distance_to_town +\n                        water_point_population +\n                        local_population_1km +\n                        usage_capacity +\n                        is_urban +\n                        water_source_clean,\n                    data = Osun_wp_sp_r,\n                    bw = bw.fixed_r,\n                    family = \"binomial\",\n                    kernel = \"gaussian\",\n                    adaptive = FALSE,\n                    longlat = FALSE)\n\n Iteration    Log-Likelihood\n=========================\n       0        -1959 \n       1        -1680 \n       2        -1531 \n       3        -1447 \n       4        -1413 \n       5        -1413 \n\n\nThe code chunk below reads the generated fixed bandwidth. The AICc are as follows:\n\nGeneralized linear Regression’s AICc: 5708.923\nGeographically Weighted Regression’s AICc : 4744.213\n\nHence we are determine that the Geographically Weighted Regression is better as lower AICc is preferred.\n\ngwlr.fixed_r #top is GLM, bottom is geographical version #AICc \n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-17 23:51:14 \n   Call:\n   ggwr.basic(formula = status ~ distance_to_tertiary_road + distance_to_city + \n    distance_to_town + water_point_population + local_population_1km + \n    usage_capacity + is_urban + water_source_clean, data = Osun_wp_sp_r, \n    bw = bw.fixed_r, family = \"binomial\", kernel = \"gaussian\", \n    adaptive = FALSE, longlat = FALSE)\n\n   Dependent (y) variable:  status\n   Independent variables:  distance_to_tertiary_road distance_to_city distance_to_town water_point_population local_population_1km usage_capacity is_urban water_source_clean\n   Number of data points: 4756\n   Used family: binomial\n   ***********************************************************************\n   *              Results of Generalized linear Regression               *\n   ***********************************************************************\n\nCall:\nNULL\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-129.368    -1.750     1.074     1.742    34.126  \n\nCoefficients:\n                                           Estimate Std. Error z value Pr(>|z|)\nIntercept                                 3.540e-01  1.055e-01   3.354 0.000796\ndistance_to_tertiary_road                 1.001e-04  2.040e-05   4.910 9.13e-07\ndistance_to_city                         -1.764e-05  3.391e-06  -5.202 1.97e-07\ndistance_to_town                         -1.544e-05  2.825e-06  -5.466 4.60e-08\nwater_point_population                   -5.098e-04  4.476e-05 -11.390  < 2e-16\nlocal_population_1km                      3.452e-04  1.779e-05  19.407  < 2e-16\nusage_capacity1000                       -6.206e-01  6.966e-02  -8.908  < 2e-16\nis_urbanTRUE                             -2.667e-01  7.474e-02  -3.569 0.000358\nwater_source_cleanProtected Shallow Well  4.947e-01  8.496e-02   5.823 5.79e-09\nwater_source_cleanProtected Spring        1.279e+00  4.384e-01   2.917 0.003530\n                                            \nIntercept                                ***\ndistance_to_tertiary_road                ***\ndistance_to_city                         ***\ndistance_to_town                         ***\nwater_point_population                   ***\nlocal_population_1km                     ***\nusage_capacity1000                       ***\nis_urbanTRUE                             ***\nwater_source_cleanProtected Shallow Well ***\nwater_source_cleanProtected Spring       ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 6534.5  on 4755  degrees of freedom\nResidual deviance: 5688.9  on 4746  degrees of freedom\nAIC: 5708.9\n\nNumber of Fisher Scoring iterations: 5\n\n\n AICc:  5708.923\n Pseudo R-square value:  0.129406\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 2377.371 \n   Regression points: the same locations as observations are used.\n   Distance metric: A distance matrix is specified for this model calibration.\n\n   ************Summary of Generalized GWR coefficient estimates:**********\n                                                   Min.     1st Qu.      Median\n   Intercept                                -3.7021e+02 -4.3797e+00  3.5590e+00\n   distance_to_tertiary_road                -3.1622e-02 -4.5462e-04  9.1291e-05\n   distance_to_city                         -5.4555e-02 -6.5623e-04 -1.3507e-04\n   distance_to_town                         -8.6549e-03 -5.2754e-04 -1.6785e-04\n   water_point_population                   -2.9696e-02 -2.2705e-03 -1.2277e-03\n   local_population_1km                     -7.7730e-02  4.4281e-04  1.0548e-03\n   usage_capacity1000                       -5.5889e+01 -1.0347e+00 -4.1960e-01\n   is_urbanTRUE                             -7.3554e+02 -3.4675e+00 -1.6596e+00\n   water_source_cleanProtected.Shallow.Well -1.8842e+02 -4.7295e-01  6.2378e-01\n   water_source_cleanProtected.Spring       -1.3630e+03 -5.3436e+00  2.7714e+00\n                                                3rd Qu.      Max.\n   Intercept                                 1.3755e+01 2171.6375\n   distance_to_tertiary_road                 6.3011e-04    0.0237\n   distance_to_city                          1.5921e-04    0.0162\n   distance_to_town                          2.4490e-04    0.0179\n   water_point_population                    4.5879e-04    0.0765\n   local_population_1km                      1.8479e-03    0.0333\n   usage_capacity1000                        3.9113e-01    9.2449\n   is_urbanTRUE                              1.0554e+00  995.1841\n   water_source_cleanProtected.Shallow.Well  1.9564e+00   66.8914\n   water_source_cleanProtected.Spring        7.0805e+00  208.3749\n   ************************Diagnostic information*************************\n   Number of data points: 4756 \n   GW Deviance: 2815.659 \n   AIC : 4418.776 \n   AICc : 4744.213 \n   Pseudo R-square value:  0.5691072 \n\n   ***********************************************************************\n   Program stops at: 2022-12-17 23:51:51 \n\n\nThe code chunk below converts gwlr.fixed_r into a data frame and assign to gwr.fixed_r. This includes the independent variables which has undergone standardization.\n\ngwr.fixed_r <- as.data.frame(gwlr.fixed_r$SDF)\n\nThe code chunk below converts yhat data where >=0.5 is T and otherwise is F and assign data to ‘most’ field.\n\ngwr.fixed_r <- gwr.fixed_r %>%\n    mutate(most = ifelse(\n        gwr.fixed_r$yhat >= 0.5, T, F))\n\nThe code chunk below changes the field ‘y’ and ‘most’ to categorical data.\n\ngwr.fixed_r$y <- as.factor(gwr.fixed_r$y)\ngwr.fixed_r$most <- as.factor(gwr.fixed_r$most)\n\n\n\n2.2.4 Geographically Weighted Confusion Matrix\n\nCM_r <- confusionMatrix(data = gwr.fixed_r$most, reference = gwr.fixed_r$y)\nCM_r# geography weighted\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE  1833  268\n     TRUE    281 2374\n                                          \n               Accuracy : 0.8846          \n                 95% CI : (0.8751, 0.8935)\n    No Information Rate : 0.5555          \n    P-Value [Acc > NIR] : <2e-16          \n                                          \n                  Kappa : 0.7661          \n                                          \n Mcnemar's Test P-Value : 0.6085          \n                                          \n            Sensitivity : 0.8671          \n            Specificity : 0.8986          \n         Pos Pred Value : 0.8724          \n         Neg Pred Value : 0.8942          \n             Prevalence : 0.4445          \n         Detection Rate : 0.3854          \n   Detection Prevalence : 0.4418          \n      Balanced Accuracy : 0.8828          \n                                          \n       'Positive' Class : FALSE           \n                                          \n\n# need to have a localized strategy to identify specific reason for the waterpoint turned non-functional\n\nAccuracy : 0.8837\nSensitivity (probability of true positive) : 0.8628\nSpecificity (probability of true negative): 0.9005\n\nOsun_wp_sf_selected <- Osun_wp_sf_clean %>%\n    select(c(ADM2_EN, ADM2_PCODE,\n             ADM1_EN, ADM1_PCODE,\n             status))\n\n\ngwr_sf.fixed_r <- cbind(Osun_wp_sf_selected, gwr.fixed_r)\n\n\n\n2.2.5 Choropleth Mapping of Model Probability\nThe code chunk below indicates the location of waterpoints with the probability of it being functional (dark-colored) or non-functional (light-colored).\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nprob_T <- tm_shape(Osun) +\n    tm_polygons(alpha = 0.1) +\n    tm_shape(gwr_sf.fixed_r) +\n    tm_dots(col = 'yhat',\n            border.col = 'gray60',\n            border.lwd = 1) +\n    tm_view(set.zoom.limits = c(8,14))\nprob_T"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of Functional & Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.\n\n\n\n\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set. We will rename this file to “geo_export”.\n\n\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries. We will use the file “nga_polnda_adm2_1m_salb”.\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\n\nPlot hotspot areas and outliers/clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\nThis exercise will be graded by using the following criteria:\n\nGeospatial Data Wrangling (20 marks): This is an important aspect of geospatial analytics. You will be assessed on your ability to employ appropriate R functions from various R packages specifically designed for modern data science such as readr, tidyverse (tidyr, dplyr, ggplot2), sf just to mention a few of them, to perform the entire geospatial data wrangling processes, including. This is not limited to data import, data extraction, data cleaning and data transformation. Besides assessing your ability to use the R functions, this criterion also includes your ability to clean and derive appropriate variables to meet the analysis need. (Warning: All data are like vast grassland full of land mines. Your job is to clear those mines and not to step on them).\nGeospatial Analysis (25 marks): In this exercise, you are expected to use the appropriate thematic and analytics mapping techniques and R functions introduced in class to analyse the geospatial data prepared. You will be assessed on your ability to derive analytical maps by using appropriate rate mapping techniques.\nGeovisualisation and Geocommunication (25 marks): In this section, you will be assessed on your ability to communicate the complex spatial statistics results in business friendly visual representations. This course is geospatial centric, hence, it is important for you to demonstrate your competency in using appropriate. geovisualisation techniques to reveal and communicate the findings of your analysis.\nReproducibility (20 marks): This is an important learning outcome of this exercise. You will be assessed on your ability to provide a comprehensive documentation of the analysis procedures in the form of code chunks of Markdown. It is important to note that it is not enough by merely providing the code chunk without any explanation on the purpose and R function(s) used.\nBonus (10 marks): Demonstrate your ability to employ methods beyond what you had learned in class to gain insights from the data. The methods used must be geospatial in nature."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, tmap, funModeling)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#downloading-and-importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#downloading-and-importing-geospatial-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.3 Downloading and Importing Geospatial Data",
    "text": "1.3 Downloading and Importing Geospatial Data\nIn this in-class data, two geospatial data sets will be used, they are:\n\ngeo_export\nnga_polnda_adm2_1m_salb\n\n\n1.3.1 Importing water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp = st_read(dsn = 'geodata',\n             layer = 'geo_export',\n             crs = 4326) %>%\n    filter(clean_coun == 'Nigeria')\n\n\nwrite_rds(wp, 'geodata/wp_nga.rds')\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga = write_rds(wp,\n                   'geodata/wp_nga.rds')\n\n\n\n1.3.2 Importing Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga = st_read(dsn = 'geodata',\n              layer = 'nga_polnda_adm2_1m_salb',\n              crs = 4326) \n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_polnda_adm2_1m_salb shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.4 Data Wrangling",
    "text": "1.4 Data Wrangling\n\n1.4.1 Recoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n    mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n1.4.2 EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#extracting-water-point-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.5 Extracting Water Point Data",
    "text": "1.5 Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\n1.5.1 Extracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n1.5.2 Extracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n1.5.3 Extracting water point with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n1.5.4 Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n1.5.5 Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")\n\nBefore you end this section, please remember to delete away all the raw data. Notice that the only data file left is nga_wp.rds and it’s file size is around 2.1MB.\n\n\n1.5.6 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\nWe will first use st_crs() of sf package as shown in the code chunk below to check the coordinate system of nga_wp dataframe.\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\n\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAlthough nga_wpdata frame is projected in wgs84 but when we read until the end of the print, it indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for wgs84 should be 26391.\n\n\n1.5.9 Transforming the projection of preschool from wgs84 to EPSG 26391.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis requires the use of distance or/and area measurements.\nWe need to reproject nga_wpfrom one coordinate system to another coordinate system mathematically.\nLet us perform the projection transformation by using the code chunk below.\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\nnga_wp26391 <- st_transform(nga_wp,\n                    crs = 26391)\nst_crs(nga_wp26391)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\nFor simplicity sake, nga_wp26391 will be renamed to nga_wp and overwrite its data using the code chunk below.\n\nnga_wp <- nga_wp26391"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#proportion-of-functional-and-non-functional-water-point-at-lga-level.",
    "href": "Take-home_Ex/Take-home_Ex1.html#proportion-of-functional-and-non-functional-water-point-at-lga-level.",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "2 Proportion of functional and non-functional water point at LGA level.",
    "text": "2 Proportion of functional and non-functional water point at LGA level.\nThere are in total 773 LGA as per nga_wp26391 data table. We shall extract the relevant information and create a table (tab) to show the relevant columns (proportion of functional and non-functional water points at LGA level)\n\ntab <- nga_wp[,c(6,14,15,16,18,19)]\ntab\n\nSimple feature collection with 773 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28868.2 ymin: 30747.71 xmax: 1343676 ymax: 1094979\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n   ADM2_CODE total wpt wpt functional wpt non-functional pct_functional\n1  NGA001001        16              5                  9      0.3125000\n2  NGA001002        76             32                 37      0.4210526\n3  NGA001003        25              7                  7      0.2800000\n4  NGA001004        60             15                 15      0.2500000\n5  NGA001005       107             13                 43      0.1214953\n6  NGA001006        95             22                 31      0.2315789\n7  NGA001007        57             14                 33      0.2456140\n8  NGA001008        64             25                 18      0.3906250\n9  NGA001009       174             30                117      0.1724138\n10 NGA001010        39              8                 19      0.2051282\n   pct_non-functional                       geometry\n1           0.5625000 MULTIPOLYGON (((543570.1 12...\n2           0.4868421 MULTIPOLYGON (((542081.5 11...\n3           0.2800000 MULTIPOLYGON (((608160.4 17...\n4           0.2500000 MULTIPOLYGON (((568876.8 20...\n5           0.4018692 MULTIPOLYGON (((568036.9 16...\n6           0.3263158 MULTIPOLYGON (((540288.3 14...\n7           0.5789474 MULTIPOLYGON (((549299.6 16...\n8           0.2812500 MULTIPOLYGON (((551352.8 21...\n9           0.6724138 MULTIPOLYGON (((563707 1442...\n10          0.4871795 MULTIPOLYGON (((586759.5 20..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3 Visualizing the spatial distribution of water points",
    "text": "3 Visualizing the spatial distribution of water points"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#thematic-mapping-1",
    "href": "Take-home_Ex/Take-home_Ex1.html#thematic-mapping-1",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3.1 Thematic Mapping",
    "text": "3.1 Thematic Mapping\nMaps are plotted to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\nTo draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\nIn the code chunk below, the following tmap’s drawing elements are used:\n\ntm_shape() is used to define the input data (i.e nga_wp)\ntm_fill() shades the polygons by using the default colour scheme to show the geographical distribution of a selected variable (i.e wpt functional and `wpt non-functional)\ntm_borders() adds the borders of the shapefile onto the choropleth map\ntm_layout() refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\nThe 2 maps are placed side by side for better comparison using tmap_arrange().\n\nwP_functional <- tm_shape(nga_wp)+\n    tm_fill(\"wpt functional\",\n            style = \"equal\")+\n    tm_layout(main.title = \"Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)+\n    tm_borders(lwd = 0.1, alpha = 0.5)\n\nwp_nonfunctional <- tm_shape(nga_wp)+\n    tm_fill( \"wpt non-functional\",\n            style = \"equal\")+\n    tm_layout(main.title = \"Non-functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)+\n    tm_borders(lwd = 0.1, alpha = 0.5)\n\ntmap_arrange(wP_functional, wp_nonfunctional, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.4 Global Spatial Autocorrelation",
    "text": "4.4 Global Spatial Autocorrelation\nIn this section, we will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\n4.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighborhood relationships between the geographical units (i.e. ADM2_CODE) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbors list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbors using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(nga_wp, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\n\nThe summary report above shows that there are 773 area units in Nigeria. The most connected area unit (516) has 13 neighbors. There are two area units (475 & 505) with only one neighbor.\n\n\n4.4.2 Row-standardized weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 281.9605 3193.332\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.policy.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardized (sums over all links to n), C is globally standardized (sums over all links to n), U is equal to C divided by the number of neighbors (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbor in the neighbors list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbors))) %*% x, for arbitrary numerical vector x of length length(neighbors). The spatially lagged value of x for the zero-neighbor region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.4.3 Global Spatial Autocorrelation: Moran’s I & Geary’s C for Functional Waterpoints\nIn this section, we will perform Moran’s I statistics testing by using moran.test() and geary.test() of spdep for functional waterpoints.\n\n4.4.3.1 Moran’s I test for Functional Waterpoints\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nf_wpt = moran.test(nga_wp$`wpt functional`,\n                       listw=rswm_q,\n                       zero.policy = TRUE,\n                       na.action=na.omit)\nf_wpt\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt functional`  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 25.818, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.5518087465     -0.0012953368      0.0004589518 \n\n\nMoran I statistic is found to be 0.5518087465. positive (I>0): Clustered, observations tend to be similar. There is a need to confirm the Moran I statistic by comparing actual value of Moran’s I to Monte Carlo Moran’s I to obtain p-value.\n\n\n4.4.3.2 Computing Monte Carlo Moran’s I for Functional Waterpoints\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\nBear in mind the number of simulation starts counting from 0 hence nsim = 999.\nset seed (value) where value specifies the initial value of the random number seed.\nThe na.omit R function removes all incomplete cases of a data object\n\nset.seed(1234)\nbperm_f_wpt = moran.mc(nga_wp$`wpt functional`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_f_wpt\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.55181, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Moran’s I is identical to previously obtained Moran I statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.3.3 Visualizing Monte Carlo Moran’s I for Functional Waterpoints\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunks below.\n\nhist(bperm_f_wpt$res, \n     freq=TRUE,\n     xlim = c(-0.1,0.6),\n     breaks=50,\n     main = \"Histogram of Monte Carlo Moran's I for Functional Waterpoints\",\n     xlab=\"Simulated Moran's I for Functional Waterpoints\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n4.4.3.4 Geary’s C test for Functional Waterpoints\nThe code chunk below performs Geary’s C statistical testing using geary.test() of spdep.\n\ngeary.test(nga_wp$`wpt functional`, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wpt functional` \nweights: rswm_q \n\nGeary C statistic standard deviate = 15.383, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.468025940       1.000000000       0.001195875 \n\n\nGeary C statistic is found to be 0.468025940. small c value (<1): Clustered, observations tend to be similar. There is a need to confirm the Geary C statistic by comparing actual value of Geary’s C to Monte Carlo Geary’s C to obtain p-value.\n\n\n4.4.3.5 Computing Monte Carlo Geary’s C for Functional Waterpoints\n\nset.seed(1234)\nbperm_g_f_wpt=geary.mc(nga_wp$`wpt functional`, \n               listw=rswm_q, \n               nsim=999)\nbperm_g_f_wpt\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wpt functional` \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.46803, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Geary’s C is identical to previously obtained Geary C statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.3.6 Visualizing the Monte Carlo Geary’s C for Functional Waterpoints\n\nhist(bperm_g_f_wpt$res,\n     freq=TRUE,\n     breaks=20,\n     main = \"Histogram of Monte Carlo Geary's C for Functional Waterpoints\",\n     xlab=\"Simulated Geary's C for Functional Waterpoints\")\nabline(v=1, col=\"red\")\n\n\n\n\n\n\n4.4.3.7 Conclusion after review of Monte Carlo histograms of both Moran’s I and Geary’s C for Functional Waterpoints\nIt is acceptable to use either Moran’s I or Geary’s C as their p-values are below 0.05. There is no merit to choose one over the other as distribution of both histograms are not approximately normal. Moving forward, we will be using Moran’s I for functional waterpoints.\n\n\n\n4.4.4 Global Spatial Autocorrelation: Moran’s I & Geary’s C for Non-functional Waterpoints\nIn this section, we will perform Moran’s I statistics testing by using moran.test() and geary.test() of spdep for non-functional waterpoints.\n\n4.4.4.1 Moran’s I test for Non-functional Waterpoints\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nnf_wpt = moran.test(nga_wp$`wpt non-functional`,\n                       listw=rswm_q,\n                       zero.policy = TRUE,\n                       na.action=na.omit)\nnf_wpt\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 19.973, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4301096187     -0.0012953368      0.0004665373 \n\n\nMoran I statistic is found to be 0.4301096187. positive (I>0): Clustered, observations tend to be similar. There is a need to confirm the Moran I statistic by comparing actual value of Moran’s I to Monte Carlo Moran’s I to obtain p-value.\n\n\n4.4.4.2 Computing Monte Carlo Moran’s I for Non-functional Waterpoints\n\nset.seed(1234)\nbperm_nf_wpt = moran.mc(nga_wp$`wpt non-functional`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_nf_wpt\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43011, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Moran’s I is identical to previously obtained Moran I statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.4.3 Visualizing Monte Carlo Moran’s I for Non-functional Waterpoints\n\nhist(bperm_nf_wpt$res, \n     freq=TRUE,\n     xlim = c(-0.1,0.5),\n     breaks=50,\n     main = \"Histogram of Monte Carlo Moran's I for Non-functional Waterpoints\",\n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n4.4.4.4 Geary’s C test for Non-functional Waterpoints\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(nga_wp$`wpt non-functional`, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q \n\nGeary C statistic standard deviate = 14.296, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.6289314781      1.0000000000      0.0006737348 \n\n\nGeary C statistic is found to be 0.6289314781. Small c value (<1): Clustered, observations tend to be similar. There is a need to confirm the Geary C statistic by comparing actual value of Geary’s C to Monte Carlo Geary’s C to obtain p-value.\n\n\n4.4.4.5 Computing Monte Carlo Geary’s C for Non-functional Waterpoints\n\nset.seed(1234)\nbperm_g_nf_wpt=geary.mc(nga_wp$`wpt non-functional`, \n               listw=rswm_q, \n               nsim=999)\nbperm_g_nf_wpt\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.62893, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Geary’s C is identical to previously obtained Geary C statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.4.6 Visualizing the Monte Carlo Geary’s C for Non-functional Waterpoints\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nhist(bperm_g_nf_wpt$res,\n     freq=TRUE,\n     breaks=20,\n     main = \"Histogram of Monte Carlo Geary's C for Non-functional Waterpoints\",\n     xlab=\"Simulated Geary's C for Non-functional Waterpoint \")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n4.4.3.7 Conclusion after review of Monte Carlo histograms of both Moran’s I and Geary’s C for Non-functional Waterpoints\nIt is acceptable to use either Moran’s I or Geary’s C as their p-values are below 0.05. There is no merit to choose one over the other as distribution of both histograms are not approximately normal. Moving forward, we will be using Moran’s I for non-functional waterpoints."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#spatial-correlogram",
    "href": "Take-home_Ex/Take-home_Ex1.html#spatial-correlogram",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.5 Spatial Correlogram",
    "text": "4.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n4.5.1 Compute Moran’s I correlogram for Functional Waterpoints\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of `wpt functional`. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr_f_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt functional`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr_f_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr_f_wpt)\n\nSpatial correlogram for nga_wp$`wpt functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  5.5181e-01 -1.2953e-03  4.5895e-04           25.818       < 2.2e-16\n2 (773)  4.5396e-01 -1.2953e-03  1.9759e-04           32.388       < 2.2e-16\n3 (773)  3.5993e-01 -1.2953e-03  1.1970e-04           33.017       < 2.2e-16\n4 (773)  2.8542e-01 -1.2953e-03  8.6698e-05           30.793       < 2.2e-16\n5 (773)  1.9300e-01 -1.2953e-03  6.7697e-05           23.614       < 2.2e-16\n6 (773)  1.3391e-01 -1.2953e-03  5.6591e-05           17.973       < 2.2e-16\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nMoran’s I decrease as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Pr(I) is not statistically significant at spatial lag 10 and Moran’s I turns negative starting henceforth.\n\n\n4.5.2 Compute Geary’s C correlogram and plot for Functional Waterpoints\n\nGC_corr_f_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt functional`, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr_f_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(GC_corr_f_wpt)\n\nSpatial correlogram for nga_wp$`wpt functional` \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.46802594  1.00000000 0.00119588         -15.3832       < 2.2e-16 ***\n2 (773) 0.55789502  1.00000000 0.00079243         -15.7052       < 2.2e-16 ***\n3 (773) 0.63636061  1.00000000 0.00063656         -14.4129       < 2.2e-16 ***\n4 (773) 0.70991012  1.00000000 0.00062241         -11.6277       < 2.2e-16 ***\n5 (773) 0.79552249  1.00000000 0.00062612          -8.1718       3.039e-16 ***\n6 (773) 0.86736007  1.00000000 0.00074435          -4.8617       1.164e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nGeary’s C increases as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Geary’s C turns flat staying below 1 starting from spatial lag 7.\n\n\n4.5.3 Compute Moran’s I correlogram for Non-functional Waterpoints\n\nMI_corr_nf_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt non-functional`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr_nf_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr_nf_wpt)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3011e-01 -1.2953e-03  4.6654e-04          19.9729       < 2.2e-16\n2 (773)  2.6815e-01 -1.2953e-03  2.0085e-04          19.0121       < 2.2e-16\n3 (773)  1.9482e-01 -1.2953e-03  1.2168e-04          17.7794       < 2.2e-16\n4 (773)  1.3648e-01 -1.2953e-03  8.8129e-05          14.6761       < 2.2e-16\n5 (773)  6.3707e-02 -1.2953e-03  6.8814e-05           7.8359       4.654e-15\n6 (773)  2.7753e-02 -1.2953e-03  5.7524e-05           3.8300       0.0001282\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nMoran’s I decrease as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Pr(I) is not statistically significant at spatial lag 7 and Moran’s I turns negative starting henceforth.\n\n\n4.5.4 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of `wpt non-functional`. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr_nf_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt non-functional`, \n                          order=8, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr_nf_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(GC_corr_nf_wpt)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.62893148  1.00000000 0.00067373         -14.2958       < 2.2e-16 ***\n2 (773) 0.75743251  1.00000000 0.00036843         -12.6373       < 2.2e-16 ***\n3 (773) 0.81590194  1.00000000 0.00026738         -11.2586       < 2.2e-16 ***\n4 (773) 0.86991261  1.00000000 0.00023922          -8.4107       < 2.2e-16 ***\n5 (773) 0.95214396  1.00000000 0.00022636          -3.1808        0.001469 ** \n6 (773) 0.99534531  1.00000000 0.00025160          -0.2934        0.769179    \n7 (773) 1.03397466  1.00000000 0.00032633           1.8807        0.060010 .  \n8 (773) 1.05167167  1.00000000 0.00040028           2.5827        0.009804 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nGeary’s C increases as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Pr(I) is not statistically significant at spatial lag 6, Geary’s C goes above 1 starting from spatial lag 7."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.6 Cluster and Outlier Analysis",
    "text": "4.6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from functional and non-functional waterpoints of Nigeria.\n\n4.6.1 Computing local Moran’s I for Functional Waterpoints\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbor weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of functional waterpoints at the county level.\n\nfips <- order(nga_wp$ADM2_CODE)\nlocalMI_f_wpt <- localmoran(nga_wp$`wpt functional`, rswm_q)\nhead(localMI_f_wpt)\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.4518554 -0.0007743811 0.14895142 1.172791     0.24087944\n2 0.2932012 -0.0002495782 0.04803132 1.338976     0.18057833\n3 0.3949213 -0.0007255814 0.09280546 1.298736     0.19403449\n4 0.4448276 -0.0005462632 0.05227489 1.947952     0.05142074\n5 0.4197113 -0.0005887106 0.07530933 1.531563     0.12563022\n6 0.3375760 -0.0004102032 0.06306252 1.345901     0.17833430\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local Moran’s I statistics under the randomization hypothesis\nVar.Ii: the variance of local Moran’s I statistics under the randomization hypothesis\nZ.Ii:the standard deviate of local Moran’s I statistics\nPr(): the p-value of local Moran’s I statistics\n\nThe code chunk below list the content of the local Moran’s I statistics matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI_f_wpt[fips,], \n  row.names=nga_wp$ADM2_CODE[fips]),\n  check.names=FALSE)\n\n                   Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nNGA001001  4.5186e-01 -7.7438e-04  1.4895e-01  1.1728e+00         0.2409\nNGA001002  2.9320e-01 -2.4958e-04  4.8031e-02  1.3390e+00         0.1806\nNGA001003  3.9492e-01 -7.2558e-04  9.2805e-02  1.2987e+00         0.1940\nNGA001004  4.4483e-01 -5.4626e-04  5.2275e-02  1.9480e+00         0.0514\nNGA001005  4.1971e-01 -5.8871e-04  7.5309e-02  1.5316e+00         0.1256\nNGA001006  3.3758e-01 -4.1020e-04  6.3063e-02  1.3459e+00         0.1783\nNGA001007  3.8528e-01 -5.6729e-04  6.2122e-02  1.5481e+00         0.1216\nNGA001008  3.5824e-01 -3.5785e-04  5.5016e-02  1.5288e+00         0.1263\nNGA001009  2.9481e-01 -2.7853e-04  2.1273e-02  2.0232e+00         0.0430\nNGA001010  4.7116e-01 -7.0178e-04  1.3500e-01  1.2843e+00         0.1991\nNGA001011  4.2117e-01 -7.2558e-04  6.9422e-02  1.6012e+00         0.1093\nNGA001012  3.9201e-01 -6.1053e-04  7.8099e-02  1.4049e+00         0.1600\nNGA001013  3.4753e-01 -4.1020e-04  4.4927e-02  1.6415e+00         0.1007\nNGA001014  2.9501e-01 -2.4958e-04  3.1937e-02  1.6522e+00         0.0985\nNGA001015  3.4670e-01 -3.9235e-04  4.2973e-02  1.6743e+00         0.0941\nNGA001016  3.3482e-01 -3.5785e-04  5.5016e-02  1.4290e+00         0.1530\nNGA001017  5.3082e-01 -7.7438e-04  8.4783e-02  1.8257e+00         0.0679\nNGA002001  4.4610e-01 -7.0178e-04  6.7146e-02  1.7243e+00         0.0847\nNGA002002  4.4887e-01 -5.6729e-04  7.2570e-02  1.6684e+00         0.0952\nNGA002003  2.0624e-01 -7.9938e-04  1.5376e-01  5.2801e-01         0.5975\nNGA002004  3.1418e-01 -3.0906e-04  5.9476e-02  1.2896e+00         0.1972\nNGA002005  4.0293e-01 -4.6613e-04  7.1657e-02  1.5069e+00         0.1318\nNGA002006  2.8152e-01 -6.1053e-04  7.8099e-02  1.0096e+00         0.3127\nNGA002007  4.4541e-01 -7.4978e-04  9.5899e-02  1.4407e+00         0.1497\nNGA002008  5.2669e-01 -6.7837e-04  1.7422e-01  1.2635e+00         0.2064\nNGA002009  8.6851e-02 -8.5056e-04  1.3070e-01  2.4259e-01         0.8083\nNGA002010  5.8365e-01 -9.0333e-04  1.7373e-01  1.4024e+00         0.1608\nNGA002011  4.9454e-01 -5.8871e-04  9.0489e-02  1.6460e+00         0.0998\nNGA002012  1.0643e-01 -7.0178e-04  5.9608e-02  4.3879e-01         0.6608\nNGA002013  4.6459e-01 -5.4626e-04  1.4031e-01  1.2417e+00         0.2143\nNGA002014  5.6711e-01 -9.0333e-04  1.3880e-01  1.5246e+00         0.1274\nNGA002015  6.3017e-01 -9.0333e-04  3.4837e-01  1.0692e+00         0.2850\nNGA002016  4.6682e-01 -8.2477e-04  1.2674e-01  1.3136e+00         0.1890\nNGA002017  4.4741e-01 -7.7438e-04  8.4783e-02  1.5392e+00         0.1237\nNGA002018  3.8569e-01 -4.2845e-04  4.6925e-02  1.7824e+00         0.0747\nNGA002019 -1.4142e-01 -7.9938e-04  2.0527e-01 -3.1037e-01         0.7563\nNGA002020  5.1102e-01 -7.4978e-04  1.1523e-01  1.5076e+00         0.1316\nNGA002021  4.2497e-01 -5.0540e-04  1.9499e-01  9.6354e-01         0.3353\nNGA003001  3.3242e-01 -3.9235e-04  5.0201e-02  1.4854e+00         0.1374\nNGA003002  4.4791e-01 -7.9938e-04  1.2284e-01  1.2802e+00         0.2005\nNGA003003  2.1515e-01 -1.7226e-04  2.6489e-02  1.3230e+00         0.1858\nNGA003004  3.3823e-01 -4.8557e-04  6.2122e-02  1.3590e+00         0.1742\nNGA003005  3.5773e-01 -4.6613e-04  5.1050e-02  1.5854e+00         0.1129\nNGA003006  4.0264e-01 -5.2563e-04  8.0799e-02  1.4183e+00         0.1561\nNGA003007  3.1094e-01 -7.0178e-04  8.9763e-02  1.0402e+00         0.2983\nNGA003008  4.3972e-01 -7.0178e-04  1.0786e-01  1.3411e+00         0.1799\nNGA003009  3.0879e-01 -4.4709e-04  6.8731e-02  1.1795e+00         0.2382\nNGA003010  3.0637e-01 -4.4709e-04  5.7201e-02  1.2828e+00         0.1995\nNGA003011  4.0948e-01 -6.7837e-04  1.3050e-01  1.1354e+00         0.2562\nNGA003012  3.2528e-01 -3.9235e-04  4.2973e-02  1.5710e+00         0.1162\nNGA003013  3.0995e-01 -3.0906e-04  4.7519e-02  1.4233e+00         0.1547\nNGA003014  3.7884e-01 -5.4626e-04  1.4031e-01  1.0128e+00         0.3111\nNGA003015  4.7522e-01 -7.2558e-04  9.2805e-02  1.5623e+00         0.1182\nNGA003016  2.8844e-01 -5.6729e-04  1.0914e-01  8.7480e-01         0.3817\nNGA003017  4.8339e-01 -6.7837e-04  1.3050e-01  1.3400e+00         0.1802\nNGA003018  2.2774e-01 -1.8415e-04  2.3567e-02  1.4847e+00         0.1376\nNGA003019  3.3201e-01 -4.6613e-04  8.9688e-02  1.1102e+00         0.2669\nNGA003020  2.7463e-01 -3.5785e-04  6.8860e-02  1.0479e+00         0.2947\nNGA003021  2.0296e-01 -1.7226e-04  1.6491e-02  1.5818e+00         0.1137\nNGA003022  3.7258e-01 -4.6613e-04  5.1050e-02  1.6511e+00         0.0987\nNGA003023  2.7161e-01 -3.5785e-04  3.9195e-02  1.3737e+00         0.1695\nNGA003024  2.8081e-01 -3.2493e-04  4.1577e-02  1.3788e+00         0.1680\nNGA003025  3.2047e-01 -6.1053e-04  1.1745e-01  9.3688e-01         0.3488\nNGA003026  3.6652e-01 -6.5536e-04  8.3830e-02  1.2682e+00         0.2047\nNGA003027  4.8488e-01 -6.7837e-04  1.7422e-01  1.1633e+00         0.2447\nNGA003028  4.4158e-01 -6.7837e-04  8.6771e-02  1.5014e+00         0.1333\nNGA003029  3.4283e-01 -7.0178e-04  8.9763e-02  1.1466e+00         0.2515\nNGA003030  3.9253e-01 -4.6613e-04  7.1657e-02  1.4681e+00         0.1421\nNGA003031  2.4203e-01 -2.0913e-04  1.5974e-02  1.9166e+00         0.0553\nNGA004001  5.4805e-01 -7.7438e-04  1.1901e-01  1.5909e+00         0.1116\nNGA004002  3.9698e-01 -4.6613e-04  5.9636e-02  1.6275e+00         0.1036\nNGA004003  3.6491e-01 -3.5785e-04  3.4251e-02  1.9737e+00         0.0484\nNGA004004  4.0996e-01 -3.9235e-04  4.2973e-02  1.9795e+00         0.0478\nNGA004005  5.0305e-01 -7.0178e-04  6.7146e-02  1.9440e+00         0.0519\nNGA004006  4.9324e-01 -6.7837e-04  1.0426e-01  1.5297e+00         0.1261\nNGA004007  5.1855e-01 -7.4978e-04  1.1523e-01  1.5298e+00         0.1261\nNGA004008  4.1035e-01 -4.6613e-04  7.1657e-02  1.5347e+00         0.1249\nNGA004009  5.5463e-01 -8.7674e-04  1.3472e-01  1.5135e+00         0.1302\nNGA004010  5.2479e-01 -8.5056e-04  9.3116e-02  1.7226e+00         0.0850\nNGA004011  5.3103e-01 -7.2558e-04  7.9444e-02  1.8866e+00         0.0592\nNGA004012  3.5752e-01 -3.0906e-04  3.9547e-02  1.7994e+00         0.0720\nNGA004013  4.4468e-01 -5.4626e-04  5.9821e-02  1.8204e+00         0.0687\nNGA004014  5.4499e-01 -6.1053e-04  1.5681e-01  1.3778e+00         0.1683\nNGA004015  5.6259e-01 -8.5056e-04  8.1370e-02  1.9752e+00         0.0482\nNGA004016  4.1446e-01 -5.2563e-04  4.0136e-02  2.0714e+00         0.0383\nNGA004017  4.8403e-01 -6.7837e-04  7.4278e-02  1.7785e+00         0.0753\nNGA004018  5.3932e-01 -7.9938e-04  2.0527e-01  1.1921e+00         0.2332\nNGA004019  4.9713e-01 -6.3275e-04  9.7253e-02  1.5961e+00         0.1105\nNGA004020  5.4481e-01 -7.0178e-04  8.9763e-02  1.8208e+00         0.0686\nNGA004021  4.2883e-01 -5.0540e-04  6.4658e-02  1.6885e+00         0.0913\nNGA005001  2.8486e-03 -5.8324e-08  5.5844e-06  1.2054e+00         0.2280\nNGA005002  1.5164e-01 -5.9053e-04  9.0769e-02  5.0528e-01         0.6134\nNGA005003  2.4369e-01 -1.0087e-04  1.9415e-02  1.7496e+00         0.0802\nNGA005004 -1.9087e-01 -3.4119e-04  4.3657e-02 -9.1187e-01         0.3618\nNGA005005  1.1261e-02 -1.2865e-04  1.4095e-02  9.5940e-02         0.9236\nNGA005006  1.5145e+00 -6.3990e-03  2.4542e+00  9.7081e-01         0.3316\nNGA005007  1.3087e+00 -1.0551e-02  1.3362e+00  1.1413e+00         0.2538\nNGA005008  3.3711e-02 -1.1292e-05  1.0811e-03  1.0256e+00         0.3051\nNGA005009 -3.5041e-02 -3.9450e-06  7.5941e-04 -1.2714e+00         0.2036\nNGA005010  1.1102e+00 -3.5927e-04  3.4387e-02  5.9890e+00         0.0000\nNGA005011  3.1044e-01 -1.1956e-04  2.3013e-02  2.0472e+00         0.0406\nNGA005012  8.9500e-02 -2.2061e-05  2.4172e-03  1.8209e+00         0.0686\nNGA005013 -6.8766e-02 -1.4966e-04  2.3014e-02 -4.5230e-01         0.6511\nNGA005014 -3.4769e-03 -4.8722e-04  7.4897e-02 -1.0924e-02         0.9913\nNGA005015  1.0552e-01 -1.1292e-05  1.0811e-03  3.2094e+00         0.0013\nNGA005016  7.4193e-01 -1.4867e-03  2.2832e-01  1.5558e+00         0.1197\nNGA005017  4.9956e-01 -9.6001e-04  8.1520e-02  1.7530e+00         0.0796\nNGA005018  2.1834e-01 -3.2628e-04  2.4919e-02  1.3852e+00         0.1660\nNGA005019  1.0059e+00 -5.9097e-03  1.1309e+00  9.5146e-01         0.3414\nNGA005020  8.8578e+00 -1.2761e-02  1.3804e+00  7.5501e+00         0.0000\nNGA006001  4.8465e-01 -7.4978e-04  1.1523e-01  1.4299e+00         0.1527\nNGA006002  5.8551e-01 -7.9938e-04  1.5376e-01  1.4952e+00         0.1348\nNGA006003  4.1528e-01 -4.8557e-04  1.2473e-01  1.1772e+00         0.2391\nNGA006004  4.4315e-01 -5.4626e-04  1.4031e-01  1.1845e+00         0.2362\nNGA006005  3.8535e-01 -4.2845e-04  5.4817e-02  1.6477e+00         0.0994\nNGA006006  4.2439e-01 -5.4626e-04  4.6406e-02  1.9726e+00         0.0485\nNGA006007  4.7826e-01 -6.5536e-04  7.1760e-02  1.7878e+00         0.0738\nNGA006008  4.1137e-01 -5.8871e-04  7.5309e-02  1.5012e+00         0.1333\nNGA007001 -1.0763e-02 -8.2788e-06  7.0368e-04 -4.0543e-01         0.6852\nNGA007002  2.4112e-01 -3.5785e-04  5.5016e-02  1.0295e+00         0.3032\nNGA007003  4.6453e-01 -6.1053e-04  9.3841e-02  1.5184e+00         0.1289\nNGA007004 -5.8778e-02 -2.5076e-04  3.2089e-02 -3.2672e-01         0.7439\nNGA007005  6.1781e-02 -6.8249e-05  1.0496e-02  6.0371e-01         0.5460\nNGA007006  3.4886e-02 -2.0913e-04  1.7772e-02  2.6326e-01         0.7924\nNGA007007 -5.9866e-02 -1.0923e-04  9.2837e-03 -6.2020e-01         0.5351\nNGA007008  3.4071e-01 -9.0333e-04  1.1552e-01  1.0051e+00         0.3148\nNGA007009  1.0579e-02 -2.1711e-05  2.3788e-03  2.1735e-01         0.8279\nNGA007010  3.3910e-01 -1.8887e-03  2.0655e-01  7.5028e-01         0.4531\nNGA007011 -2.6308e-02 -2.6385e-04  3.3764e-02 -1.4174e-01         0.8873\nNGA007012 -4.4870e-03 -3.0906e-04  4.7519e-02 -1.9166e-02         0.9847\nNGA007013  8.1628e-02 -4.7433e-05  9.1304e-03  8.5476e-01         0.3927\nNGA007014  6.2723e-03 -4.7203e-07  9.0865e-05  6.5805e-01         0.5105\nNGA007015  3.3156e-01 -2.9360e-04  4.5141e-02  1.5619e+00         0.1183\nNGA007016  3.3011e-01 -3.4119e-04  6.5656e-02  1.2896e+00         0.1972\nNGA007017  3.2754e-01 -6.6146e-03  8.4106e-01  3.6437e-01         0.7156\nNGA007018  3.3998e-01 -5.4626e-04  6.9882e-02  1.2882e+00         0.1977\nNGA007019  2.6669e-01 -4.2845e-04  4.1005e-02  1.3191e+00         0.1871\nNGA007020 -8.1003e-04 -2.6445e-05  5.0905e-03 -1.0983e-02         0.9912\nNGA007021  8.4319e-04 -1.3896e-04  2.6746e-02  6.0055e-03         0.9952\nNGA007022 -3.2536e-02 -3.0809e-05  3.9433e-03 -5.1763e-01         0.6047\nNGA007023 -4.0463e-03 -1.1993e-06  1.8445e-04 -2.9784e-01         0.7658\nNGA008001  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008002  2.8780e-01 -2.9360e-04  2.8103e-02  1.7186e+00         0.0857\nNGA008003  6.9323e-01 -9.0333e-04  1.3880e-01  1.8631e+00         0.0624\nNGA008004  4.5545e-02 -5.3769e-05  8.2691e-03  5.0145e-01         0.6161\nNGA008005 -4.2430e-02 -6.0970e-06  5.8377e-04 -1.7558e+00         0.0791\nNGA008006  2.1770e-01 -3.5785e-04  9.1933e-02  7.1917e-01         0.4720\nNGA008007  5.3067e-01 -9.0333e-04  8.6413e-02  1.8083e+00         0.0706\nNGA008008  6.9392e-01 -9.0333e-04  1.1552e-01  2.0443e+00         0.0409\nNGA008009  6.8290e-01 -9.0333e-04  1.3880e-01  1.8354e+00         0.0664\nNGA008010  6.9565e-01 -9.0333e-04  1.1552e-01  2.0494e+00         0.0404\nNGA008011  6.9220e-01 -9.0333e-04  1.7373e-01  1.6629e+00         0.0963\nNGA008012  2.3388e-01 -2.7853e-04  3.0509e-02  1.3406e+00         0.1800\nNGA008013  2.8494e-02 -3.9450e-06  7.5941e-04  1.0341e+00         0.3011\nNGA008014  6.0433e-01 -9.0333e-04  1.3880e-01  1.6245e+00         0.1043\nNGA008015  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008016  5.0616e-01 -8.5056e-04  6.4925e-02  1.9898e+00         0.0466\nNGA008017  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008018  1.7986e-01 -8.2477e-04  1.5864e-01  4.5365e-01         0.6501\nNGA008019  5.9990e-01 -9.0333e-04  9.8888e-02  1.9106e+00         0.0561\nNGA008020  5.4654e-01 -7.4978e-04  8.2092e-02  1.9102e+00         0.0561\nNGA008021 -1.7434e-01 -2.1022e-04  8.1127e-02 -6.1134e-01         0.5410\nNGA008022  6.9737e-01 -9.0333e-04  1.7373e-01  1.6753e+00         0.0939\nNGA008023  6.8496e-01 -9.0333e-04  1.3880e-01  1.8409e+00         0.0656\nNGA008024  6.9530e-01 -9.0333e-04  1.3880e-01  1.8687e+00         0.0617\nNGA008025  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008026  5.8373e-01 -8.7674e-04  9.5980e-02  1.8870e+00         0.0592\nNGA008027  5.3655e-02 -1.1875e-04  1.3009e-02  4.7146e-01         0.6373\nNGA009001 -7.9968e-02 -2.6061e-05  4.0080e-03 -1.2627e+00         0.2067\nNGA009002 -3.0993e-02 -2.7853e-04  3.0509e-02 -1.7585e-01         0.8604\nNGA009003  1.2915e-01 -1.1875e-04  2.2856e-02  8.5508e-01         0.3925\nNGA009005 -1.1555e-01 -1.0923e-04  1.6798e-02 -8.9067e-01         0.3731\nNGA009006  6.3806e-02 -2.3570e-04  2.2562e-02  4.2635e-01         0.6699\nNGA009007  4.3270e-02 -7.0376e-04  1.0816e-01  1.3371e-01         0.8936\nNGA009008  1.9491e-01 -5.6729e-04  1.4571e-01  5.1209e-01         0.6086\nNGA009009  1.8432e-01 -4.1020e-04  1.0538e-01  5.6905e-01         0.5693\nNGA009010 -1.7375e-02 -8.3081e-05  2.1350e-02 -1.1834e-01         0.9058\nNGA009011 -5.7507e-03 -5.9134e-06  7.5690e-04 -2.0881e-01         0.8346\nNGA009012  9.3411e-03 -2.4905e-06  6.4005e-04  3.6932e-01         0.7119\nNGA009013  1.0924e-02 -1.2828e-06  1.6419e-04  8.5264e-01         0.3939\nNGA009014  1.3306e-02 -1.6171e-04  2.0696e-02  9.3617e-02         0.9254\nNGA009015  1.0441e-02 -4.2196e-07  2.9267e-05  1.9300e+00         0.0536\nNGA009016  4.2319e-02 -6.1086e-05  9.3943e-03  4.3725e-01         0.6619\nNGA009017 -3.1027e-01 -2.9325e-03  4.4968e-01 -4.5832e-01         0.6467\nNGA009018  1.2179e-01 -7.5809e-05  7.2580e-03  1.4304e+00         0.1526\nNGA010001  5.7500e-01 -8.7674e-04  1.6862e-01  1.4024e+00         0.1608\nNGA010002  4.9265e-01 -7.2558e-04  7.9444e-02  1.7504e+00         0.0800\nNGA010003  6.1574e-01 -8.7674e-04  1.3472e-01  1.6799e+00         0.0930\nNGA010004  6.2437e-01 -8.2477e-04  1.5864e-01  1.5697e+00         0.1165\nNGA010005  4.1193e-01 -7.0178e-04  1.3500e-01  1.1231e+00         0.2614\nNGA010006  4.6009e-01 -7.2558e-04  1.1151e-01  1.3799e+00         0.1676\nNGA010007  5.6074e-01 -8.7674e-04  1.3472e-01  1.5301e+00         0.1260\nNGA010008  4.9070e-01 -7.9938e-04  1.5376e-01  1.2534e+00         0.2100\nNGA010009  3.3679e-01 -5.2563e-04  1.0113e-01  1.0607e+00         0.2888\nNGA010010  3.9440e-01 -5.8871e-04  9.0489e-02  1.3131e+00         0.1892\nNGA010011  2.3902e-01 -1.8415e-04  1.7629e-02  1.8016e+00         0.0716\nNGA010012  3.4779e-01 -4.8557e-04  5.3178e-02  1.5103e+00         0.1310\nNGA010013  5.0043e-01 -8.5056e-04  9.3116e-02  1.6427e+00         0.1004\nNGA010014  3.4502e-01 -3.0906e-04  4.7519e-02  1.5842e+00         0.1132\nNGA010015  4.2792e-01 -6.3275e-04  6.9286e-02  1.6281e+00         0.1035\nNGA010016  5.3425e-01 -8.5056e-04  1.3070e-01  1.4801e+00         0.1388\nNGA010017  5.4039e-01 -7.7438e-04  1.4895e-01  1.4022e+00         0.1609\nNGA010018  5.2772e-01 -7.2558e-04  1.3957e-01  1.4145e+00         0.1572\nNGA010019  3.0538e-01 -2.6385e-04  2.0153e-02  2.1530e+00         0.0313\nNGA010020  5.2556e-01 -6.3275e-04  6.9286e-02  1.9991e+00         0.0456\nNGA010021  3.4988e-01 -5.6729e-04  1.0914e-01  1.0608e+00         0.2888\nNGA010022  5.1820e-01 -8.5056e-04  1.3070e-01  1.4357e+00         0.1511\nNGA010023  4.0573e-01 -7.2558e-04  6.1628e-02  1.6373e+00         0.1016\nNGA010024  3.8372e-01 -3.0906e-04  3.9547e-02  1.9311e+00         0.0535\nNGA010025  5.7296e-01 -8.7674e-04  1.3472e-01  1.5634e+00         0.1180\nNGA011001  1.7278e-01 -1.0446e-03  1.1434e-01  5.1406e-01         0.6072\nNGA011002  1.7232e-02 -2.6445e-05  4.0671e-03  2.7062e-01         0.7867\nNGA011003  2.6386e-01 -7.0178e-04  8.9763e-02  8.8304e-01         0.3772\nNGA011004  3.4479e-02 -2.2061e-05  3.3929e-03  5.9231e-01         0.5536\nNGA011005  1.5214e-01 -4.7951e-05  6.1373e-03  1.9426e+00         0.0521\nNGA011006  6.7844e-01 -1.3199e-03  2.5374e-01  1.3495e+00         0.1772\nNGA011007 -2.5002e-02 -1.1993e-06  1.5351e-04 -2.0179e+00         0.0436\nNGA011008  9.3699e-02 -3.7635e-04  4.8154e-02  4.2871e-01         0.6681\nNGA011009  3.8576e-01 -7.4978e-04  9.5899e-02  1.2481e+00         0.2120\nNGA011010 -1.5768e-01 -6.7631e-05  1.0401e-02 -1.5454e+00         0.1222\nNGA011011 -3.6127e-02 -1.0087e-04  1.2910e-02 -3.1707e-01         0.7512\nNGA011012  1.0538e-01 -3.7635e-04  7.2420e-02  3.9297e-01         0.6943\nNGA011013  3.2087e-01 -3.4349e-03  3.2775e-01  5.6647e-01         0.5711\nNGA012001  1.2435e-01 -2.3570e-04  1.6345e-02  9.7452e-01         0.3298\nNGA012002  1.8441e-01 -2.7853e-04  7.1561e-02  6.9039e-01         0.4899\nNGA012003  4.3991e-01 -7.4978e-04  1.4422e-01  1.1603e+00         0.2459\nNGA012004  4.1665e-01 -5.6729e-04  8.7198e-02  1.4129e+00         0.1577\nNGA012005  4.6989e-01 -7.0178e-04  5.9608e-02  1.9275e+00         0.0539\nNGA012006  3.5190e-01 -5.2563e-04  6.7245e-02  1.3591e+00         0.1741\nNGA012007  3.8529e-01 -5.2563e-04  8.0799e-02  1.3573e+00         0.1747\nNGA012008  3.2180e-01 -4.8557e-04  4.1252e-02  1.5868e+00         0.1126\nNGA012009  1.6530e-01 -1.0012e-04  1.0969e-02  1.5793e+00         0.1143\nNGA012010  4.3091e-01 -7.0178e-04  8.9763e-02  1.4406e+00         0.1497\nNGA012011  2.0987e-01 -2.3570e-04  2.5819e-02  1.3076e+00         0.1910\nNGA012012  1.8135e-01 -2.6385e-04  6.7792e-02  6.9751e-01         0.4855\nNGA012013  2.0824e-01 -1.2865e-04  8.1682e-03  2.3055e+00         0.0211\nNGA012014  1.2078e-01 -1.2865e-04  9.8277e-03  1.2196e+00         0.2226\nNGA012015  1.3521e-01 -1.2865e-04  1.9784e-02  9.6222e-01         0.3359\nNGA012016  2.0414e-01 -2.3570e-04  3.6242e-02  1.0736e+00         0.2830\nNGA012017  3.0165e-01 -6.5536e-04  1.0073e-01  9.5253e-01         0.3408\nNGA012018  2.1036e-01 -2.0913e-04  2.6763e-02  1.2872e+00         0.1980\nNGA013001 -2.2027e-02 -1.1292e-05  1.7366e-03 -5.2831e-01         0.5973\nNGA013002 -4.5947e-03 -8.4958e-06  8.1345e-04 -1.6080e-01         0.8723\nNGA013003 -3.0049e-01 -6.7837e-04  1.3050e-01 -8.2994e-01         0.4066\nNGA013004  2.1132e-03 -1.7757e-05  2.7310e-03  4.0777e-02         0.9675\nNGA013005  8.0453e-04 -4.2196e-07  4.6233e-05  1.1838e-01         0.9058\nNGA013006 -1.4218e-02 -3.9384e-04  3.7694e-02 -7.1205e-02         0.9432\nNGA013007 -9.8671e-02 -2.9360e-04  4.5141e-02 -4.6303e-01         0.6433\nNGA013008  2.1727e-01 -4.6613e-04  7.1657e-02  8.1341e-01         0.4160\nNGA013009  1.5340e-03 -4.1632e-08  6.4029e-06  6.0625e-01         0.5443\nNGA013010  9.1133e-02 -2.3570e-04  3.6242e-02  4.7995e-01         0.6313\nNGA013011  1.3527e-02 -5.9134e-06  6.4793e-04  5.3165e-01         0.5950\nNGA013012  2.1463e-01 -6.7837e-04  1.3050e-01  5.9602e-01         0.5512\nNGA013013  7.4880e-03 -1.0923e-04  1.0458e-02  7.4291e-02         0.9408\nNGA013014  8.6481e-02 -3.5785e-04  4.5787e-02  4.0583e-01         0.6849\nNGA013015  1.3598e-01 -3.9235e-04  5.0201e-02  6.0864e-01         0.5428\nNGA013016  7.1142e-02 -7.5158e-05  1.1558e-02  6.6243e-01         0.5077\nNGA014001  3.0170e-01 -5.2563e-04  8.0799e-02  1.0632e+00         0.2877\nNGA014002  4.4378e-01 -6.3275e-04  8.0939e-02  1.5621e+00         0.1183\nNGA014003  4.0354e-01 -5.6729e-04  8.7198e-02  1.3685e+00         0.1712\nNGA014004  3.5534e-01 -4.4709e-04  6.8731e-02  1.3571e+00         0.1748\nNGA014005  4.0737e-01 -7.0178e-04  1.3500e-01  1.1107e+00         0.2667\nNGA014006  5.3266e-01 -7.0178e-04  1.0786e-01  1.6241e+00         0.1044\nNGA014007  4.8493e-01 -6.1053e-04  9.3841e-02  1.5850e+00         0.1130\nNGA014008  3.7063e-01 -4.2845e-04  6.5866e-02  1.4458e+00         0.1482\nNGA014009  4.5115e-01 -5.8871e-04  9.0489e-02  1.5017e+00         0.1332\nNGA014010  3.5547e-01 -8.7674e-04  7.4456e-02  1.3059e+00         0.1916\nNGA014011  9.8230e-02 -2.2222e-04  1.6973e-02  7.5569e-01         0.4498\nNGA014012  4.0107e-01 -5.8871e-04  9.0489e-02  1.3352e+00         0.1818\nNGA014013  5.1155e-01 -6.3275e-04  8.0939e-02  1.8003e+00         0.0718\nNGA014014  5.4518e-01 -7.7438e-04  7.4088e-02  2.0058e+00         0.0449\nNGA014015  4.9407e-01 -7.4978e-04  1.1523e-01  1.4577e+00         0.1449\nNGA014016  3.8044e-01 -3.7490e-04  3.1854e-02  2.1337e+00         0.0329\nNGA014017  5.3876e-01 -8.5056e-04  8.1370e-02  1.8917e+00         0.0585\nNGA015001  4.2697e-02 -1.7226e-04  1.8871e-02  3.1207e-01         0.7550\nNGA015002 -1.1726e-02 -1.4484e-05  1.3868e-03 -3.1450e-01         0.7531\nNGA015003  5.7367e-03 -1.7757e-05  3.4182e-03  9.8426e-02         0.9216\nNGA015004  2.6718e-03 -4.2196e-07  5.4010e-05  3.6361e-01         0.7162\nNGA015005 -2.0317e-03 -1.1875e-04  1.8261e-02 -1.4156e-02         0.9887\nNGA015006 -7.2250e-02 -1.2951e-04  3.3279e-02 -3.9534e-01         0.6926\nNGA016001  2.0834e-01 -8.7896e-04  7.4644e-02  7.6579e-01         0.4438\nNGA016002  2.4856e-01 -1.1936e-03  1.1415e-01  7.3924e-01         0.4598\nNGA016003  3.7708e-01 -2.7978e-04  5.3842e-02  1.6263e+00         0.1039\nNGA016004 -2.3683e-02 -4.4709e-04  4.8966e-02 -1.0501e-01         0.9164\nNGA016005 -4.4322e-02 -1.4484e-05  2.2277e-03 -9.3876e-01         0.3479\nNGA016006 -1.5947e-01 -2.6385e-04  1.0182e-01 -4.9893e-01         0.6178\nNGA016007  1.2312e+00 -3.3828e-03  6.4899e-01  1.5325e+00         0.1254\nNGA016008  3.8042e-03 -1.7757e-05  2.2728e-03  8.0168e-02         0.9361\nNGA016009 -1.1086e-02 -1.2828e-06  2.4693e-04 -7.0542e-01         0.4805\nNGA016010  4.7222e-01 -8.2692e-04  1.2707e-01  1.3270e+00         0.1845\nNGA016011  4.2244e-02 -6.8032e-04  8.7021e-02  1.4551e-01         0.8843\nNGA017001  3.6697e-01 -4.4709e-04  4.8966e-02  1.6604e+00         0.0968\nNGA017002  3.8244e-01 -4.8557e-04  5.3178e-02  1.6605e+00         0.0968\nNGA017003  3.7633e-01 -4.2845e-04  6.5866e-02  1.4680e+00         0.1421\nNGA017004  4.0026e-01 -5.6729e-04  8.7198e-02  1.3574e+00         0.1747\nNGA017005  5.5204e-01 -7.2558e-04  6.9422e-02  2.0979e+00         0.0359\nNGA017006  5.5954e-01 -7.7438e-04  1.1901e-01  1.6242e+00         0.1043\nNGA017007  4.4128e-01 -6.7837e-04  1.0426e-01  1.3687e+00         0.1711\nNGA017008  4.3414e-01 -7.2558e-04  1.1151e-01  1.3023e+00         0.1928\nNGA017009  3.1377e-01 -2.4958e-04  2.7339e-02  1.8992e+00         0.0575\nNGA017010  5.1667e-01 -7.4978e-04  1.1523e-01  1.5243e+00         0.1274\nNGA017011  4.1589e-01 -5.8871e-04  5.6335e-02  1.7547e+00         0.0793\nNGA017012  2.6112e-01 -3.7490e-04  3.5883e-02  1.3805e+00         0.1674\nNGA017013  5.5832e-01 -8.5056e-04  1.3070e-01  1.5467e+00         0.1219\nNGA017014  4.9365e-01 -5.6729e-04  8.7198e-02  1.6737e+00         0.0942\nNGA017015  5.6033e-01 -8.5056e-04  1.3070e-01  1.5522e+00         0.1206\nNGA017016  3.9160e-01 -5.2563e-04  8.0799e-02  1.3795e+00         0.1677\nNGA017017  2.9835e-01 -5.2563e-04  5.0302e-02  1.3326e+00         0.1827\nNGA017018 -9.0485e-02 -3.6404e-05  3.9886e-03 -1.4322e+00         0.1521\nNGA017019  4.5970e-01 -5.8871e-04  5.6335e-02  1.9393e+00         0.0525\nNGA017020  4.3162e-01 -4.2845e-04  5.4817e-02  1.8453e+00         0.0650\nNGA017021  5.0836e-01 -7.0178e-04  8.9763e-02  1.6991e+00         0.0893\nNGA017022  5.3880e-01 -7.7438e-04  9.9042e-02  1.7145e+00         0.0864\nNGA017023  4.9298e-01 -7.2558e-04  1.3957e-01  1.3215e+00         0.1863\nNGA017024  3.2212e-01 -4.4709e-04  5.7201e-02  1.3487e+00         0.1774\nNGA017025  8.4471e-02 -4.1495e-05  5.3110e-03  1.1597e+00         0.2462\nNGA017026  2.1566e-01 -4.1020e-04  1.5827e-01  5.4313e-01         0.5870\nNGA017027  5.5124e-01 -8.7674e-04  1.1212e-01  1.6488e+00         0.0992\nNGA018001  1.6980e+01 -6.4392e-02  6.6011e+00  6.6340e+00         0.0000\nNGA018002  2.0886e+01 -8.3494e-02  1.1769e+01  6.1124e+00         0.0000\nNGA018003  1.8991e+01 -5.1539e-02  6.2569e+00  7.6129e+00         0.0000\nNGA018004  1.8331e+00 -1.2246e-03  1.1711e-01  5.3601e+00         0.0000\nNGA018005  1.6978e+00 -7.2071e-03  1.1004e+00  1.6253e+00         0.1041\nNGA018006  2.3768e+00 -1.5213e-03  1.4544e-01  6.2364e+00         0.0000\nNGA018007  1.5506e+01 -2.2751e-02  2.8459e+00  9.2051e+00         0.0000\nNGA018008  1.1903e+01 -1.4637e-02  1.3810e+00  1.0142e+01         0.0000\nNGA018009  5.7070e+00 -3.8654e-03  9.8955e-01  5.7410e+00         0.0000\nNGA018010  8.7606e+00 -1.3372e-02  1.4456e+00  7.2975e+00         0.0000\nNGA018011  6.2277e-01 -6.8032e-04  6.5095e-02  2.4436e+00         0.0145\nNGA018012  9.9999e-01 -1.0160e-03  1.2992e-01  2.7772e+00         0.0055\nNGA018013 -1.0057e+00 -6.7631e-05  1.7380e-02 -7.6281e+00         0.0000\nNGA018014  5.3645e+00 -5.1163e-03  6.5153e-01  6.6523e+00         0.0000\nNGA018015  7.2275e+00 -7.8250e-03  9.9375e-01  7.2581e+00         0.0000\nNGA018016  1.6881e+01 -3.2970e-02  3.0528e+00  9.6806e+00         0.0000\nNGA018017  5.1919e+00 -8.3865e-03  9.1120e-01  5.4478e+00         0.0000\nNGA018018  1.3664e+01 -1.8170e-02  2.2834e+00  9.0544e+00         0.0000\nNGA018019  6.5345e+00 -2.7996e-02  4.1852e+00  3.2078e+00         0.0013\nNGA018020  2.0590e+00 -5.6907e-04  8.7473e-02  6.9638e+00         0.0000\nNGA018021  1.0558e+01 -7.5129e-03  1.1468e+00  9.8663e+00         0.0000\nNGA018022  1.3339e+00 -1.1002e-04  1.6919e-02  1.0256e+01         0.0000\nNGA018023  3.4086e+00 -2.4257e-03  3.0973e-01  6.1290e+00         0.0000\nNGA018024  1.4700e+00 -1.6273e-03  2.4988e-01  2.9440e+00         0.0032\nNGA018025  1.6323e+01 -3.3132e-02  4.1004e+00  8.0772e+00         0.0000\nNGA018026  1.7179e+01 -5.2148e-02  6.3268e+00  6.8504e+00         0.0000\nNGA018027  1.7138e+00 -3.8654e-03  5.9219e-01  2.2321e+00         0.0256\nNGA019001 -6.1914e-02 -6.0501e-05  4.6219e-03 -9.0982e-01         0.3629\nNGA019002 -1.0845e-01 -3.5785e-04  3.4251e-02 -5.8404e-01         0.5592\nNGA019003  1.6350e-01 -6.1238e-04  5.2019e-02  7.1955e-01         0.4718\nNGA019004  1.6455e-01 -6.1086e-05  5.1918e-03  2.2845e+00         0.0223\nNGA019005  3.9472e-01 -1.3985e-04  1.7897e-02  2.9515e+00         0.0032\nNGA019006 -2.5401e-01 -6.0501e-05  9.3044e-03 -2.6327e+00         0.0085\nNGA019007  3.6559e-01 -4.3000e-04  4.7095e-02  1.6866e+00         0.0917\nNGA019008  4.3823e-01 -1.0160e-03  1.1121e-01  1.3171e+00         0.1878\nNGA019009  4.4318e-04 -4.7203e-07  1.2131e-04  4.0280e-02         0.9679\nNGA019010 -3.6467e-02 -1.8517e-04  4.7580e-02 -1.6633e-01         0.8679\nNGA019011  4.7094e-05 -2.1711e-05  2.3788e-03  1.4107e-03         0.9989\nNGA019012  2.6585e+00 -7.3592e-03  6.2091e-01  3.3831e+00         0.0007\nNGA019013  2.7974e-01 -3.1226e-05  6.0107e-03  3.6086e+00         0.0003\nNGA019014  7.1911e-01 -3.2628e-04  5.0165e-02  3.2121e+00         0.0013\nNGA019015  1.8721e+00 -4.9269e-03  6.2752e-01  2.3695e+00         0.0178\nNGA019016  2.0039e-01 -6.1086e-05  7.8184e-03  2.2670e+00         0.0234\nNGA019017  4.8601e-01 -3.4257e-04  5.2669e-02  2.1192e+00         0.0341\nNGA019018  4.5546e-01 -3.4257e-04  6.5922e-02  1.7752e+00         0.0759\nNGA019019  2.0111e+00 -4.1473e-03  7.9504e-01  2.2602e+00         0.0238\nNGA019020  3.2344e-02 -3.1226e-05  3.4213e-03  5.5350e-01         0.5799\nNGA019021  2.5838e+00 -7.5129e-03  7.1394e-01  3.0669e+00         0.0022\nNGA019022  3.0028e+00 -2.2886e-02  2.8623e+00  1.7884e+00         0.0737\nNGA019023  1.5087e+00 -1.8120e-03  3.4818e-01  2.5599e+00         0.0105\nNGA020001  1.3335e+00 -1.8887e-03  2.4129e-01  2.7186e+00         0.0066\nNGA020002  2.8307e+00 -5.1802e-03  7.9258e-01  3.1854e+00         0.0014\nNGA020003  9.4255e-01 -4.8026e-03  5.2369e-01  1.3091e+00         0.1905\nNGA020004  1.2232e-01 -3.6404e-05  5.5986e-03  1.6353e+00         0.1020\nNGA020005  5.6631e-01 -4.1172e-04  6.3296e-02  2.2526e+00         0.0243\nNGA020006  2.7720e-01 -3.4257e-04  3.7523e-02  1.4328e+00         0.1519\nNGA020007  3.8683e-01 -7.4358e-03  1.4207e+00  3.3077e-01         0.7408\nNGA020008  2.0995e+00 -5.4802e-04  8.4238e-02  7.2356e+00         0.0000\nNGA020009  4.9218e-01 -1.2877e-03  1.6461e-01  1.2163e+00         0.2239\nNGA020010  1.2394e+00 -1.7743e-03  2.2670e-01  2.6067e+00         0.0091\nNGA020011 -1.0298e-01 -3.0809e-05  4.7382e-03 -1.4957e+00         0.1347\nNGA020012 -2.0995e-01 -1.6076e-04  2.4721e-02 -1.3343e+00         0.1821\nNGA020013  1.6107e+00 -1.1936e-03  1.5259e-01  4.1263e+00         0.0000\nNGA020014  1.9578e-01 -2.6445e-05  2.8975e-03  3.6376e+00         0.0003\nNGA020015  2.7035e-01 -4.6775e-04  7.1906e-02  1.0099e+00         0.3125\nNGA020016  2.2125e+00 -4.4392e-03  8.5075e-01  2.4035e+00         0.0162\nNGA020017  1.2977e+00 -3.0298e-03  4.6456e-01  1.9084e+00         0.0563\nNGA020018  4.4496e-02 -2.2061e-05  2.8237e-03  8.3776e-01         0.4022\nNGA020019 -8.6794e-03 -1.1993e-06  1.5351e-04 -7.0043e-01         0.4837\nNGA020020 -2.7026e-01 -1.6076e-04  1.7612e-02 -2.0353e+00         0.0418\nNGA020021  7.5176e-02 -4.1020e-04  1.0538e-01  2.3285e-01         0.8159\nNGA020022 -1.6100e-02 -1.1993e-06  1.8445e-04 -1.1854e+00         0.2359\nNGA020023  3.0587e-01 -1.5562e-03  2.9911e-01  5.6212e-01         0.5740\nNGA020024  4.4065e-01 -2.7895e-03  3.0479e-01  8.0322e-01         0.4218\nNGA020025 -1.3097e-01 -1.1875e-04  9.0709e-03 -1.3739e+00         0.1695\nNGA020026  6.7656e-01 -1.0160e-03  1.2992e-01  1.8799e+00         0.0601\nNGA020027  2.1555e-01 -9.2120e-05  1.7731e-02  1.6194e+00         0.1054\nNGA020028  5.1783e-01 -1.6273e-03  1.3810e-01  1.3978e+00         0.1622\nNGA020029  5.9048e-01 -2.9488e-04  3.2300e-02  3.2871e+00         0.0010\nNGA020030  2.2814e+00 -3.8654e-03  4.2189e-01  3.5184e+00         0.0004\nNGA020031 -1.8053e-01 -2.2222e-04  2.8437e-02 -1.0692e+00         0.2850\nNGA020032  9.5698e-02 -4.1979e-05  6.4560e-03  1.1916e+00         0.2334\nNGA020033  3.9007e-01 -7.2760e-04  9.3064e-02  1.2810e+00         0.2002\nNGA020034  2.5375e-01 -4.4868e-04  4.9139e-02  1.1467e+00         0.2515\nNGA020035  1.1823e-01 -3.6404e-05  3.9886e-03  1.8726e+00         0.0611\nNGA020036  1.7135e+00 -3.7553e-03  7.2018e-01  2.0235e+00         0.0430\nNGA020037  3.5070e+00 -1.5959e-02  2.0102e+00  2.4848e+00         0.0130\nNGA020038 -3.4063e-02 -6.7631e-05  8.6560e-03 -3.6539e-01         0.7148\nNGA020039  5.4119e-01 -4.1172e-04  5.2678e-02  2.3597e+00         0.0183\nNGA020040  4.5860e-01 -4.1172e-04  5.2678e-02  1.9999e+00         0.0455\nNGA020041  1.9464e-01 -1.0087e-04  7.7055e-03  2.2184e+00         0.0265\nNGA020042  7.8531e-01 -1.5562e-03  1.3207e-01  2.1652e+00         0.0304\nNGA020043  5.5719e-01 -9.8781e-04  1.0813e-01  1.6975e+00         0.0896\nNGA020044  5.3048e-01 -3.1038e-04  3.3998e-02  2.8787e+00         0.0040\nNGA021001  1.5324e+00 -7.6681e-03  9.7398e-01  1.5605e+00         0.1187\nNGA021002  8.5861e-02 -2.6445e-05  2.8975e-03  1.5956e+00         0.1106\nNGA021003  3.1498e-01 -4.6775e-04  7.1906e-02  1.1764e+00         0.2394\nNGA021004  4.9109e+00 -2.5143e-03  3.8571e-01  7.9114e+00         0.0000\nNGA021005  1.0910e+00 -3.1287e-03  3.9921e-01  1.7317e+00         0.0833\nNGA021006  6.4627e-01 -8.7896e-04  1.1241e-01  1.9302e+00         0.0536\nNGA021007 -7.8713e-02 -2.1711e-05  2.3788e-03 -1.6134e+00         0.1067\nNGA021008 -6.2909e-02 -1.1041e-05  2.1254e-03 -1.3643e+00         0.1725\nNGA021009 -3.8668e-01 -2.6385e-04  3.3764e-02 -2.1029e+00         0.0355\nNGA021010 -4.7775e-02 -2.4958e-04  4.8031e-02 -2.1685e-01         0.8283\nNGA021011 -1.0464e-01 -8.3081e-05  1.0633e-02 -1.0139e+00         0.3106\nNGA021012  9.7113e-01 -2.2112e-03  2.8240e-01  1.8316e+00         0.0670\nNGA021013  9.2661e-01 -8.3865e-03  7.9625e-01  1.0478e+00         0.2947\nNGA021014  2.4780e-01 -7.5809e-05  1.1658e-02  2.2957e+00         0.0217\nNGA021015  1.2102e+00 -4.0333e-03  4.4015e-01  1.8302e+00         0.0672\nNGA021016 -7.3081e-02 -1.1041e-05  1.6981e-03 -1.7732e+00         0.0762\nNGA021017  4.2579e-01 -1.2246e-03  1.5655e-01  1.0792e+00         0.2805\nNGA021018  2.3237e-01 -4.6799e-03  5.9621e-01  3.0700e-01         0.7588\nNGA021019  3.4042e-01 -1.6171e-04  1.7716e-02  2.5588e+00         0.0105\nNGA021020  9.4824e-01 -2.0067e-03  1.9175e-01  2.1700e+00         0.0300\nNGA021021  3.3450e-01 -3.4257e-04  8.8011e-02  1.1287e+00         0.2590\nNGA021022  5.4426e-01 -6.1238e-04  9.4126e-02  1.7760e+00         0.0757\nNGA021023  1.1228e-01 -1.1292e-05  1.7366e-03  2.6945e+00         0.0070\nNGA021024 -9.7915e-02 -1.1328e-03  2.1782e-01 -2.0737e-01         0.8357\nNGA021025  1.0783e-01 -1.8074e-05  2.7797e-03  2.0456e+00         0.0408\nNGA021026  3.9604e-01 -3.4257e-04  4.3834e-02  1.8932e+00         0.0583\nNGA021027 -6.2241e-02 -1.7757e-05  2.7310e-03 -1.1907e+00         0.2338\nNGA021028  6.1042e-01 -7.2760e-04  1.3996e-01  1.6336e+00         0.1023\nNGA021029  2.9543e-01 -9.0558e-04  9.9134e-02  9.4118e-01         0.3466\nNGA021030 -2.2556e-01 -6.7631e-05  1.0401e-02 -2.2111e+00         0.0270\nNGA021031 -5.4703e-01 -7.2558e-04  1.3957e-01 -1.4623e+00         0.1437\nNGA021032 -6.7379e-02 -2.1711e-05  2.7789e-03 -1.2778e+00         0.2013\nNGA021033  5.4614e-01 -1.5213e-03  1.9443e-01  1.2420e+00         0.2142\nNGA021034  2.6177e-01 -9.2120e-05  1.7731e-02  1.9665e+00         0.0492\nNGA022001 -3.3968e-02 -3.0809e-05  5.9304e-03 -4.4069e-01         0.6594\nNGA022002  8.2292e-03 -8.2788e-06  9.0710e-04  2.7351e-01         0.7845\nNGA022003  4.4964e-03 -2.6445e-05  4.0671e-03  7.0920e-02         0.9435\nNGA022004  1.1016e-01 -1.8415e-04  2.0174e-02  7.7688e-01         0.4372\nNGA022005 -1.4796e-02 -2.4905e-06  3.8303e-04 -7.5588e-01         0.4497\nNGA022006  1.9300e-02 -4.8722e-04  6.2333e-02  7.9254e-02         0.9368\nNGA022007  5.7409e-02 -6.0501e-05  1.1646e-02  5.3254e-01         0.5944\nNGA022008  5.1389e-02 -6.0501e-05  1.1646e-02  4.7676e-01         0.6335\nNGA022009  4.9268e-02 -1.0012e-04  1.0969e-02  4.7137e-01         0.6374\nNGA022010  1.0569e-02 -8.4958e-06  1.6354e-03  2.6156e-01         0.7937\nNGA022011 -3.5625e-02 -9.2120e-05  1.1790e-02 -3.2725e-01         0.7435\nNGA022012  9.3049e-03 -5.9134e-06  7.5690e-04  3.3843e-01         0.7350\nNGA022013  1.3106e-01 -1.0923e-04  1.1967e-02  1.1991e+00         0.2305\nNGA022014  1.6957e-01 -6.5536e-04  1.0073e-01  5.3636e-01         0.5917\nNGA022015  2.0684e-02 -1.4201e-05  1.8176e-03  4.8549e-01         0.6273\nNGA022016  1.2954e-03 -8.4958e-06  1.6354e-03  3.2241e-02         0.9743\nNGA022017  1.2411e-01 -2.9360e-04  4.5141e-02  5.8551e-01         0.5582\nNGA022018  1.6979e-01 -6.3275e-04  8.0939e-02  5.9905e-01         0.5491\nNGA022019 -4.8958e-02 -3.9384e-04  4.3136e-02 -2.3383e-01         0.8151\nNGA022020  7.5898e-02 -5.2563e-04  6.7245e-02  2.9471e-01         0.7682\nNGA022021 -2.4116e-02 -1.7226e-04  2.6489e-02 -1.4712e-01         0.8830\nNGA023001  1.8090e-01 -2.3570e-04  3.6242e-02  9.5150e-01         0.3413\nNGA023002  2.1546e-01 -3.9235e-04  5.0201e-02  9.6340e-01         0.3353\nNGA023003  4.1872e-01 -5.8871e-04  6.4467e-02  1.6514e+00         0.0986\nNGA023004  7.3929e-02 -4.7433e-05  4.5414e-03  1.0977e+00         0.2723\nNGA023005  2.3731e-01 -2.0913e-04  4.0249e-02  1.1839e+00         0.2365\nNGA023006  4.8710e-01 -7.0178e-04  7.6839e-02  1.7598e+00         0.0784\nNGA023007  4.4614e-01 -5.8871e-04  1.5121e-01  1.1488e+00         0.2506\nNGA023008  4.3733e-01 -5.2563e-04  4.4654e-02  2.0721e+00         0.0383\nNGA023009 -1.5540e-03 -5.8324e-08  5.5844e-06 -6.5759e-01         0.5108\nNGA023010  7.2745e-02 -2.0913e-04  2.6763e-02  4.4595e-01         0.6556\nNGA023011  9.9519e-02 -3.0906e-04  4.7519e-02  4.5795e-01         0.6470\nNGA023012  5.4162e-02 -1.3896e-04  1.0615e-02  5.2705e-01         0.5982\nNGA023013  1.5527e-01 -2.6385e-04  6.7792e-02  5.9737e-01         0.5503\nNGA023014  3.8676e-01 -6.7837e-04  7.4278e-02  1.4216e+00         0.1551\nNGA023015  1.3598e-01 -3.9235e-04  1.5139e-01  3.5048e-01         0.7260\nNGA023016  2.3587e-01 -7.2558e-04  1.1151e-01  7.0851e-01         0.4786\nNGA023017  3.4676e-02 -5.9134e-06  9.0947e-04  1.1500e+00         0.2501\nNGA023018  4.1484e-01 -5.8871e-04  5.6335e-02  1.7503e+00         0.0801\nNGA023019  2.9632e-01 -7.7438e-04  9.9042e-02  9.4402e-01         0.3452\nNGA023020  3.2902e-02 -5.2563e-04  5.7563e-02  1.3933e-01         0.8892\nNGA023021 -2.5353e-01 -2.0913e-04  2.2910e-02 -1.6737e+00         0.0942\nNGA024001  1.1974e-01 -6.1086e-05  5.8485e-03  1.5666e+00         0.1172\nNGA024002 -1.8831e-02 -3.4257e-04  4.3834e-02 -8.8308e-02         0.9296\nNGA024003  6.0057e-01 -6.8032e-04  1.0456e-01  1.8594e+00         0.0630\nNGA024004 -6.4115e-02 -5.4320e-05  6.9524e-03 -7.6828e-01         0.4423\nNGA024005  1.1175e+00 -1.1774e-02  8.8892e-01  1.1978e+00         0.2310\nNGA024006  8.1251e-01 -1.7000e-03  3.2670e-01  1.4245e+00         0.1543\nNGA024007 -4.2301e-01 -2.0913e-04  4.0249e-02 -2.1075e+00         0.0351\nNGA024008 -5.6287e-02 -3.5953e-05  6.9207e-03 -6.7618e-01         0.4989\nNGA024009  3.9346e-01 -4.1172e-04  5.2678e-02  1.7161e+00         0.0861\nNGA024010  4.0353e-01 -1.3985e-04  3.5935e-02  2.1295e+00         0.0332\nNGA024011  4.5472e-02 -4.3000e-04  5.5016e-02  1.9570e-01         0.8448\nNGA024012  2.5096e-01 -1.9750e-04  1.8906e-02  1.8266e+00         0.0678\nNGA024013  1.2216e-01 -1.8074e-05  1.3971e-02  1.0337e+00         0.3013\nNGA024014  4.0729e-02 -1.4484e-05  1.5870e-03  1.0227e+00         0.3064\nNGA024015  7.5133e-01 -1.3854e-03  1.5159e-01  1.9333e+00         0.0532\nNGA024016 -1.7406e-01 -1.4867e-03  1.9002e-01 -3.9590e-01         0.6922\nNGA025001 -2.3705e-02 -9.1402e-05  2.3488e-02 -1.5408e-01         0.8775\nNGA025002  4.2262e-01 -7.9938e-04  2.0527e-01  9.3456e-01         0.3500\nNGA025003 -4.3853e-01 -2.4257e-03  2.6514e-01 -8.4694e-01         0.3970\nNGA025004  2.0205e-01 -4.6613e-04  4.4610e-02  9.5883e-01         0.3376\nNGA025005  4.4096e-01 -8.5056e-04  1.0878e-01  1.3396e+00         0.1804\nNGA025006  2.8899e-02 -5.3769e-05  1.3818e-02  2.4630e-01         0.8054\nNGA025007 -7.3315e-02 -9.2120e-05  8.8194e-03 -7.7970e-01         0.4356\nNGA025008  1.3934e-01 -5.4626e-04  5.2275e-02  6.1183e-01         0.5406\nNGA025009  5.8227e-03 -1.1993e-06  4.6293e-04  2.7068e-01         0.7866\nNGA025010 -5.1444e-02 -2.3570e-04  3.6242e-02 -2.6899e-01         0.7879\nNGA025011  1.6656e-01 -5.8871e-04  5.6335e-02  7.0424e-01         0.4813\nNGA025012 -3.1885e-01 -8.0150e-04  8.7749e-02 -1.0737e+00         0.2830\nNGA025013  1.2808e-01 -1.1875e-04  1.3009e-02  1.1240e+00         0.2610\nNGA025014  3.3011e-01 -3.4119e-04  6.5656e-02  1.2896e+00         0.1972\nNGA025015  1.8954e-01 -3.4119e-04  3.2657e-02  1.0507e+00         0.2934\nNGA025016  2.5132e-01 -3.5785e-04  4.5787e-02  1.1762e+00         0.2395\nNGA025017 -2.2973e-01 -5.6729e-04  1.0914e-01 -6.9367e-01         0.4879\nNGA025018  5.5741e-02 -2.4958e-04  3.8375e-02  2.8582e-01         0.7750\nNGA025019  3.2673e-01 -7.0178e-04  1.0786e-01  9.9701e-01         0.3188\nNGA025020  1.2834e-01 -5.3769e-05  5.8911e-03  1.6729e+00         0.0944\nNGA026001 -2.6914e-02 -1.2560e-03  2.4146e-01 -5.2216e-02         0.9584\nNGA026002 -3.6970e-02 -8.3081e-05  7.9542e-03 -4.1359e-01         0.6792\nNGA026003  3.2588e-02 -4.1495e-05  3.9729e-03  5.1767e-01         0.6047\nNGA026004  1.7603e-03 -1.5058e-04  1.4416e-02  1.5915e-02         0.9873\nNGA026005  1.5028e-01 -2.3570e-04  4.5361e-02  7.0669e-01         0.4798\nNGA026006 -5.8586e-03 -1.7757e-05  6.8541e-03 -7.0551e-02         0.9438\nNGA026007 -1.0710e-01 -7.5158e-05  7.1956e-03 -1.2617e+00         0.2071\nNGA026008 -7.6415e-02 -2.2533e-03  1.9109e-01 -1.6965e-01         0.8653\nNGA026009 -3.0015e-03 -4.1979e-05  3.5680e-03 -4.9547e-02         0.9605\nNGA026010  5.6726e-02 -1.8074e-05  3.4792e-03  9.6201e-01         0.3360\nNGA026011 -6.6156e-02 -4.2845e-04  8.2440e-02 -2.2892e-01         0.8189\nNGA026012  1.0030e-03 -4.1632e-08  5.3288e-06  4.3451e-01         0.6639\nNGA026013 -7.5051e-02 -2.6061e-05  4.0080e-03 -1.1851e+00         0.2360\nNGA027001 -3.2295e-02 -2.6445e-05  4.0671e-03 -5.0598e-01         0.6129\nNGA027002  8.3682e-03 -2.3737e-06  6.1002e-04  3.3891e-01         0.7347\nNGA027003  8.9025e-01 -3.9769e-03  1.5290e+00  7.2318e-01         0.4696\nNGA027004 -6.8599e-03 -3.1226e-05  2.6541e-03 -1.3255e-01         0.8945\nNGA027005 -3.9588e-02 -1.8517e-04  2.3697e-02 -2.5596e-01         0.7980\nNGA027006 -1.6596e-01 -2.4958e-04  1.9288e-01 -3.7733e-01         0.7059\nNGA027007  2.5360e-01 -5.0709e-04  7.7950e-02  9.1015e-01         0.3627\nNGA027008  1.5569e-01 -1.9750e-04  2.5274e-02  9.8056e-01         0.3268\nNGA027009  4.9140e-02 -4.7433e-05  5.1970e-03  6.8230e-01         0.4950\nNGA027010 -1.2974e-01 -3.9235e-04  5.0201e-02 -5.7728e-01         0.5637\nNGA027011  7.5913e-02 -7.5158e-05  1.9314e-02  5.4678e-01         0.5845\nNGA027012  3.0650e-02 -2.1711e-05  2.7789e-03  5.8185e-01         0.5607\nNGA027013  1.7168e-02 -1.7324e-04  3.3344e-02  9.4965e-02         0.9243\nNGA027014  2.9907e-02 -4.7433e-05  6.0711e-03  3.8443e-01         0.7007\nNGA027015  3.7780e-04 -2.1711e-05  1.8453e-03  9.3003e-03         0.9926\nNGA027016 -3.0289e-02 -5.0540e-04  4.8367e-02 -1.3543e-01         0.8923\nNGA027017  1.6140e-02 -6.0970e-06  3.5689e-04  8.5467e-01         0.3927\nNGA027018 -9.5097e-03 -4.1495e-05  7.9873e-03 -1.0594e-01         0.9156\nNGA027019 -5.7587e-03 -4.7433e-05  4.0315e-03 -8.9949e-02         0.9283\nNGA027020 -3.9106e-02 -7.5809e-05  1.1658e-02 -3.6148e-01         0.7177\nNGA027021 -1.4027e-03 -5.8324e-08  6.3905e-06 -5.5486e-01         0.5790\nNGA027022 -2.3423e-03 -2.4905e-06  2.7288e-04 -1.4164e-01         0.8874\nNGA027023  6.9604e-02 -2.6385e-04  5.0778e-02  3.1006e-01         0.7565\nNGA027024  8.0421e-02 -3.4119e-04  5.2456e-02  3.5262e-01         0.7244\nNGA027025  1.4580e-02 -1.8074e-05  1.9804e-03  3.2804e-01         0.7429\nNGA028001  3.0166e-01 -7.4978e-04  8.2092e-02  1.0555e+00         0.2912\nNGA028002 -1.1393e-01 -4.1979e-05  1.0788e-02 -1.0965e+00         0.2728\nNGA028003 -1.9405e-01 -8.7896e-04  9.6223e-02 -6.2274e-01         0.5335\nNGA028004  4.4753e-01 -6.1053e-04  9.3841e-02  1.4629e+00         0.1435\nNGA028005  1.6966e-01 -3.0906e-04  4.7519e-02  7.7973e-01         0.4355\nNGA028006  3.9633e-01 -5.2563e-04  8.0799e-02  1.3961e+00         0.1627\nNGA028007  1.4928e-01 -5.4626e-04  4.6406e-02  6.9550e-01         0.4867\nNGA028008  2.9979e-02 -7.2558e-04  6.1628e-02  1.2369e-01         0.9016\nNGA028009  1.9562e-01 -5.4626e-04  5.2275e-02  8.5796e-01         0.3909\nNGA028010  3.9147e-01 -6.5536e-04  1.6832e-01  9.5578e-01         0.3392\nNGA028011  1.1179e-01 -8.3081e-05  1.2777e-02  9.8976e-01         0.3223\nNGA028012  4.0054e-01 -7.0178e-04  1.3500e-01  1.0921e+00         0.2748\nNGA028013  2.5848e-02 -7.9938e-04  1.2284e-01  7.6029e-02         0.9394\nNGA028014  8.1514e-02 -4.4709e-04  8.6026e-02  2.7944e-01         0.7799\nNGA028015  2.9722e-01 -3.5785e-04  3.0405e-02  1.7066e+00         0.0879\nNGA028016  1.3015e-01 -4.8557e-04  5.3178e-02  5.6652e-01         0.5710\nNGA028017  9.7515e-02 -1.7226e-04  1.8871e-02  7.1111e-01         0.4770\nNGA028018  1.2741e-01 -1.2865e-04  1.9784e-02  9.0675e-01         0.3645\nNGA028019  3.7896e-01 -5.6729e-04  8.7198e-02  1.2853e+00         0.1987\nNGA028020  1.2726e-01 -5.0540e-04  6.4658e-02  5.0247e-01         0.6153\nNGA029001  2.0514e-02 -2.1022e-04  2.3029e-02  1.3657e-01         0.8914\nNGA029002  4.9170e-02 -3.5927e-04  6.9133e-02  1.8837e-01         0.8506\nNGA029003 -1.8648e-02 -3.5953e-05  6.9207e-03 -2.2373e-01         0.8230\nNGA029004 -5.0803e-02 -8.5274e-04  1.3104e-01 -1.3799e-01         0.8903\nNGA029005  1.1142e-01 -3.5785e-04  4.5787e-02  5.2239e-01         0.6014\nNGA029006  7.2499e-02 -8.3081e-05  2.1350e-02  4.9674e-01         0.6194\nNGA029007  1.9731e-01 -1.7226e-04  3.3154e-02  1.0846e+00         0.2781\nNGA029008  6.1302e-02 -7.5158e-05  5.7414e-03  8.1002e-01         0.4179\nNGA029009  1.3259e-02 -1.1041e-05  1.2098e-03  3.8152e-01         0.7028\nNGA029010  3.0975e-01 -5.0540e-04  7.7691e-02  1.1131e+00         0.2657\nNGA029011 -1.0388e-02 -1.7757e-05  1.7002e-03 -2.5150e-01         0.8014\nNGA029012  1.9522e-01 -2.9360e-04  3.7569e-02  1.0087e+00         0.3131\nNGA029013  1.3898e-01 -1.4966e-04  1.6396e-02  1.0866e+00         0.2772\nNGA029014  2.5245e-01 -4.2845e-04  8.2440e-02  8.8072e-01         0.3785\nNGA029015  7.7987e-02 -1.8415e-04  3.5443e-02  4.1522e-01         0.6780\nNGA029016  2.6110e-02 -2.1711e-05  2.7789e-03  4.9571e-01         0.6201\nNGA029017  4.7012e-02 -1.4966e-04  1.6396e-02  3.6831e-01         0.7126\nNGA029018 -6.1407e-02 -9.2120e-05  1.0093e-02 -6.1033e-01         0.5416\nNGA030001 -3.9673e-01 -3.1787e-03  2.6932e-01 -7.5834e-01         0.4482\nNGA030002  1.3365e-01 -4.7951e-05  5.2537e-03  1.8446e+00         0.0651\nNGA030003 -9.6672e-02 -1.1875e-04  2.2856e-02 -6.3866e-01         0.5230\nNGA030004  1.1971e-01 -1.5916e-03  1.1022e-01  3.6538e-01         0.7148\nNGA030005  1.7728e-03 -5.8324e-08  8.9701e-06  5.9195e-01         0.5539\nNGA030006  2.9956e-02 -2.2061e-05  2.8237e-03  5.6414e-01         0.5727\nNGA030007  3.8791e-01 -1.3199e-03  2.5374e-01  7.7269e-01         0.4397\nNGA030008  5.7255e-02 -4.0953e-06  4.4871e-04  2.7031e+00         0.0069\nNGA030009  4.3648e-02 -1.1292e-05  9.5975e-04  1.4093e+00         0.1588\nNGA030010 -2.2782e-01 -1.2660e-02  1.3696e+00 -1.8385e-01         0.8541\nNGA030011  1.7196e-02 -1.2828e-06  1.9729e-04  1.2244e+00         0.2208\nNGA030012 -7.7032e-02 -5.3769e-05  1.0350e-02 -7.5666e-01         0.4493\nNGA030013  2.3344e-02 -5.4320e-05  6.9524e-03  2.8062e-01         0.7790\nNGA030014  2.8934e-02 -3.6404e-05  5.5986e-03  3.8718e-01         0.6986\nNGA030015 -6.4342e-02 -2.7853e-04  3.5641e-02 -3.3934e-01         0.7344\nNGA030016 -1.0840e-01 -2.0913e-04  4.0249e-02 -5.3926e-01         0.5897\nNGA030017  7.4650e-02 -3.6404e-05  3.9886e-03  1.1826e+00         0.2370\nNGA030018 -1.0081e-01 -1.0923e-04  2.1025e-02 -6.9447e-01         0.4874\nNGA030019  3.2639e-03 -5.8324e-08  1.1227e-05  9.7411e-01         0.3300\nNGA030020  6.6090e-04 -4.2196e-07  8.1226e-05  7.3377e-02         0.9415\nNGA030021 -2.7093e-02 -5.3769e-05  8.2691e-03 -2.9735e-01         0.7662\nNGA030022 -1.2974e-02 -3.4119e-04  6.5656e-02 -4.9301e-02         0.9607\nNGA030023  8.3393e-03 -4.1979e-05  6.4560e-03  1.0431e-01         0.9169\nNGA030024  1.2884e-01 -3.9384e-04  3.3462e-02  7.0650e-01         0.4799\nNGA030025  1.4176e-01 -9.8781e-04  1.0813e-01  4.3412e-01         0.6642\nNGA030026  8.7435e-02 -1.4484e-05  2.7882e-03  1.6561e+00         0.0977\nNGA030027  1.0652e-02 -6.0970e-06  6.6804e-04  4.1236e-01         0.6801\nNGA030028 -2.7834e-02 -4.3000e-04  3.6533e-02 -1.4337e-01         0.8860\nNGA030029 -3.0115e-02 -2.4958e-04  6.4125e-02 -1.1794e-01         0.9061\nNGA030030  1.3775e-01 -1.0087e-04  1.2910e-02  1.2132e+00         0.2250\nNGA031001 -6.1395e-02 -4.7433e-05  4.5414e-03 -9.1034e-01         0.3626\nNGA031002  1.0258e-02 -1.1292e-05  1.4453e-03  2.7013e-01         0.7871\nNGA031003  1.4602e-01 -6.5536e-04  6.2708e-02  5.8572e-01         0.5581\nNGA031004  4.6560e-02 -1.9644e-04  3.0207e-02  2.6902e-01         0.7879\nNGA031005  2.1696e-01 -4.8557e-04  6.2122e-02  8.7241e-01         0.3830\nNGA031006  8.4002e-03 -4.1495e-05  5.3110e-03  1.1584e-01         0.9078\nNGA031007  1.9674e-01 -4.8557e-04  4.6470e-02  9.1493e-01         0.3602\nNGA031008 -1.5424e-01 -4.3000e-04  5.5016e-02 -6.5575e-01         0.5120\nNGA031009  2.5516e-01 -7.7438e-04  1.1901e-01  7.4190e-01         0.4582\nNGA031010  8.7089e-02 -1.8415e-04  2.8317e-02  5.1862e-01         0.6040\nNGA031011 -1.2504e-01 -1.1002e-04  1.6919e-02 -9.6045e-01         0.3368\nNGA031012  1.8075e-02 -1.3896e-04  2.1369e-02  1.2460e-01         0.9008\nNGA031013 -4.8362e-02 -1.5058e-04  2.3156e-02 -3.1682e-01         0.7514\nNGA031014 -5.7607e-02 -7.5809e-05  6.4431e-03 -7.1673e-01         0.4735\nNGA031015 -6.1322e-03 -6.0501e-05  1.1646e-02 -5.6263e-02         0.9551\nNGA031016 -4.6899e-02 -3.7490e-04  3.5883e-02 -2.4560e-01         0.8060\nNGA031017  3.7694e-02 -1.4966e-04  1.9154e-02  2.7344e-01         0.7845\nNGA031018 -1.6339e-01 -5.4802e-04  7.0106e-02 -6.1500e-01         0.5386\nNGA031019 -1.5526e-02 -5.4320e-05  1.3959e-02 -1.3095e-01         0.8958\nNGA031020 -5.1314e-03 -1.2828e-06  1.4055e-04 -4.3273e-01         0.6652\nNGA031021  6.4673e-02 -6.8032e-04  1.7472e-01  1.5635e-01         0.8758\nNGA031022 -3.0195e-01 -6.5536e-04  1.2607e-01 -8.4857e-01         0.3961\nNGA031023 -2.5763e-03 -4.1632e-08  5.3288e-06 -1.1160e+00         0.2644\nNGA031024 -3.5549e-02 -2.4958e-04  2.7339e-02 -2.1349e-01         0.8309\nNGA031025  3.0152e-01 -4.4709e-04  3.7985e-02  1.5494e+00         0.1213\nNGA031026  2.0236e-01 -5.4626e-04  5.9821e-02  8.2961e-01         0.4068\nNGA031027  1.0694e-01 -3.7490e-04  5.7638e-02  4.4702e-01         0.6549\nNGA031028 -1.6500e-01 -9.3260e-04  8.9211e-02 -5.4929e-01         0.5828\nNGA031029 -4.0382e-01 -7.4978e-04  9.5899e-02 -1.3016e+00         0.1931\nNGA031030 -6.0039e-02 -1.8074e-05  2.7797e-03 -1.1384e+00         0.2549\nNGA031031  3.3464e-02 -2.6061e-05  4.0080e-03  5.2900e-01         0.5968\nNGA031032  3.1286e-04 -3.9450e-06  1.0139e-03  9.9497e-03         0.9921\nNGA031033  3.1865e-02 -2.2061e-05  1.5302e-03  8.1517e-01         0.4150\nNGA032001  1.8765e-02 -3.6404e-05  4.6594e-03  2.7544e-01         0.7830\nNGA032002  2.3545e-02 -2.4905e-06  3.1878e-04  1.3188e+00         0.1872\nNGA032003  3.1319e-02 -6.0970e-06  7.8040e-04  1.1213e+00         0.2622\nNGA032004 -1.8816e-02 -3.9450e-06  5.0495e-04 -8.3717e-01         0.4025\nNGA032005  2.9875e-03 -4.0953e-06  7.8833e-04  1.0655e-01         0.9151\nNGA032006 -1.4255e-02 -1.0012e-04  1.5397e-02 -1.1408e-01         0.9092\nNGA032007  1.1654e-01 -5.4320e-05  5.9514e-03  1.5113e+00         0.1307\nNGA032008  1.0073e+00 -4.0901e-03  7.8412e-01  1.1422e+00         0.2534\nNGA032009  4.8258e-01 -1.6635e-03  1.8196e-01  1.1352e+00         0.2563\nNGA032010 -2.2012e-01 -4.8557e-04  9.3426e-02 -7.1857e-01         0.4724\nNGA032011  2.6956e-01 -7.0376e-04  9.0017e-02  9.0081e-01         0.3677\nNGA032012  3.1190e-01 -2.1022e-04  5.4014e-02  1.3429e+00         0.1793\nNGA032013  5.0661e-01 -5.4802e-04  5.2443e-02  2.2146e+00         0.0268\nNGA032014  2.5603e-01 -3.2628e-04  4.1750e-02  1.2546e+00         0.2096\nNGA032015  2.0068e-02 -2.4905e-06  2.7288e-04  1.2150e+00         0.2244\nNGA032016  1.2087e-01 -3.7635e-04  4.1221e-02  5.9717e-01         0.5504\nNGA032017  1.4515e-03 -4.7203e-07  7.2598e-05  1.7041e-01         0.8647\nNGA033001  3.7107e-01 -3.5785e-04  3.9195e-02  1.8761e+00         0.0606\nNGA033002  4.1609e-01 -6.1053e-04  1.1745e-01  1.2159e+00         0.2240\nNGA033003  4.0196e-01 -6.3275e-04  9.7253e-02  1.2910e+00         0.1967\nNGA033004  4.8189e-01 -6.7837e-04  1.7422e-01  1.1561e+00         0.2476\nNGA033005  5.4039e-01 -7.7438e-04  1.9886e-01  1.2135e+00         0.2249\nNGA033006  3.0073e-01 -2.0913e-04  8.0708e-02  1.0593e+00         0.2895\nNGA033007  5.8404e-01 -8.2477e-04  1.0548e-01  1.8008e+00         0.0717\nNGA033008  2.9681e-01 -6.5536e-04  6.2708e-02  1.1879e+00         0.2349\nNGA033009  3.2392e-01 -8.5056e-04  1.0878e-01  9.8472e-01         0.3248\nNGA033010  2.7675e-01 -7.9938e-04  7.6477e-02  1.0036e+00         0.3156\nNGA033011  2.5869e-01 -7.9938e-04  8.7517e-02  8.7714e-01         0.3804\nNGA033012  6.1574e-01 -8.7674e-04  1.6862e-01  1.5016e+00         0.1332\nNGA033013  1.3290e-01 -2.4958e-04  4.8031e-02  6.0755e-01         0.5435\nNGA033014  3.9904e-01 -3.9235e-04  3.3336e-02  2.1877e+00         0.0287\nNGA033015 -1.0385e-01 -4.7951e-05  5.2537e-03 -1.4321e+00         0.1521\nNGA033016  2.2909e-01 -2.2222e-04  1.8884e-02  1.6687e+00         0.0952\nNGA033017  6.5809e-01 -9.0333e-04  1.3880e-01  1.7688e+00         0.0769\nNGA033018  3.8465e-01 -6.3275e-04  9.7253e-02  1.2355e+00         0.2167\nNGA033019  3.7656e-01 -4.6613e-04  8.9688e-02  1.2589e+00         0.2080\nNGA033020  4.8603e-01 -7.2558e-04  1.3957e-01  1.3029e+00         0.1926\nNGA033021  3.6444e-01 -5.4626e-04  5.2275e-02  1.5963e+00         0.1104\nNGA033022 -2.0426e-01 -2.1022e-04  4.0458e-02 -1.0144e+00         0.3104\nNGA033023  5.9444e-01 -8.5056e-04  1.3070e-01  1.6466e+00         0.0996\nNGA034001  2.2733e-01 -4.4709e-04  6.8731e-02  8.6885e-01         0.3849\nNGA034002  5.6044e-02 -4.7433e-05  7.2948e-03  6.5673e-01         0.5114\nNGA034003  4.1213e-02 -4.1495e-05  4.5464e-03  6.1184e-01         0.5406\nNGA034004  1.0666e-01 -1.1875e-04  2.2856e-02  7.0633e-01         0.4800\nNGA034005  5.6508e-03 -4.2196e-07  5.4010e-05  7.6897e-01         0.4419\nNGA034006  1.6515e-01 -7.0178e-04  8.9763e-02  5.5356e-01         0.5799\nNGA034007  2.2247e-01 -4.6613e-04  8.9688e-02  7.4442e-01         0.4566\nNGA034008  4.5328e-02 -4.1495e-05  1.0664e-02  4.3935e-01         0.6604\nNGA034009  7.3294e-03 -7.5158e-05  9.6193e-03  7.5496e-02         0.9398\nNGA034010  9.0983e-02 -2.0913e-04  2.6763e-02  5.5743e-01         0.5772\nNGA034011 -1.9071e-03 -5.8324e-08  5.5844e-06 -8.0698e-01         0.4197\nNGA034012  1.6854e-02 -8.2788e-06  9.0710e-04  5.5986e-01         0.5756\nNGA034013  2.0308e-01 -2.9360e-04  7.5432e-02  7.4050e-01         0.4590\nNGA034014  6.2960e-02 -6.7631e-05  1.0401e-02  6.1801e-01         0.5366\nNGA034015  1.3009e-01 -1.1875e-04  2.2856e-02  8.6128e-01         0.3891\nNGA034016  1.1133e-01 -1.4966e-04  3.8457e-02  5.6848e-01         0.5697\nNGA034017  1.4078e-01 -7.7438e-04  1.4895e-01  3.6677e-01         0.7138\nNGA034018  1.3099e-02 -8.2788e-06  7.0368e-04  4.9411e-01         0.6212\nNGA034019  1.1660e-01 -2.4958e-04  3.1937e-02  6.5385e-01         0.5132\nNGA034020  4.0804e-02 -1.1875e-04  1.3009e-02  3.5879e-01         0.7198\nNGA034021  8.0298e-02 -6.0501e-05  5.1422e-03  1.1206e+00         0.2624\nNGA034022  4.7261e-02 -6.7631e-05  1.3018e-02  4.1481e-01         0.6783\nNGA034023  1.2515e-01 -3.7490e-04  4.7969e-02  5.7312e-01         0.5666\nNGA035001  1.9126e-01 -3.4257e-04  4.3834e-02  9.1514e-01         0.3601\nNGA035002 -3.1434e-02 -1.8502e-03  1.5697e-01 -7.4669e-02         0.9405\nNGA035003  4.2305e-02 -2.6445e-05  2.5320e-03  8.4125e-01         0.4002\nNGA035004 -1.5476e-03 -2.2061e-05  4.2466e-03 -2.3410e-02         0.9813\nNGA035005  1.4864e-01 -2.6507e-04  3.3920e-02  8.0848e-01         0.4188\nNGA035006 -1.8719e-02 -8.3081e-05  9.1024e-03 -1.9533e-01         0.8451\nNGA035007 -1.2383e-02 -1.1993e-06  3.0822e-04 -7.0529e-01         0.4806\nNGA035008 -1.8221e-02 -1.1041e-05  8.4352e-04 -6.2697e-01         0.5307\nNGA035009  4.2949e-02 -5.4320e-05  8.3538e-03  4.7050e-01         0.6380\nNGA035010 -2.0886e-02 -8.4958e-06  8.1345e-04 -7.3201e-01         0.4642\nNGA035011 -1.1094e-01 -5.6729e-04  2.1885e-01 -2.3594e-01         0.8135\nNGA035012 -1.3066e-02 -9.2120e-05  1.7731e-02 -9.7434e-02         0.9224\nNGA035013  4.9540e-02 -7.5809e-05  1.9481e-02  3.5548e-01         0.7222\nNGA035014 -7.4962e-02 -2.7978e-04  3.0647e-02 -4.2660e-01         0.6697\nNGA035015  1.5524e-01 -5.0709e-04  6.4873e-02  6.1147e-01         0.5409\nNGA035016 -2.5648e-02 -2.7978e-04  1.0796e-01 -7.7205e-02         0.9385\nNGA036001  1.3642e+00 -2.6501e-03  5.0878e-01  1.9162e+00         0.0553\nNGA036002 -2.6751e-02 -1.0087e-04  1.1051e-02 -2.5351e-01         0.7999\nNGA036003  2.4019e-01 -1.8415e-04  2.8317e-02  1.4284e+00         0.1532\nNGA036004  2.1148e-01 -4.8557e-04  4.1252e-02  1.0436e+00         0.2967\nNGA036005  1.0190e-01 -7.5158e-05  8.2344e-03  1.1238e+00         0.2611\nNGA036006  4.7683e-01 -9.0333e-04  1.1552e-01  1.4056e+00         0.1598\nNGA036007  4.3449e-01 -9.0333e-04  9.8888e-02  1.3846e+00         0.1662\nNGA036008  1.0061e-01 -8.5056e-04  9.3116e-02  3.3249e-01         0.7395\nNGA036009 -1.1220e-01 -1.1041e-05  1.0572e-03 -3.4504e+00         0.0006\nNGA036010  7.2654e-01 -2.2334e-04  3.4341e-02  3.9218e+00         0.0001\nNGA036011 -1.5476e+00 -3.0906e-04  4.7519e-02 -7.0983e+00         0.0000\nNGA036012 -9.5321e-02 -2.4958e-04  3.1937e-02 -5.3199e-01         0.5947\nNGA036013  7.5642e+00 -2.2217e-02  3.3410e+00  4.1505e+00         0.0000\nNGA036014  3.9764e-02 -1.1041e-05  2.8376e-03  7.4668e-01         0.4553\nNGA036015  1.7339e-01 -3.4119e-04  4.3657e-02  8.3149e-01         0.4057\nNGA036016  3.2454e-01 -7.4978e-04  1.4422e-01  8.5654e-01         0.3917\nNGA036017 -2.2605e-01 -1.2865e-04  1.9784e-02 -1.6062e+00         0.1082\nNGA037001  8.4247e-04 -5.8324e-08  8.9701e-06  2.8131e-01         0.7785\nNGA037002 -4.8417e-04 -3.9450e-06  5.0495e-04 -2.1371e-02         0.9829\nNGA037003 -9.5248e-02 -7.5158e-05  1.1558e-02 -8.8525e-01         0.3760\nNGA037004  4.6943e-05 -1.1993e-06  1.5351e-04  3.8856e-03         0.9969\nNGA037005 -3.8003e-02 -1.0012e-04  1.9271e-02 -2.7304e-01         0.7848\nNGA037006  2.9222e-02 -9.1402e-05  1.0014e-02  2.9293e-01         0.7696\nNGA037007  6.0156e-02 -3.6404e-05  3.0941e-03  1.0821e+00         0.2792\nNGA037008  4.5537e-03 -4.0953e-06  6.2984e-04  1.8161e-01         0.8559\nNGA037009 -7.4707e-03 -2.3737e-06  2.0175e-04 -5.2579e-01         0.5990\nNGA037010  2.7606e-02 -1.7324e-04  1.4723e-02  2.2894e-01         0.8189\nNGA037011  6.0691e-02 -1.6171e-04  4.1554e-02  2.9852e-01         0.7653\nNGA037012  4.4625e-02 -5.4802e-04  1.0543e-01  1.3912e-01         0.8894\nNGA037013  7.9112e-01 -7.7647e-04  1.9940e-01  1.7734e+00         0.0762\nNGA037014  1.4754e-01 -8.2692e-04  7.9110e-02  5.2751e-01         0.5978\n\n\n\n4.6.1.1 Mapping the local Moran’s I for Functional Waterpoints\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nf_wpt.localMI <- cbind(nga_wp,localMI_f_wpt) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.1.2 Mapping both local Moran’s I values and p-values for Functional Waterpoints\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualization.\n\nf_wpt_localMI.map <- tm_shape(f_wpt.localMI) +\n  tm_fill(col = \"Ii\",\n          breaks=c(-Inf, 0, 5, 10, 15, Inf),\n          title = \"Local Moran's I statistics\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I Statistics For Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\nf_wpt_pvalue.map <- tm_shape(f_wpt.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I P-values For Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\ntmap_arrange(f_wpt_localMI.map, f_wpt_pvalue.map, asp=1, ncol=2)\n\n\n\n\nIi > 0 indicates a grouping of similar values (higher or lower than average). Most areas have positive local moran’s I statistics with 1 region at the central northern side where there is high local moran’s I statistics.\nIi < 0 indicates a combination of dissimilar values (e.g. high values surrounded by low values). Approximate 1/3 of areas have negative local moran’s I statistics.\n\n\n\n4.6.2 Computing local Moran’s I for Non-functional Waterpoints\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of non-functional waterpoints at the county level.\n\nfips <- order(nga_wp$ADM2_CODE)\nlocalMI_nf_wpt <- localmoran(nga_wp$`wpt non-functional`, rswm_q)\nhead(localMI_nf_wpt)\n\n             Ii          E.Ii       Var.Ii         Z.Ii Pr(z != E(Ii))\n1 -0.3293461319 -1.006443e-03 0.1935434145 -0.746335642      0.4554647\n2 -0.0232170719 -2.046812e-05 0.0039399933 -0.369552942      0.7117156\n3  0.1049642343 -1.133492e-03 0.1449200709  0.278703106      0.7804727\n4  0.4133135297 -6.705952e-04 0.0641649070  1.634311750      0.1021934\n5 -0.0138498133 -1.701640e-06 0.0002178059 -0.938330308      0.3480747\n6  0.0004439503 -1.071807e-04 0.0164824028  0.004292839      0.9965748\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local Moran’s I statistics under the randomization hypothesis\nVar.Ii: the variance of local Moran’s I statistics under the randomization hypothesis\nZ.Ii:the standard deviate of local Moran’s I statistics\nPr(): the p-value of local Moran’s I statistics\n\nThe code chunk below list the content of the local Moran’s I statistics matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI_nf_wpt[fips,], \n  row.names=nga_wp$ADM2_CODE[fips]),\n  check.names=FALSE)\n\n                   Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nNGA001001 -3.2935e-01 -1.0064e-03  1.9354e-01 -7.4634e-01         0.4555\nNGA001002 -2.3217e-02 -2.0468e-05  3.9400e-03 -3.6955e-01         0.7117\nNGA001003  1.0496e-01 -1.1335e-03  1.4492e-01  2.7870e-01         0.7805\nNGA001004  4.1331e-01 -6.7060e-04  6.4165e-02  1.6343e+00         0.1022\nNGA001005 -1.3850e-02 -1.7016e-06  2.1781e-04 -9.3833e-01         0.3481\nNGA001006  4.4395e-04 -1.0718e-04  1.6482e-02  4.2928e-03         0.9966\nNGA001007 -2.8291e-02 -7.0727e-05  7.7489e-03 -3.2059e-01         0.7485\nNGA001008  4.2152e-01 -5.2815e-04  8.1186e-02  1.4812e+00         0.1385\nNGA001009 -2.8857e-01 -5.3569e-03  4.0706e-01 -4.4389e-01         0.6571\nNGA001010  2.2956e-01 -4.8444e-04  9.3209e-02  7.5349e-01         0.4512\nNGA001011  3.1481e-02 -4.8444e-04  4.6362e-02  1.4846e-01         0.8820\nNGA001012  4.2847e-02 -5.0881e-05  6.5124e-03  5.3157e-01         0.5950\nNGA001013  7.4725e-02 -2.8384e-04  3.1091e-02  4.2540e-01         0.6705\nNGA001014 -1.7501e-01 -2.2215e-04  2.8428e-02 -1.0367e+00         0.2999\nNGA001015  2.7869e-01 -5.7374e-04  6.2829e-02  1.1141e+00         0.2652\nNGA001016  6.5387e-03 -4.0757e-07  6.2683e-05  8.2594e-01         0.4088\nNGA001017  5.3833e-01 -6.2123e-04  6.8025e-02  2.0664e+00         0.0388\nNGA002001  8.3032e-01 -1.5599e-03  1.4913e-01  2.1542e+00         0.0312\nNGA002002  1.1277e+00 -1.6376e-03  2.0927e-01  2.4687e+00         0.0136\nNGA002003  5.2544e-01 -1.4102e-03  2.7109e-01  1.0119e+00         0.3116\nNGA002004  7.3618e-01 -6.7060e-04  1.2900e-01  2.0516e+00         0.0402\nNGA002005  1.0774e+00 -1.4102e-03  2.1659e-01  2.3182e+00         0.0204\nNGA002006  4.9426e-01 -1.0690e-03  1.3669e-01  1.3398e+00         0.1803\nNGA002007  1.0254e+00 -1.4841e-03  1.8969e-01  2.3577e+00         0.0184\nNGA002008  1.0591e+00 -1.2681e-03  3.2548e-01  1.8586e+00         0.0631\nNGA002009 -3.8550e-01 -1.4841e-03  2.2792e-01 -8.0436e-01         0.4212\nNGA002010  1.1732e+00 -1.6376e-03  3.1472e-01  2.0942e+00         0.0362\nNGA002011  1.0825e+00 -1.3382e-03  2.0554e-01  2.3906e+00         0.0168\nNGA002012  2.7510e-01 -1.4102e-03  1.1970e-01  7.9924e-01         0.4242\nNGA002013  1.0324e+00 -1.2681e-03  3.2548e-01  1.8118e+00         0.0700\nNGA002014  1.0995e+00 -1.4841e-03  2.2792e-01  2.3062e+00         0.0211\nNGA002015  1.1732e+00 -1.6376e-03  6.3108e-01  1.4789e+00         0.1392\nNGA002016  6.7194e-01 -1.4841e-03  2.2792e-01  1.4106e+00         0.1584\nNGA002017  9.8999e-01 -1.3382e-03  1.4643e-01  2.5906e+00         0.0096\nNGA002018  9.4720e-01 -1.1335e-03  1.2406e-01  2.6925e+00         0.0071\nNGA002019 -2.5699e-01 -1.5599e-03  4.0028e-01 -4.0373e-01         0.6864\nNGA002020  1.0537e+00 -1.2681e-03  1.9478e-01  2.3905e+00         0.0168\nNGA002021  1.0331e+00 -1.3382e-03  5.1586e-01  1.4403e+00         0.1498\nNGA003001  2.1255e-02 -2.0274e-04  2.5945e-02  1.3322e-01         0.8940\nNGA003002  1.3631e-01 -4.0269e-04  6.1908e-02  5.4944e-01         0.5827\nNGA003003  3.9264e-02 -1.0718e-04  1.6482e-02  3.0667e-01         0.7591\nNGA003004 -4.8331e-02 -2.2215e-04  2.8428e-02 -2.8533e-01         0.7754\nNGA003005 -7.1403e-03 -2.5916e-06  2.8396e-04 -4.2358e-01         0.6719\nNGA003006  9.2446e-03 -5.5331e-05  8.5093e-03  1.0082e-01         0.9197\nNGA003007 -3.0356e-02 -2.0274e-04  2.5945e-02 -1.8720e-01         0.8515\nNGA003008  1.6112e-01 -8.3003e-04  1.2755e-01  4.5347e-01         0.6502\nNGA003009 -2.3577e-02 -2.6184e-04  4.0260e-02 -1.1620e-01         0.9075\nNGA003010  1.5489e-02 -1.2824e-04  1.6412e-02  1.2191e-01         0.9030\nNGA003011 -9.9791e-03 -4.0757e-07  7.8456e-05 -1.1266e+00         0.2599\nNGA003012  3.3325e-02 -3.0202e-05  3.3091e-03  5.7984e-01         0.5620\nNGA003013  3.4856e-02 -3.0202e-05  4.6448e-03  5.1188e-01         0.6087\nNGA003014  6.9688e-03 -8.8010e-05  2.2616e-02  4.6924e-02         0.9626\nNGA003015  2.5381e-01 -7.7500e-04  9.9121e-02  8.0864e-01         0.4187\nNGA003016  2.5188e-02 -1.0545e-05  2.0299e-03  5.5930e-01         0.5760\nNGA003017  2.3144e-02 -2.6184e-04  5.0390e-02  1.0427e-01         0.9170\nNGA003018 -1.2506e-01 -8.6885e-04  1.1111e-01 -3.7256e-01         0.7095\nNGA003019 -4.4731e-03 -8.2374e-05  1.5855e-02 -3.4870e-02         0.9722\nNGA003020  3.7429e-02 -1.2824e-04  2.4683e-02  2.3905e-01         0.8111\nNGA003021 -1.9949e-02 -6.5684e-05  6.2887e-03 -2.5073e-01         0.8020\nNGA003022  1.0124e-02 -1.7798e-05  1.9501e-03  2.2967e-01         0.8183\nNGA003023  4.7687e-02 -5.0881e-05  5.5747e-03  6.3936e-01         0.5226\nNGA003024  2.0891e-02 -2.0468e-05  2.6198e-03  4.0855e-01         0.6829\nNGA003025 -3.8847e-01 -1.0690e-03  2.0557e-01 -8.5445e-01         0.3929\nNGA003026 -1.2279e-02 -3.7966e-05  4.8594e-03 -1.7560e-01         0.8606\nNGA003027  7.3522e-02 -7.0727e-05  1.8175e-02  5.4588e-01         0.5852\nNGA003028  6.4062e-02 -7.0727e-05  9.0523e-03  6.7406e-01         0.5003\nNGA003029 -1.1682e-02 -2.5916e-06  3.3172e-04 -6.4127e-01         0.5213\nNGA003030 -8.1119e-02 -2.2215e-04  3.4158e-02 -4.3771e-01         0.6616\nNGA003031 -1.4235e-02 -2.6938e-05  2.0580e-03 -3.1320e-01         0.7541\nNGA004001  8.1951e-01 -1.1335e-03  1.7413e-01  1.9666e+00         0.0492\nNGA004002  4.7303e-01 -4.8444e-04  6.1978e-02  1.9020e+00         0.0572\nNGA004003  5.7490e-01 -7.2185e-04  6.9066e-02  2.1903e+00         0.0285\nNGA004004  6.7029e-01 -6.7060e-04  7.3427e-02  2.4761e+00         0.0133\nNGA004005  7.9004e-01 -1.6376e-03  1.5654e-01  2.0009e+00         0.0454\nNGA004006  7.4367e-01 -1.0064e-03  1.5463e-01  1.8937e+00         0.0583\nNGA004007  5.3906e-01 -4.8444e-04  7.4470e-02  1.9771e+00         0.0480\nNGA004008  4.9284e-01 -4.8444e-04  7.4470e-02  1.8078e+00         0.0706\nNGA004009  8.4650e-01 -1.4102e-03  2.1659e-01  1.8219e+00         0.0685\nNGA004010  7.9795e-01 -1.3382e-03  1.4643e-01  2.0888e+00         0.0367\nNGA004011  9.1553e-01 -1.3382e-03  1.4643e-01  2.3960e+00         0.0166\nNGA004012  2.2497e-01 -1.2824e-04  1.6412e-02  1.7571e+00         0.0789\nNGA004013  6.6856e-01 -8.3003e-04  9.0870e-02  2.2206e+00         0.0264\nNGA004014  8.9156e-01 -9.4575e-04  2.4283e-01  1.8112e+00         0.0701\nNGA004015  9.1824e-01 -1.4841e-03  1.4189e-01  2.4416e+00         0.0146\nNGA004016  5.2843e-01 -8.3003e-04  6.3359e-02  2.1026e+00         0.0355\nNGA004017  8.4859e-01 -1.4841e-03  1.6237e-01  2.1096e+00         0.0349\nNGA004018  9.7718e-01 -1.5599e-03  4.0028e-01  1.5470e+00         0.1219\nNGA004019  6.5374e-01 -8.3003e-04  1.2755e-01  1.8328e+00         0.0668\nNGA004020  6.0526e-01 -7.7500e-04  9.9121e-02  1.9249e+00         0.0542\nNGA004021  4.1581e-01 -2.9422e-04  3.7649e-02  2.1445e+00         0.0320\nNGA005001 -3.5289e-01 -1.7602e-04  1.6850e-02 -2.7172e+00         0.0066\nNGA005002  9.8900e-02 -8.8010e-05  1.3535e-02  8.5087e-01         0.3948\nNGA005003 -4.0563e-01 -3.2849e-04  6.3213e-02 -1.6121e+00         0.1070\nNGA005004 -2.3561e-02 -1.2622e-05  1.6156e-03 -5.8586e-01         0.5580\nNGA005005  8.1410e-03 -1.0545e-05  1.1554e-03  2.3981e-01         0.8105\nNGA005006  2.1718e-01 -4.8444e-04  1.8690e-01  5.0347e-01         0.6146\nNGA005007 -7.0877e-01 -1.0274e-02  1.3016e+00 -6.1225e-01         0.5404\nNGA005008  1.5190e-02 -6.7060e-04  6.4165e-02  6.2616e-02         0.9501\nNGA005009  1.9074e-03 -2.6184e-04  5.0390e-02  9.6636e-03         0.9923\nNGA005010 -2.4560e-02 -1.2622e-05  1.2085e-03 -7.0612e-01         0.4801\nNGA005011 -3.7532e-02 -2.6184e-04  5.0390e-02 -1.6603e-01         0.8681\nNGA005012  1.2075e-02 -1.7016e-06  1.8645e-04  8.8443e-01         0.3765\nNGA005013 -7.4983e-02 -1.2622e-05  1.9412e-03 -1.7016e+00         0.0888\nNGA005014 -1.9622e-02 -1.0545e-05  1.6218e-03 -4.8698e-01         0.6263\nNGA005015 -9.8222e-02 -5.7374e-04  5.4903e-02 -4.1674e-01         0.6769\nNGA005016 -1.7273e-01 -3.5308e-04  5.4284e-02 -7.3984e-01         0.4594\nNGA005017 -8.9226e-02 -1.5118e-04  1.2848e-02 -7.8583e-01         0.4320\nNGA005018  5.1312e-02 -1.7602e-04  1.3445e-02  4.4405e-01         0.6570\nNGA005019  1.2080e-01 -4.1823e-05  8.0505e-03  1.3468e+00         0.1780\nNGA005020  2.8626e-02 -5.1798e-06  5.6754e-04  1.2018e+00         0.2294\nNGA006001  3.4874e-01 -3.2849e-04  5.0505e-02  1.5533e+00         0.1204\nNGA006002  2.1354e-01 -1.5118e-04  2.9098e-02  1.2527e+00         0.2103\nNGA006003  4.1440e-01 -1.5599e-03  4.0028e-01  6.5746e-01         0.5109\nNGA006004  3.6120e-01 -6.2123e-04  1.5955e-01  9.0582e-01         0.3650\nNGA006005  4.3451e-01 -4.8444e-04  6.1978e-02  1.7473e+00         0.0806\nNGA006006 -2.3687e-02 -1.7016e-06  1.4464e-04 -1.9694e+00         0.0489\nNGA006007  2.5241e-01 -2.6184e-04  2.8682e-02  1.4920e+00         0.1357\nNGA006008  4.8209e-01 -6.7060e-04  8.5777e-02  1.6484e+00         0.0993\nNGA007001 -1.3939e-02 -1.2622e-05  1.0728e-03 -4.2519e-01         0.6707\nNGA007002 -1.8498e-02 -1.4377e-04  2.2108e-02 -1.2344e-01         0.9018\nNGA007003  8.3064e-02 -2.9422e-04  4.5237e-02  3.9192e-01         0.6951\nNGA007004  4.4595e-01 -1.2464e-03  1.5934e-01  1.1203e+00         0.2626\nNGA007005  7.2823e-01 -8.6885e-04  1.3351e-01  1.9954e+00         0.0460\nNGA007006  1.8573e-01 -3.1751e-04  2.6979e-02  1.1327e+00         0.2574\nNGA007007  1.3062e-01 -1.3874e-03  1.1776e-01  3.8469e-01         0.7005\nNGA007008 -8.5829e-02 -8.8694e-04  1.1343e-01 -2.5221e-01         0.8009\nNGA007009  2.0526e-01 -6.5684e-05  7.1964e-03  2.4204e+00         0.0155\nNGA007010  1.0871e+00 -2.0267e-03  2.2162e-01  2.3136e+00         0.0207\nNGA007011  7.5043e-01 -7.5809e-04  9.6960e-02  2.4124e+00         0.0158\nNGA007012  7.7282e-03 -1.1091e-07  1.7057e-05  1.8712e+00         0.0613\nNGA007013 -1.9564e-02 -1.2622e-05  2.4297e-03 -3.9665e-01         0.6916\nNGA007014 -1.4901e-02 -1.2622e-05  2.4297e-03 -3.0205e-01         0.7626\nNGA007015  1.5800e-01 -8.8010e-05  1.3535e-02  1.3589e+00         0.1742\nNGA007016  4.6837e-02 -4.1823e-05  8.0505e-03  5.2248e-01         0.6013\nNGA007017 -3.9058e-02 -6.6631e-06  8.5285e-04 -1.3372e+00         0.1812\nNGA007018  8.1162e-02 -1.7602e-04  2.2526e-02  5.4194e-01         0.5879\nNGA007019  2.8369e-02 -8.8010e-05  8.4260e-03  3.1001e-01         0.7566\nNGA007020 -5.9707e-02 -6.6631e-06  1.2826e-03 -1.6670e+00         0.0955\nNGA007021  5.9672e-01 -6.5487e-04  1.2598e-01  1.6831e+00         0.0924\nNGA007022  9.5129e-01 -2.0267e-03  2.5889e-01  1.8736e+00         0.0610\nNGA007023  5.9105e-01 -3.5308e-04  5.4284e-02  2.5384e+00         0.0111\nNGA008001  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008002  9.8868e-01 -1.1335e-03  1.0841e-01  3.0062e+00         0.0026\nNGA008003  1.2642e+00 -1.6376e-03  2.5145e-01  2.5244e+00         0.0116\nNGA008004  1.8145e-01 -4.0269e-04  6.1908e-02  7.3089e-01         0.4648\nNGA008005  1.0895e+00 -1.5599e-03  1.4913e-01  2.8253e+00         0.0047\nNGA008006  9.5606e-01 -1.0690e-03  2.7444e-01  1.8270e+00         0.0677\nNGA008007  1.2035e+00 -1.6376e-03  1.5654e-01  3.0461e+00         0.0023\nNGA008008  1.2642e+00 -1.6376e-03  2.0927e-01  2.7672e+00         0.0057\nNGA008009  1.2521e+00 -1.6376e-03  2.5145e-01  2.5002e+00         0.0124\nNGA008010  1.2642e+00 -1.6376e-03  2.0927e-01  2.7672e+00         0.0057\nNGA008011  1.2642e+00 -1.6376e-03  3.1472e-01  2.2565e+00         0.0240\nNGA008012  1.0673e+00 -1.4841e-03  1.6237e-01  2.6524e+00         0.0080\nNGA008013  3.8214e-01 -1.7602e-04  3.3877e-02  2.0772e+00         0.0378\nNGA008014  1.2339e+00 -1.6376e-03  2.5145e-01  2.4639e+00         0.0137\nNGA008015  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008016  1.1337e+00 -1.6376e-03  1.2491e-01  3.2126e+00         0.0013\nNGA008017  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008018  1.0518e+00 -1.6376e-03  3.1472e-01  1.8778e+00         0.0604\nNGA008019  1.1428e+00 -1.6376e-03  1.7914e-01  2.7040e+00         0.0069\nNGA008020  1.1705e+00 -1.4841e-03  1.6237e-01  2.9085e+00         0.0036\nNGA008021  5.7742e-01 -7.7500e-04  2.9892e-01  1.0575e+00         0.2903\nNGA008022  1.2642e+00 -1.6376e-03  3.1472e-01  2.2565e+00         0.0240\nNGA008023  1.2642e+00 -1.6376e-03  2.5145e-01  2.5244e+00         0.0116\nNGA008024  1.2642e+00 -1.6376e-03  2.5145e-01  2.5244e+00         0.0116\nNGA008025  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008026  1.1342e+00 -1.6376e-03  1.7914e-01  2.6836e+00         0.0073\nNGA008027 -5.4859e-03 -1.3382e-03  1.4643e-01 -1.0839e-02         0.9914\nNGA009001  3.4495e-01 -1.2142e-04  1.8671e-02  2.5253e+00         0.0116\nNGA009002  9.7874e-02 -5.1798e-06  5.6754e-04  4.1086e+00         0.0000\nNGA009003  6.9581e-01 -8.0471e-03  1.5366e+00  5.6782e-01         0.5702\nNGA009005  1.1040e+00 -8.6885e-04  1.3351e-01  3.0239e+00         0.0025\nNGA009006  1.7709e-01 -2.2215e-04  2.1265e-02  1.2159e+00         0.2240\nNGA009007  2.2586e+00 -3.7864e-03  5.8014e-01  2.9703e+00         0.0030\nNGA009008 -3.3074e-01 -8.8010e-05  2.2616e-02 -2.1987e+00         0.0279\nNGA009009 -2.1071e-02 -4.0757e-07  1.0474e-04 -2.0588e+00         0.0395\nNGA009010  1.1785e+00 -1.9402e-03  4.9766e-01  1.6733e+00         0.0943\nNGA009011  1.5063e+00 -1.6130e-03  2.0613e-01  3.3212e+00         0.0009\nNGA009012  1.3605e+00 -1.3160e-03  3.3776e-01  2.3433e+00         0.0191\nNGA009013  1.9463e+00 -3.7864e-03  4.8282e-01  2.8065e+00         0.0050\nNGA009014  1.7077e+00 -3.2122e-03  4.0984e-01  2.6725e+00         0.0075\nNGA009015  9.4023e-02 -2.2976e-03  1.5900e-01  2.4156e-01         0.8091\nNGA009016  2.3319e+00 -3.6678e-03  5.6203e-01  3.1154e+00         0.0018\nNGA009017  1.2470e+00 -8.3994e-03  1.2810e+00  1.1092e+00         0.2673\nNGA009018  1.5848e+00 -3.7864e-03  3.6117e-01  2.6434e+00         0.0082\nNGA010001  9.1888e-01 -1.2681e-03  2.4380e-01  1.8636e+00         0.0624\nNGA010002  7.3525e-01 -1.3382e-03  1.4643e-01  1.9249e+00         0.0542\nNGA010003  6.0993e-01 -1.4102e-03  2.1659e-01  1.3136e+00         0.1890\nNGA010004  8.0003e-01 -1.4102e-03  2.7109e-01  1.5393e+00         0.1237\nNGA010005  2.3992e-01 -7.2185e-04  1.3885e-01  6.4579e-01         0.5184\nNGA010006  2.6689e-01 -5.7374e-04  8.8190e-02  9.0064e-01         0.3678\nNGA010007  6.7548e-01 -1.6376e-03  2.5145e-01  1.3503e+00         0.1769\nNGA010008  4.3345e-01 -8.8694e-04  1.7058e-01  1.0516e+00         0.2930\nNGA010009  1.7289e-01 -2.3134e-04  4.4523e-02  8.2048e-01         0.4119\nNGA010010  2.3883e-01 -5.2815e-04  8.1186e-02  8.4005e-01         0.4009\nNGA010011 -2.1676e-02 -1.7016e-06  1.6293e-04 -1.6980e+00         0.0895\nNGA010012  1.3304e-01 -1.7602e-04  1.9283e-02  9.5936e-01         0.3374\nNGA010013  5.4022e-01 -1.2681e-03  1.3877e-01  1.4536e+00         0.1461\nNGA010014  8.1873e-01 -1.2681e-03  1.9478e-01  1.8580e+00         0.0632\nNGA010015  6.5004e-01 -8.3003e-04  9.0870e-02  2.1592e+00         0.0308\nNGA010016  5.1794e-01 -9.4575e-04  1.4532e-01  1.3612e+00         0.1735\nNGA010017  5.3906e-01 -1.0064e-03  1.9354e-01  1.2276e+00         0.2196\nNGA010018  7.7187e-01 -1.4102e-03  2.7109e-01  1.4852e+00         0.1375\nNGA010019  3.5311e-01 -5.7374e-04  4.3808e-02  1.6898e+00         0.0911\nNGA010020  6.7306e-01 -6.7060e-04  7.3427e-02  2.4863e+00         0.0129\nNGA010021  1.5281e-02 -2.5916e-06  4.9888e-04  6.8428e-01         0.4938\nNGA010022  7.0336e-01 -1.1335e-03  1.7413e-01  1.6883e+00         0.0914\nNGA010023  1.5899e-01 -2.6184e-04  2.2250e-02  1.0676e+00         0.2857\nNGA010024  2.9960e-01 -1.5118e-04  1.9348e-02  2.1550e+00         0.0312\nNGA010025  6.9249e-01 -1.1998e-03  1.8431e-01  1.6158e+00         0.1061\nNGA011001  6.9618e-01 -2.6852e-03  2.9343e-01  1.2902e+00         0.1970\nNGA011002  5.2273e-01 -1.2464e-03  1.9146e-01  1.1975e+00         0.2311\nNGA011003  9.3140e-03 -8.8010e-05  1.1264e-02  8.8588e-02         0.9294\nNGA011004  4.9109e-02 -1.2142e-04  1.8671e-02  3.6029e-01         0.7186\nNGA011005 -4.2011e-01 -2.0274e-04  2.5945e-02 -2.6069e+00         0.0091\nNGA011006  4.3098e-01 -5.1421e-04  9.8933e-02  1.3718e+00         0.1701\nNGA011007 -6.2389e-02 -2.5916e-06  3.3172e-04 -3.4253e+00         0.0006\nNGA011008  2.4465e-01 -4.5377e-03  5.7818e-01  3.2772e-01         0.7431\nNGA011009  3.6921e-01 -7.2185e-04  9.2329e-02  1.2175e+00         0.2234\nNGA011010 -3.4861e-01 -3.6465e-04  5.6062e-02 -1.4708e+00         0.1413\nNGA011011 -2.3044e-02 -2.8384e-04  3.6320e-02 -1.1943e-01         0.9049\nNGA011012  1.6293e-01 -1.9413e-04  3.7363e-02  8.4393e-01         0.3987\nNGA011013  6.3718e-01 -3.9069e-03  3.7262e-01  1.0502e+00         0.2936\nNGA012001  4.0136e-03 -1.1091e-07  7.6928e-06  1.4471e+00         0.1479\nNGA012002  8.5977e-02 -1.5118e-04  3.8848e-02  4.3698e-01         0.6621\nNGA012003  3.0226e-01 -4.4262e-04  8.5167e-02  1.0372e+00         0.2996\nNGA012004  2.7859e-01 -4.4262e-04  6.8045e-02  1.0697e+00         0.2848\nNGA012005  3.3645e-01 -4.4262e-04  3.7605e-02  1.7373e+00         0.0823\nNGA012006  2.2437e-01 -5.7374e-04  7.3396e-02  8.3032e-01         0.4064\nNGA012007  2.0350e-01 -2.0274e-04  3.1174e-02  1.1537e+00         0.2486\nNGA012008  1.1616e-01 -3.2849e-04  2.7912e-02  6.9726e-01         0.4856\nNGA012009  2.0692e-01 -2.9422e-04  3.2228e-02  1.1543e+00         0.2484\nNGA012010  1.1979e-01 -1.5118e-04  1.9348e-02  8.6226e-01         0.3885\nNGA012011  2.5350e-02 -1.2622e-05  1.3830e-03  6.8200e-01         0.4952\nNGA012012  9.2443e-02 -2.0274e-04  5.2092e-02  4.0592e-01         0.6848\nNGA012013 -2.2624e-01 -2.2215e-04  1.4103e-02 -1.9033e+00         0.0570\nNGA012014 -3.1961e-02 -8.8010e-05  6.7232e-03 -3.8872e-01         0.6975\nNGA012015 -2.6129e-02 -7.0727e-05  1.0877e-02 -2.4986e-01         0.8027\nNGA012016 -6.3085e-03 -1.2824e-04  1.9720e-02 -4.4010e-02         0.9649\nNGA012017 -4.1438e-03 -5.5331e-05  8.5093e-03 -4.4322e-02         0.9646\nNGA012018  1.9069e-02 -1.2622e-05  1.6156e-03  4.7475e-01         0.6350\nNGA013001  5.4637e-02 -7.0554e-04  1.0843e-01  1.6807e-01         0.8665\nNGA013002  2.3176e-01 -2.8384e-04  2.7169e-02  1.4078e+00         0.1592\nNGA013003 -5.7363e-01 -2.9422e-04  5.6620e-02 -2.4095e+00         0.0160\nNGA013004 -1.0684e+00 -1.3382e-03  2.0554e-01 -2.3536e+00         0.0186\nNGA013005  5.5315e-01 -1.0491e-03  1.1483e-01  1.6354e+00         0.1020\nNGA013006  7.2281e-01 -1.5359e-03  1.4683e-01  1.8903e+00         0.0587\nNGA013007 -7.2534e-01 -4.8444e-04  7.4470e-02 -2.6562e+00         0.0079\nNGA013008 -3.8704e-01 -1.4102e-03  2.1659e-01 -8.2862e-01         0.4073\nNGA013009 -6.2999e-02 -3.3233e-03  5.0942e-01 -8.3610e-02         0.9334\nNGA013010  9.8400e-02 -1.4377e-04  2.2108e-02  6.6275e-01         0.5075\nNGA013011  3.0268e-01 -6.5487e-04  7.1707e-02  1.1328e+00         0.2573\nNGA013012 -2.8330e-01 -3.2849e-04  6.3213e-02 -1.1255e+00         0.2604\nNGA013013 -1.5432e-01 -7.0727e-05  6.7715e-03 -1.8745e+00         0.0609\nNGA013014 -3.4585e-01 -1.5599e-03  1.9936e-01 -7.7109e-01         0.4407\nNGA013015  1.1326e-01 -3.7966e-05  4.8594e-03  1.6252e+00         0.1041\nNGA013016  2.0211e-01 -8.6885e-04  1.3351e-01  5.5551e-01         0.5785\nNGA014001  6.2085e-01 -1.6376e-03  2.5145e-01  1.2414e+00         0.2145\nNGA014002  6.9451e-01 -1.0690e-03  1.3669e-01  1.8814e+00         0.0599\nNGA014003  7.3133e-01 -1.3382e-03  2.0554e-01  1.6161e+00         0.1061\nNGA014004  9.0214e-01 -1.5599e-03  2.3954e-01  1.8464e+00         0.0648\nNGA014005  8.4883e-01 -1.5599e-03  2.9982e-01  1.5531e+00         0.1204\nNGA014006  7.5780e-01 -9.4575e-04  1.4532e-01  1.9904e+00         0.0465\nNGA014007  6.0621e-01 -8.3003e-04  1.2755e-01  1.6997e+00         0.0892\nNGA014008  6.8879e-01 -1.4102e-03  2.1659e-01  1.4831e+00         0.1381\nNGA014009  8.0266e-01 -1.3382e-03  2.0554e-01  1.7734e+00         0.0762\nNGA014010 -1.4230e-02 -1.7016e-06  1.4464e-04 -1.1831e+00         0.2368\nNGA014011  1.2270e-01 -1.0064e-03  7.6813e-02  4.4635e-01         0.6553\nNGA014012  2.5228e-01 -8.8010e-05  1.3535e-02  2.1692e+00         0.0301\nNGA014013  6.3422e-01 -1.0064e-03  1.2869e-01  1.7707e+00         0.0766\nNGA014014  6.6615e-01 -7.7500e-04  7.4147e-02  2.4492e+00         0.0143\nNGA014015  6.9480e-01 -1.5599e-03  2.3954e-01  1.4228e+00         0.1548\nNGA014016  7.4806e-01 -9.4575e-04  8.0311e-02  2.6430e+00         0.0082\nNGA014017  7.4128e-01 -1.4841e-03  1.4189e-01  1.9718e+00         0.0486\nNGA015001 -2.3253e-04 -4.0757e-07  4.4657e-05 -3.4736e-02         0.9723\nNGA015002  1.8339e-01 -2.9958e-03  2.8598e-01  3.4854e-01         0.7274\nNGA015003  3.3534e-01 -1.9413e-04  3.7363e-02  1.7359e+00         0.0826\nNGA015004  1.3386e-02 -5.1798e-06  6.6300e-04  5.2008e-01         0.6030\nNGA015005  2.2909e-01 -3.1751e-04  4.8818e-02  1.0383e+00         0.2991\nNGA015006  1.2326e-01 -6.0610e-04  1.5567e-01  3.1395e-01         0.7536\nNGA016001  3.7148e+00 -1.2994e-02  1.0901e+00  3.5704e+00         0.0004\nNGA016002  1.5757e+00 -5.2157e-03  4.9678e-01  2.2430e+00         0.0249\nNGA016003  2.4817e+00 -4.4078e-03  8.4475e-01  2.7049e+00         0.0068\nNGA016004  1.9724e+00 -5.0763e-03  5.5338e-01  2.6583e+00         0.0079\nNGA016005  9.4456e-01 -4.1536e-03  6.3615e-01  1.1895e+00         0.2343\nNGA016006 -1.0907e-01 -2.5916e-06  1.0004e-03 -3.4485e+00         0.0006\nNGA016007  1.7981e+00 -8.6885e-04  1.6711e-01  4.4009e+00         0.0000\nNGA016008  2.4232e+00 -3.7864e-03  4.8282e-01  3.4928e+00         0.0005\nNGA016009  7.4284e-01 -1.3874e-03  2.6670e-01  1.4411e+00         0.1496\nNGA016010  1.8062e+00 -4.0293e-03  6.1720e-01  2.3043e+00         0.0212\nNGA016011  1.9014e+00 -9.5018e-03  1.2047e+00  1.7410e+00         0.0817\nNGA017001  1.8550e-01 -2.0274e-04  2.2209e-02  1.2461e+00         0.2127\nNGA017002  1.3528e-01 -8.8010e-05  9.6424e-03  1.3786e+00         0.1680\nNGA017003  3.1088e-01 -4.0269e-04  6.1908e-02  1.2511e+00         0.2109\nNGA017004  1.5955e-01 -5.2815e-04  8.1186e-02  5.6181e-01         0.5742\nNGA017005  8.9936e-01 -1.3382e-03  1.2796e-01  2.5179e+00         0.0118\nNGA017006  7.7406e-01 -1.1335e-03  1.7413e-01  1.8577e+00         0.0632\nNGA017007  3.5611e-01 -7.7500e-04  1.1910e-01  1.0341e+00         0.3011\nNGA017008  2.7921e-01 -7.2185e-04  1.1094e-01  8.4045e-01         0.4007\nNGA017009  1.3067e-01 -4.1823e-05  4.5823e-03  1.9310e+00         0.0535\nNGA017010  6.4882e-01 -1.4841e-03  2.2792e-01  1.3622e+00         0.1731\nNGA017011  3.6233e-01 -6.7060e-04  6.4165e-02  1.4331e+00         0.1518\nNGA017012  3.4910e-01 -8.3003e-04  7.9407e-02  1.2418e+00         0.2143\nNGA017013  7.5891e-01 -1.1335e-03  1.7413e-01  1.8214e+00         0.0685\nNGA017014  4.9147e-01 -4.0269e-04  6.1908e-02  1.9769e+00         0.0481\nNGA017015  4.9046e-01 -5.2815e-04  8.1186e-02  1.7232e+00         0.0849\nNGA017016  1.6098e-01 -1.5118e-04  2.3248e-02  1.0568e+00         0.2906\nNGA017017 -2.9442e-01 -3.1751e-04  3.0392e-02 -1.6870e+00         0.0916\nNGA017018 -2.1746e-02 -1.7016e-06  1.8645e-04 -1.5925e+00         0.1113\nNGA017019  3.7025e-01 -2.9422e-04  2.8163e-02  2.2080e+00         0.0272\nNGA017020  7.2939e-01 -8.8694e-04  1.1343e-01  2.1684e+00         0.0301\nNGA017021  8.0505e-01 -1.1998e-03  1.5339e-01  2.0586e+00         0.0395\nNGA017022  5.6681e-01 -1.0064e-03  1.2869e-01  1.5828e+00         0.1135\nNGA017023  3.7779e-01 -1.0690e-03  2.0557e-01  8.3561e-01         0.4034\nNGA017024  2.1648e-01 -1.2824e-04  1.6412e-02  1.6908e+00         0.0909\nNGA017025  1.5651e-01 -2.0274e-04  2.5945e-02  9.7295e-01         0.3306\nNGA017026  3.8013e-01 -1.4841e-03  5.7203e-01  5.0457e-01         0.6139\nNGA017027  6.9579e-01 -1.5599e-03  1.9936e-01  1.5618e+00         0.1183\nNGA018001 -3.0725e-01 -3.2122e-03  3.5083e-01 -5.1331e-01         0.6077\nNGA018002  3.1371e+00 -7.3650e-03  1.1244e+00  2.9655e+00         0.0030\nNGA018003 -3.2289e-01 -5.7920e-03  7.3707e-01 -3.6934e-01         0.7119\nNGA018004  7.0178e-03 -5.2815e-04  5.0543e-02  3.3565e-02         0.9732\nNGA018005  3.3445e-02 -2.0468e-05  3.1479e-03  5.9646e-01         0.5509\nNGA018006 -2.3381e-01 -1.4841e-03  1.4189e-01 -6.1677e-01         0.5374\nNGA018007  5.3497e-02 -5.1798e-06  6.6300e-04  2.0778e+00         0.0377\nNGA018008  3.0500e-01 -2.1151e-03  2.0209e-01  6.8316e-01         0.4945\nNGA018009  7.8043e-01 -6.3986e-03  1.6339e+00  6.1556e-01         0.5382\nNGA018010 -1.7446e-01 -4.4262e-04  4.8477e-02 -7.9036e-01         0.4293\nNGA018011  1.1734e-01 -5.7374e-04  5.4903e-02  5.0323e-01         0.6148\nNGA018012  1.3489e-01 -2.8384e-04  3.6320e-02  7.0929e-01         0.4781\nNGA018013 -3.6231e-02 -2.5916e-06  6.6604e-04 -1.4038e+00         0.1604\nNGA018014  4.0683e-02 -2.0468e-05  2.6198e-03  7.9523e-01         0.4265\nNGA018015 -2.8375e-01 -1.3382e-03  1.7106e-01 -6.8282e-01         0.4947\nNGA018016 -4.6525e-02 -4.1823e-05  4.0043e-03 -7.3457e-01         0.4626\nNGA018017  1.4007e+00 -3.5511e-03  3.8771e-01  2.2553e+00         0.0241\nNGA018018  5.7517e-01 -2.1151e-03  2.7016e-01  1.1107e+00         0.2667\nNGA018019 -7.6980e-01 -2.2054e-03  3.3844e-01 -1.3194e+00         0.1870\nNGA018020 -1.9731e-02 -2.5916e-06  3.9858e-04 -9.8816e-01         0.3231\nNGA018021 -4.0087e-01 -2.3134e-04  3.5572e-02 -2.1242e+00         0.0337\nNGA018022 -2.1243e-01 -1.4102e-03  2.1659e-01 -4.5343e-01         0.6502\nNGA018023  4.3393e-02 -1.0064e-03  1.2869e-01  1.2376e-01         0.9015\nNGA018024  9.0606e-02 -1.9402e-03  2.9782e-01  1.6958e-01         0.8653\nNGA018025  1.3597e+00 -1.3874e-03  1.7734e-01  3.2322e+00         0.0012\nNGA018026 -1.1337e-01 -7.5809e-04  9.6960e-02 -3.6166e-01         0.7176\nNGA018027  6.1232e-02 -1.0545e-05  1.6218e-03  1.5207e+00         0.1283\nNGA019001  1.4569e+00 -5.3569e-03  4.0706e-01  2.2919e+00         0.0219\nNGA019002 -9.4602e-01 -1.1335e-03  1.0841e-01 -2.8698e+00         0.0041\nNGA019003  3.8377e+00 -8.7593e-03  7.3800e-01  4.4774e+00         0.0000\nNGA019004  4.6873e+00 -3.0692e-02  2.5287e+00  2.9670e+00         0.0030\nNGA019005 -3.7441e-01 -5.7374e-04  7.3396e-02 -1.3799e+00         0.1676\nNGA019006  9.9921e-01 -5.5921e-04  8.5957e-02  3.4101e+00         0.0006\nNGA019007  1.4954e+00 -1.0472e-02  1.1354e+00  1.4133e+00         0.1576\nNGA019008  6.0268e-01 -3.5511e-03  3.8771e-01  9.7361e-01         0.3302\nNGA019009  5.6332e-01 -3.9053e-04  1.0033e-01  1.7797e+00         0.0751\nNGA019010 -1.2764e+00 -9.4575e-04  2.4283e-01 -2.5883e+00         0.0096\nNGA019011  5.6723e-01 -7.1992e-03  7.8314e-01  6.4911e-01         0.5163\nNGA019012 -1.0176e+00 -9.4575e-04  8.0311e-02 -3.5873e+00         0.0003\nNGA019013  2.5878e-01 -1.0095e-04  1.9431e-02  1.8572e+00         0.0633\nNGA019014  2.7535e-01 -1.0095e-04  1.5524e-02  2.2108e+00         0.0271\nNGA019015 -3.3029e-01 -4.8444e-04  6.1978e-02 -1.3248e+00         0.1853\nNGA019016  1.8787e+00 -2.2054e-03  2.8167e-01  3.5440e+00         0.0004\nNGA019017 -2.4071e-01 -7.5809e-04  1.1650e-01 -7.0299e-01         0.4821\nNGA019018 -1.2234e+00 -1.4841e-03  2.8527e-01 -2.2877e+00         0.0222\nNGA019019  9.1054e+00 -1.8061e-02  3.4139e+00  4.9378e+00         0.0000\nNGA019020  7.3853e-01 -9.2706e-04  1.0148e-01  2.3212e+00         0.0203\nNGA019021  3.6949e+00 -1.2774e-02  1.2074e+00  3.3742e+00         0.0007\nNGA019022  1.6054e-01 -5.0881e-05  6.5124e-03  1.9899e+00         0.0466\nNGA019023  9.7112e+00 -9.5018e-03  1.8117e+00  7.2220e+00         0.0000\nNGA020001  7.5743e-02 -2.0468e-05  2.6198e-03  1.4802e+00         0.1388\nNGA020002 -5.0220e-01 -3.6678e-03  5.6203e-01 -6.6499e-01         0.5061\nNGA020003 -7.0329e-02 -1.7798e-05  1.9501e-03 -1.5922e+00         0.1113\nNGA020004 -2.9818e-03 -7.7500e-04  1.1910e-01 -6.3944e-03         0.9949\nNGA020005 -6.2501e-02 -2.6938e-05  4.1430e-03 -9.7061e-01         0.3317\nNGA020006  2.0961e-02 -3.0202e-05  3.3091e-03  3.6490e-01         0.7152\nNGA020007 -6.4829e-01 -2.2054e-03  4.2361e-01 -9.9267e-01         0.3209\nNGA020008  4.2758e-01 -5.1421e-04  7.9043e-02  1.5227e+00         0.1278\nNGA020009 -1.1388e-01 -4.2987e-04  5.4999e-02 -4.8375e-01         0.6286\nNGA020010  3.3488e-01 -1.0690e-03  1.3669e-01  9.0868e-01         0.3635\nNGA020011  2.7376e-05 -4.0757e-07  6.2683e-05  3.5093e-03         0.9972\nNGA020012  6.5213e-02 -1.4841e-03  2.2792e-01  1.3971e-01         0.8889\nNGA020013 -1.1914e-01 -1.3382e-03  1.7106e-01 -2.8483e-01         0.7758\nNGA020014 -5.2136e-01 -8.8694e-04  9.7096e-02 -1.6703e+00         0.0949\nNGA020015  1.6730e-02 -2.5916e-06  3.9858e-04  8.3811e-01         0.4020\nNGA020016 -7.9532e-02 -1.0064e-03  1.9354e-01 -1.7849e-01         0.8583\nNGA020017 -4.3364e-01 -1.6920e-03  2.5978e-01 -8.4747e-01         0.3967\nNGA020018  1.5853e-01 -2.9422e-04  3.7649e-02  8.1855e-01         0.4130\nNGA020019  3.9618e-01 -1.0690e-03  1.3669e-01  1.0745e+00         0.2826\nNGA020020  3.2428e-01 -1.4102e-03  1.5430e-01  8.2912e-01         0.4070\nNGA020021  7.0268e-01 -1.0690e-03  2.7444e-01  1.3434e+00         0.1792\nNGA020022 -3.6308e-02 -3.7966e-05  5.8389e-03 -4.7466e-01         0.6350\nNGA020023  1.6405e-02 -1.2622e-05  2.4297e-03  3.3307e-01         0.7391\nNGA020024 -4.1423e-02 -8.2374e-05  9.0249e-03 -4.3517e-01         0.6634\nNGA020025  3.6538e-01 -1.0064e-03  7.6813e-02  1.3220e+00         0.1862\nNGA020026  7.9160e-02 -3.2849e-04  4.2032e-02  3.8771e-01         0.6982\nNGA020027 -3.6612e-03 -1.7798e-05  3.4261e-03 -6.2246e-02         0.9504\nNGA020028  2.1584e-01 -3.2849e-04  2.7912e-02  1.2939e+00         0.1957\nNGA020029 -1.4299e-01 -9.4575e-04  1.0353e-01 -4.4147e-01         0.6589\nNGA020030 -1.2134e-01 -1.4841e-03  1.6237e-01 -2.9745e-01         0.7661\nNGA020031  1.0263e-01 -6.2123e-04  7.9466e-02  3.6627e-01         0.7142\nNGA020032  2.1930e-02 -4.0269e-04  6.1908e-02  8.9756e-02         0.9285\nNGA020033  6.0953e-01 -1.2681e-03  1.6211e-01  1.5170e+00         0.1293\nNGA020034 -8.1234e-02 -8.1252e-04  8.8955e-02 -2.6964e-01         0.7874\nNGA020035  1.4874e-01 -1.2824e-04  1.4049e-02  1.2560e+00         0.2091\nNGA020036  1.6232e-01 -8.6885e-04  1.6711e-01  3.9920e-01         0.6897\nNGA020037 -1.6488e-01 -2.5855e-03  3.3008e-01 -2.8249e-01         0.7776\nNGA020038  4.3704e-01 -1.1998e-03  1.5339e-01  1.1189e+00         0.2632\nNGA020039  4.7162e-01 -1.4841e-03  1.8969e-01  1.0863e+00         0.2774\nNGA020040  4.7832e-03 -4.0757e-07  5.2168e-05  6.6230e-01         0.5078\nNGA020041 -2.7468e-01 -9.8716e-04  7.5342e-02 -9.9710e-01         0.3187\nNGA020042 -2.1594e-01 -3.5308e-04  3.0000e-02 -1.2447e+00         0.2132\nNGA020043 -5.7769e-02 -1.6801e-04  1.8405e-02 -4.2458e-01         0.6711\nNGA020044 -1.1342e-02 -2.0468e-05  2.2426e-03 -2.3907e-01         0.8111\nNGA021001  1.1136e-01 -2.9422e-04  3.7649e-02  5.7546e-01         0.5650\nNGA021002 -3.9737e-02 -1.2622e-05  1.3830e-03 -1.0682e+00         0.2854\nNGA021003  1.1809e-02 -6.5684e-05  1.0101e-02  1.1814e-01         0.9060\nNGA021004  1.8885e+00 -5.0763e-03  7.7676e-01  2.1485e+00         0.0317\nNGA021005 -2.4254e-02 -6.5684e-05  8.4068e-03 -2.6381e-01         0.7919\nNGA021006  1.9100e-02 -1.0545e-05  1.3498e-03  5.2017e-01         0.6029\nNGA021007  2.5087e-01 -1.1998e-03  1.3131e-01  6.9562e-01         0.4867\nNGA021008 -9.2772e-02 -2.0468e-05  3.9400e-03 -1.4777e+00         0.1395\nNGA021009 -3.3625e-01 -4.0269e-04  5.1523e-02 -1.4796e+00         0.1390\nNGA021010  4.5459e-01 -1.6130e-03  3.1000e-01  8.1937e-01         0.4126\nNGA021011 -1.9108e-01 -3.6465e-04  4.6657e-02 -8.8294e-01         0.3773\nNGA021012 -5.5450e-02 -2.5205e-04  3.2254e-02 -3.0735e-01         0.7586\nNGA021013  9.5763e-03 -1.3874e-03  1.3266e-01  3.0102e-02         0.9760\nNGA021014 -2.2260e-01 -2.6184e-04  4.0260e-02 -1.1081e+00         0.2678\nNGA021015 -2.6543e-02 -2.0274e-04  2.2209e-02 -1.7675e-01         0.8597\nNGA021016 -1.3468e-01 -8.8010e-05  1.3535e-02 -1.1569e+00         0.2473\nNGA021017  4.5984e-02 -3.0202e-05  3.8656e-03  7.4008e-01         0.4593\nNGA021018  3.8968e-01 -2.7869e-03  3.5572e-01  6.5804e-01         0.5105\nNGA021019  1.2239e-01 -2.6184e-04  2.8682e-02  7.2424e-01         0.4689\nNGA021020  2.5290e-03 -4.0757e-07  3.9024e-05  4.0490e-01         0.6855\nNGA021021  2.1265e-01 -4.2987e-04  1.1043e-01  6.4121e-01         0.5214\nNGA021022  2.9638e-02 -5.1421e-04  7.9043e-02  1.0725e-01         0.9146\nNGA021023  1.4806e-01 -1.4102e-03  2.1659e-01  3.2117e-01         0.7481\nNGA021024  4.8290e-01 -4.2797e-03  8.2031e-01  5.3790e-01         0.5906\nNGA021025  4.0330e-01 -8.8694e-04  1.3629e-01  1.0949e+00         0.2736\nNGA021026  1.5888e-01 -5.1421e-04  6.5784e-02  6.2148e-01         0.5343\nNGA021027  5.9132e-01 -5.5921e-04  8.5957e-02  2.0188e+00         0.0435\nNGA021028  1.7727e-02 -6.6631e-06  1.2826e-03  4.9516e-01         0.6205\nNGA021029  2.2814e-01 -2.6184e-04  2.8682e-02  1.3487e+00         0.1774\nNGA021030  4.1749e-02 -1.0545e-05  1.6218e-03  1.0369e+00         0.2998\nNGA021031 -3.2382e-01 -7.0727e-05  1.3614e-02 -2.7747e+00         0.0055\nNGA021032 -1.3455e-01 -1.2824e-04  1.6412e-02 -1.0492e+00         0.2941\nNGA021033 -2.0093e-03 -2.3134e-04  2.9605e-02 -1.0334e-02         0.9918\nNGA021034 -3.5337e-01 -2.0274e-04  3.9019e-02 -1.7879e+00         0.0738\nNGA022001  9.0860e-02 -2.6938e-05  5.1855e-03  1.2621e+00         0.2069\nNGA022002 -2.2579e-01 -1.5118e-04  1.6563e-02 -1.7532e+00         0.0796\nNGA022003  1.3510e-01 -7.5809e-04  1.1650e-01  3.9803e-01         0.6906\nNGA022004  1.6500e-02 -1.2824e-04  1.4049e-02  1.4029e-01         0.8884\nNGA022005  8.5960e-02 -6.5684e-05  1.0101e-02  8.5593e-01         0.3920\nNGA022006  2.0254e-01 -1.2142e-04  1.5539e-02  1.6257e+00         0.1040\nNGA022007  6.6541e-01 -1.1788e-03  2.2665e-01  1.4002e+00         0.1615\nNGA022008  3.0105e-01 -5.6451e-03  1.0805e+00  2.9504e-01         0.7680\nNGA022009 -2.8467e-01 -9.4575e-04  1.0353e-01 -8.8179e-01         0.3779\nNGA022010  3.7176e-01 -1.6130e-03  3.1000e-01  6.7060e-01         0.5025\nNGA022011  1.1498e-01 -1.2464e-03  1.5934e-01  2.9118e-01         0.7709\nNGA022012  1.7056e-01 -2.2054e-03  2.8167e-01  3.2553e-01         0.7448\nNGA022013 -1.9158e-01 -1.1130e-03  1.2182e-01 -5.4572e-01         0.5853\nNGA022014 -4.5072e-01 -9.4575e-04  1.4532e-01 -1.1799e+00         0.2380\nNGA022015  9.9367e-02 -1.9413e-04  2.4844e-02  6.3165e-01         0.5276\nNGA022016  2.8983e-01 -5.5921e-04  1.0759e-01  8.8533e-01         0.3760\nNGA022017  2.4329e-01 -1.3160e-03  2.0213e-01  5.4408e-01         0.5864\nNGA022018 -2.0175e-01 -8.8010e-05  1.1264e-02 -1.9001e+00         0.0574\nNGA022019 -1.2776e-01 -6.5487e-04  7.1707e-02 -4.7467e-01         0.6350\nNGA022020 -1.4782e-01 -2.0274e-04  2.5945e-02 -9.1644e-01         0.3594\nNGA022021 -1.4110e-01 -4.4262e-04  6.8045e-02 -5.3922e-01         0.5897\nNGA023001  1.3680e-03 -4.0757e-07  6.2683e-05  1.7283e-01         0.8628\nNGA023002 -9.8267e-04 -5.5331e-05  7.0819e-03 -1.1020e-02         0.9912\nNGA023003 -3.0917e-02 -2.6938e-05  2.9515e-03 -5.6858e-01         0.5696\nNGA023004  4.1013e-02 -1.1788e-03  1.1273e-01  1.2566e-01         0.9000\nNGA023005  5.8700e-02 -7.5809e-04  1.4582e-01  1.5571e-01         0.8763\nNGA023006  2.5193e-01 -2.3134e-04  2.5342e-02  1.5840e+00         0.1132\nNGA023007  2.1735e-01 -3.2849e-04  8.4394e-02  7.4930e-01         0.4537\nNGA023008  2.6744e-01 -1.7602e-04  1.4958e-02  2.1881e+00         0.0287\nNGA023009  4.1519e-01 -7.0554e-04  6.7506e-02  1.6007e+00         0.1094\nNGA023010 -3.4662e-02 -1.2622e-05  1.6156e-03 -8.6206e-01         0.3887\nNGA023011 -6.1370e-04 -1.1091e-07  1.7057e-05 -1.4857e-01         0.8819\nNGA023012 -1.6155e-01 -6.2123e-04  4.7431e-02 -7.3894e-01         0.4599\nNGA023013  9.8943e-02 -3.9053e-04  1.0033e-01  3.1361e-01         0.7538\nNGA023014 -1.7185e-02 -3.6465e-04  3.9940e-02 -8.4163e-02         0.9329\nNGA023015 -1.8619e-01 -2.6184e-04  1.0104e-01 -5.8491e-01         0.5586\nNGA023016  3.8827e-03 -1.2824e-04  1.9720e-02  2.8562e-02         0.9772\nNGA023017 -1.9137e-01 -8.6885e-04  1.3351e-01 -5.2137e-01         0.6021\nNGA023018  2.5256e-01 -4.0269e-04  3.8541e-02  1.2885e+00         0.1976\nNGA023019 -1.2671e-01 -8.8010e-05  1.1264e-02 -1.1930e+00         0.2329\nNGA023020 -5.0014e-02 -1.2622e-05  1.3830e-03 -1.3446e+00         0.1788\nNGA023021  1.5834e+00 -7.0554e-04  7.7250e-02  5.6993e+00         0.0000\nNGA024001 -6.2138e-02 -2.5916e-06  2.4814e-04 -3.9445e+00         0.0001\nNGA024002  1.5607e-02 -2.6938e-05  3.4480e-03  2.6624e-01         0.7901\nNGA024003  4.6946e+00 -7.3650e-03  1.1244e+00  4.4343e+00         0.0000\nNGA024004  1.4306e+00 -6.8733e-03  8.7372e-01  1.5379e+00         0.1241\nNGA024005  8.3167e+00 -4.6653e-02  3.3979e+00  4.5371e+00         0.0000\nNGA024006  1.6707e+00 -1.5359e-03  2.9520e-01  3.0777e+00         0.0021\nNGA024007 -5.2521e-01 -1.2824e-04  2.4683e-02 -3.3422e+00         0.0008\nNGA024008 -1.4271e-01 -1.7602e-04  3.3877e-02 -7.7438e-01         0.4387\nNGA024009  6.7970e+00 -1.3441e-02  1.6973e+00  5.2276e+00         0.0000\nNGA024010  1.5203e+00 -2.2215e-04  5.7079e-02  6.3643e+00         0.0000\nNGA024011  8.8452e-02 -1.5359e-03  1.9629e-01  2.0311e-01         0.8390\nNGA024012  1.0465e+00 -8.6885e-04  8.3118e-02  3.6331e+00         0.0003\nNGA024013  5.9227e+00 -3.2122e-03  2.4751e+00  3.7667e+00         0.0002\nNGA024014  3.2411e+00 -4.1536e-03  4.5321e-01  4.8205e+00         0.0000\nNGA024015  7.8805e+00 -1.8323e-02  1.9709e+00  5.6265e+00         0.0000\nNGA024016  8.3210e-01 -4.8032e-03  6.1185e-01  1.0699e+00         0.2847\nNGA025001  3.1981e-01 -1.3382e-03  3.4346e-01  5.4798e-01         0.5837\nNGA025002  1.0858e+00 -1.5599e-03  4.0028e-01  1.7187e+00         0.0857\nNGA025003 -2.6618e-01 -9.2706e-04  1.0148e-01 -8.3266e-01         0.4050\nNGA025004  6.7625e-01 -1.1998e-03  1.1474e-01  1.9999e+00         0.0455\nNGA025005  1.0512e+00 -1.4102e-03  1.8025e-01  2.4792e+00         0.0132\nNGA025006  1.0352e+00 -2.4877e-03  6.3773e-01  1.2994e+00         0.1938\nNGA025007 -2.4193e-01 -1.6130e-03  1.5419e-01 -6.1199e-01         0.5405\nNGA025008  4.3344e-01 -1.6376e-03  1.5654e-01  1.0997e+00         0.2715\nNGA025009 -3.8279e-04 -1.0545e-05  4.0704e-03 -5.8346e-03         0.9953\nNGA025010 -1.3725e-01 -6.2123e-04  9.5484e-02 -4.4217e-01         0.6584\nNGA025011  7.8218e-01 -1.5599e-03  1.4913e-01  2.0295e+00         0.0424\nNGA025012 -2.2568e-01 -4.2987e-04  4.7080e-02 -1.0381e+00         0.2992\nNGA025013  7.5186e-01 -1.1998e-03  1.3131e-01  2.0782e+00         0.0377\nNGA025014  8.6898e-01 -8.8694e-04  1.7058e-01  2.1061e+00         0.0352\nNGA025015  8.5323e-01 -1.4841e-03  1.4189e-01  2.2690e+00         0.0233\nNGA025016  1.0085e+00 -1.1998e-03  1.5339e-01  2.5781e+00         0.0099\nNGA025017 -3.0546e-01 -1.0718e-04  2.0630e-02 -2.1260e+00         0.0335\nNGA025018  7.0582e-01 -1.6376e-03  2.5145e-01  1.4108e+00         0.1583\nNGA025019  1.0822e+00 -1.4841e-03  2.2792e-01  2.2699e+00         0.0232\nNGA025020  1.0079e+00 -1.1998e-03  1.3131e-01  2.7848e+00         0.0054\nNGA026001  6.3592e-02 -8.2374e-05  1.5855e-02  5.0568e-01         0.6131\nNGA026002  8.2027e-03 -1.1091e-07  1.0619e-05  2.5172e+00         0.0118\nNGA026003  3.1886e-02 -1.0545e-05  1.0097e-03  1.0038e+00         0.3155\nNGA026004  5.4417e-01 -3.9053e-04  3.7378e-02  2.8167e+00         0.0049\nNGA026005 -8.1541e-02 -1.5118e-04  2.9098e-02 -4.7713e-01         0.6333\nNGA026006 -6.0049e-02 -5.7374e-04  2.2134e-01 -1.2642e-01         0.8994\nNGA026007 -3.3673e-01 -1.7602e-04  1.6850e-02 -2.5927e+00         0.0095\nNGA026008  7.1316e-01 -3.7864e-03  3.2062e-01  1.2662e+00         0.2055\nNGA026009  6.1052e-01 -1.8556e-03  1.5743e-01  1.5434e+00         0.1227\nNGA026010  2.2302e-01 -4.2987e-04  8.2713e-02  7.7693e-01         0.4372\nNGA026011  1.3213e-01 -1.6801e-04  3.2336e-02  7.3573e-01         0.4619\nNGA026012  4.3825e-02 -5.1798e-06  6.6300e-04  1.7022e+00         0.0887\nNGA026013 -3.2528e-02 -2.5916e-06  3.9858e-04 -1.6292e+00         0.1033\nNGA027001 -1.2109e-01 -1.6801e-04  2.5835e-02 -7.5234e-01         0.4518\nNGA027002 -2.2020e-02 -2.6938e-05  6.9230e-03 -2.6433e-01         0.7915\nNGA027003 -3.7659e-01 -1.2824e-04  4.9494e-02 -1.6922e+00         0.0906\nNGA027004 -8.9107e-02 -2.6184e-04  2.2250e-02 -5.9562e-01         0.5514\nNGA027005 -1.9897e-02 -1.2824e-04  1.6412e-02 -1.5431e-01         0.8774\nNGA027006  2.2566e-02 -6.6631e-06  5.1505e-03  3.1453e-01         0.7531\nNGA027007  8.1164e-02 -3.1031e-03  4.7576e-01  1.2217e-01         0.9028\nNGA027008  1.9050e-01 -9.2706e-04  1.1855e-01  5.5597e-01         0.5782\nNGA027009  3.6070e-03 -4.4262e-04  4.8477e-02  1.8393e-02         0.9853\nNGA027010 -3.2106e-01 -6.2123e-04  7.9466e-02 -1.1367e+00         0.2557\nNGA027011 -3.1130e-02 -1.0718e-04  2.7542e-02 -1.8693e-01         0.8517\nNGA027012  1.0037e-01 -5.2815e-04  6.7566e-02  3.8818e-01         0.6979\nNGA027013  3.8135e-02 -5.1798e-06  9.9709e-04  1.2079e+00         0.2271\nNGA027014  1.5447e-02 -1.0545e-05  1.3498e-03  4.2074e-01         0.6739\nNGA027015  2.2136e-01 -3.1751e-04  2.6979e-02  1.3496e+00         0.1771\nNGA027016 -3.0554e-02 -8.8010e-05  8.4260e-03 -3.3190e-01         0.7400\nNGA027017  2.1345e-01 -1.6801e-04  9.8328e-03  2.1543e+00         0.0312\nNGA027018  5.8513e-04 -1.1091e-07  2.1350e-05  1.2666e-01         0.8992\nNGA027019 -3.3560e-03 -4.0757e-07  3.4642e-05 -5.7012e-01         0.5686\nNGA027020 -5.1004e-02 -1.2622e-05  1.9412e-03 -1.1573e+00         0.2471\nNGA027021  1.9566e-01 -1.6920e-03  1.8507e-01  4.5875e-01         0.6464\nNGA027022 -9.2575e-02 -2.6184e-04  2.8682e-02 -5.4508e-01         0.5857\nNGA027023 -7.6568e-03 -8.8694e-04  1.7058e-01 -1.6391e-02         0.9869\nNGA027024 -5.4924e-01 -1.1998e-03  1.8431e-01 -1.2765e+00         0.2018\nNGA027025  1.5928e-02 -7.5809e-04  8.3000e-02  5.7919e-02         0.9538\nNGA028001  3.6854e-01 -1.2681e-03  1.3877e-01  9.9274e-01         0.3208\nNGA028002 -2.1839e-02 -1.7016e-06  4.3732e-04 -1.0442e+00         0.2964\nNGA028003 -4.2032e-01 -1.1490e-02  1.2445e+00 -3.6648e-01         0.7140\nNGA028004  4.4661e-01 -3.2849e-04  5.0505e-02  1.9887e+00         0.0467\nNGA028005 -1.0814e-01 -1.4841e-03  2.2792e-01 -2.2340e-01         0.8232\nNGA028006  6.3646e-01 -8.3003e-04  1.2755e-01  1.7844e+00         0.0744\nNGA028007  9.6919e-02 -6.7060e-04  5.6961e-02  4.0890e-01         0.6826\nNGA028008 -1.0214e+00 -1.3382e-03  1.1359e-01 -3.0267e+00         0.0025\nNGA028009  1.8056e-03 -2.0468e-05  1.9597e-03  4.1250e-02         0.9671\nNGA028010  2.9113e-01 -6.7060e-04  1.7223e-01  7.0312e-01         0.4820\nNGA028011  1.8308e-02 -6.6631e-06  1.0248e-03  5.7211e-01         0.5672\nNGA028012  2.9197e-01 -1.0690e-03  2.0557e-01  6.4632e-01         0.5181\nNGA028013 -2.1677e-01 -1.6376e-03  2.5145e-01 -4.2903e-01         0.6679\nNGA028014 -3.1361e-01 -2.6184e-04  5.0390e-02 -1.3959e+00         0.1627\nNGA028015  3.3836e-01 -6.2123e-04  5.2770e-02  1.4756e+00         0.1400\nNGA028016  3.5674e-02 -2.0468e-05  2.2426e-03  7.5374e-01         0.4510\nNGA028017 -3.9689e-02 -3.6465e-04  3.9940e-02 -1.9677e-01         0.8440\nNGA028018 -9.3400e-02 -5.5331e-05  8.5093e-03 -1.0119e+00         0.3116\nNGA028019  3.7729e-01 -4.8444e-04  7.4470e-02  1.3843e+00         0.1663\nNGA028020 -1.0607e-01 -3.9053e-04  4.9967e-02 -4.7278e-01         0.6364\nNGA029001  2.6378e+00 -5.3569e-03  5.8381e-01  3.4593e+00         0.0005\nNGA029002  1.9105e+00 -1.5303e-02  2.9007e+00  1.1307e+00         0.2582\nNGA029003  3.0464e+00 -4.2797e-03  8.2031e-01  3.3682e+00         0.0008\nNGA029004  3.8554e+00 -1.3441e-02  2.0394e+00  2.7091e+00         0.0067\nNGA029005 -7.0783e-02 -1.5118e-04  1.9348e-02 -5.0779e-01         0.6116\nNGA029006 -3.6503e-01 -1.0064e-03  2.5839e-01 -7.1613e-01         0.4739\nNGA029007 -1.1321e-01 -5.1421e-04  9.8933e-02 -3.5830e-01         0.7201\nNGA029008  1.7802e-01 -1.2142e-04  9.2747e-03  1.8498e+00         0.0643\nNGA029009  6.8193e-01 -2.1151e-03  2.3126e-01  1.4224e+00         0.1549\nNGA029010 -4.7190e-02 -1.7602e-04  2.7066e-02 -2.8577e-01         0.7751\nNGA029011  2.1829e+00 -4.4078e-03  4.2017e-01  3.3744e+00         0.0007\nNGA029012  1.5895e-01 -1.4377e-04  1.8399e-02  1.1729e+00         0.2409\nNGA029013  7.1452e-01 -6.2441e-03  6.7989e-01  8.7412e-01         0.3821\nNGA029014  1.6269e-01 -1.4377e-04  2.7671e-02  9.7891e-01         0.3276\nNGA029015  9.0717e-01 -4.2987e-04  8.2713e-02  3.1558e+00         0.0016\nNGA029016  1.8803e+00 -4.9388e-03  6.2904e-01  2.3770e+00         0.0175\nNGA029017  1.1459e+00 -2.6852e-03  2.9343e-01  2.1203e+00         0.0340\nNGA029018  4.9508e-01 -2.2054e-03  2.4112e-01  1.0127e+00         0.3112\nNGA030001  8.7445e-01 -1.8061e-02  1.5074e+00  7.2693e-01         0.4673\nNGA030002  3.0745e-01 -1.6801e-04  1.8405e-02  2.2675e+00         0.0234\nNGA030003 -6.8023e-02 -2.5916e-06  4.9888e-04 -3.0454e+00         0.0023\nNGA030004  2.0509e+00 -1.0274e-02  7.0532e-01  2.4542e+00         0.0141\nNGA030005  5.2081e-01 -2.5205e-04  3.8755e-02  2.6469e+00         0.0081\nNGA030006  9.9468e-01 -1.5359e-03  1.9629e-01  2.2485e+00         0.0245\nNGA030007  3.2230e-01 -1.4377e-04  2.7671e-02  1.9384e+00         0.0526\nNGA030008 -1.2207e-01 -6.6631e-06  7.3006e-04 -4.5175e+00         0.0000\nNGA030009  1.1403e-01 -3.7966e-05  3.2269e-03  2.0080e+00         0.0446\nNGA030010 -2.4155e-01 -8.3994e-03  9.1259e-01 -2.4406e-01         0.8072\nNGA030011  3.0222e+00 -4.9388e-03  7.5583e-01  3.4819e+00         0.0005\nNGA030012  1.5670e-01 -1.0545e-05  2.0299e-03  3.4782e+00         0.0005\nNGA030013  1.5055e+00 -1.7728e-03  2.2652e-01  3.1669e+00         0.0015\nNGA030014  1.5872e+00 -1.3160e-03  2.0213e-01  3.5334e+00         0.0004\nNGA030015 -2.6194e-01 -4.1823e-05  5.3530e-03 -3.5797e+00         0.0003\nNGA030016  5.6715e-01 -4.7109e-04  9.0642e-02  1.8854e+00         0.0594\nNGA030017  1.4555e+00 -9.8716e-04  1.0806e-01  4.4308e+00         0.0000\nNGA030018 -1.9821e-01 -3.0202e-05  5.8136e-03 -2.5992e+00         0.0093\nNGA030019  1.1610e+00 -9.2706e-04  1.7829e-01  2.7517e+00         0.0059\nNGA030020  2.2905e-01 -7.5809e-04  1.4582e-01  6.0181e-01         0.5473\nNGA030021  1.8611e-01 -8.2374e-05  1.2668e-02  1.6543e+00         0.0981\nNGA030022 -3.0285e-01 -1.5118e-04  2.9098e-02 -1.7745e+00         0.0760\nNGA030023 -6.4504e-03 -2.5916e-06  3.9858e-04 -3.2296e-01         0.7467\nNGA030024  1.2795e+00 -2.0267e-03  1.7192e-01  3.0909e+00         0.0020\nNGA030025  2.3456e+00 -5.6451e-03  6.1504e-01  2.9982e+00         0.0027\nNGA030026 -5.3079e-01 -7.2185e-04  1.3885e-01 -1.4225e+00         0.1549\nNGA030027  1.3646e-01 -2.6938e-05  2.9515e-03  2.5122e+00         0.0120\nNGA030028  1.1433e+00 -3.2122e-03  2.7216e-01  2.1977e+00         0.0280\nNGA030029 -4.5188e-02 -6.6631e-06  1.7124e-03 -1.0918e+00         0.2749\nNGA030030  9.2290e-01 -1.1788e-03  1.5070e-01  2.3804e+00         0.0173\nNGA031001 -2.8573e-03 -4.0757e-07  3.9024e-05 -4.5732e-01         0.6474\nNGA031002  1.4947e-02 -8.6885e-04  1.1111e-01  4.7447e-02         0.9622\nNGA031003  1.1773e-01 -1.1998e-03  1.1474e-01  3.5111e-01         0.7255\nNGA031004 -3.0738e-02 -6.5684e-05  1.0101e-02 -3.0518e-01         0.7602\nNGA031005  5.7946e-02 -1.7602e-04  2.2526e-02  3.8726e-01         0.6986\nNGA031006 -8.5732e-03 -1.2824e-04  1.6412e-02 -6.5920e-02         0.9474\nNGA031007  2.7991e-01 -7.7500e-04  7.4147e-02  1.0308e+00         0.3026\nNGA031008 -4.7970e-02 -2.6938e-05  3.4480e-03 -8.1647e-01         0.4142\nNGA031009  4.8154e-01 -1.5599e-03  2.3954e-01  9.8707e-01         0.3236\nNGA031010  3.3515e-01 -5.7374e-04  8.8190e-02  1.1305e+00         0.2583\nNGA031011 -1.8975e-01 -4.7109e-04  7.2419e-02 -7.0335e-01         0.4818\nNGA031012 -1.5426e-02 -3.0202e-05  4.6448e-03 -2.2590e-01         0.8213\nNGA031013 -7.6424e-02 -8.6885e-04  1.3351e-01 -2.0678e-01         0.8362\nNGA031014 -7.9257e-03 -1.7016e-06  1.4464e-04 -6.5888e-01         0.5100\nNGA031015 -2.1562e-02 -1.2622e-05  2.4297e-03 -4.3719e-01         0.6620\nNGA031016 -1.5004e-01 -8.8694e-04  8.4848e-02 -5.1205e-01         0.6086\nNGA031017 -2.1280e-02 -1.1335e-03  1.4492e-01 -5.2923e-02         0.9578\nNGA031018 -2.5580e-01 -1.3874e-03  1.7734e-01 -6.0413e-01         0.5458\nNGA031019 -8.7394e-02 -1.6801e-04  4.3170e-02 -4.1981e-01         0.6746\nNGA031020 -3.0697e-03 -1.2142e-04  1.3302e-02 -2.5563e-02         0.9796\nNGA031021  2.6458e-01 -1.9402e-03  4.9766e-01  3.7781e-01         0.7056\nNGA031022 -6.7674e-01 -9.4575e-04  1.8188e-01 -1.5846e+00         0.1131\nNGA031023  1.8863e-01 -2.5205e-04  3.2254e-02  1.0517e+00         0.2929\nNGA031024 -5.2574e-02 -1.0718e-04  1.1742e-02 -4.8418e-01         0.6283\nNGA031025  3.7948e-01 -8.8694e-04  7.5321e-02  1.3859e+00         0.1658\nNGA031026 -2.0464e-03 -6.6631e-06  7.3006e-04 -7.5491e-02         0.9398\nNGA031027  1.6759e-02 -6.6631e-06  1.0248e-03  5.2373e-01         0.6005\nNGA031028 -2.2708e-02 -3.9053e-04  3.7378e-02 -1.1543e-01         0.9081\nNGA031029 -3.8192e-01 -8.3003e-04  1.0615e-01 -1.1696e+00         0.2421\nNGA031030 -2.1698e-01 -1.2142e-04  1.8671e-02 -1.5870e+00         0.1125\nNGA031031 -3.7734e-03 -1.7016e-06  2.6171e-04 -2.3315e-01         0.8156\nNGA031032  1.9499e-02 -2.6938e-05  6.9230e-03  2.3468e-01         0.8145\nNGA031033  7.0872e-01 -1.1788e-03  8.1666e-02  2.4841e+00         0.0130\nNGA032001  1.5646e+00 -3.5511e-03  4.5292e-01  2.3301e+00         0.0198\nNGA032002  9.3004e-02 -1.0095e-04  1.2920e-02  8.1910e-01         0.4127\nNGA032003  3.2111e-01 -8.2374e-05  1.0543e-02  3.1281e+00         0.0018\nNGA032004  1.5435e-01 -8.2374e-05  1.0543e-02  1.5040e+00         0.1326\nNGA032005 -2.0990e-02 -6.6631e-06  1.2826e-03 -5.8590e-01         0.5579\nNGA032006  7.3299e-01 -1.3160e-03  2.0213e-01  1.6333e+00         0.1024\nNGA032007  2.7256e-01 -7.5809e-04  8.3000e-02  9.4871e-01         0.3428\nNGA032008  9.8229e-01 -1.6920e-03  3.2515e-01  1.7256e+00         0.0844\nNGA032009  1.5094e+00 -2.9958e-03  3.2726e-01  2.6437e+00         0.0082\nNGA032010 -1.4049e-02 -4.0757e-07  7.8456e-05 -1.5860e+00         0.1127\nNGA032011  1.5391e+00 -4.1536e-03  5.2944e-01  2.1209e+00         0.0339\nNGA032012  2.1618e+00 -2.1151e-03  5.4244e-01  2.9380e+00         0.0033\nNGA032013  1.7527e+00 -3.5511e-03  3.3880e-01  3.0172e+00         0.0026\nNGA032014  2.0518e+00 -3.6678e-03  4.6775e-01  3.0055e+00         0.0027\nNGA032015  1.3159e+00 -2.9958e-03  3.2726e-01  2.3054e+00         0.0211\nNGA032016  1.5330e+00 -4.6695e-03  5.0925e-01  2.1548e+00         0.0312\nNGA032017  1.1757e-01 -6.5684e-05  1.0101e-02  1.1704e+00         0.2418\nNGA033001  6.8181e-01 -7.7500e-04  8.4850e-02  2.3433e+00         0.0191\nNGA033002  8.0507e-01 -9.4575e-04  1.8188e-01  1.8899e+00         0.0588\nNGA033003  8.3936e-01 -1.6376e-03  2.5145e-01  1.6771e+00         0.0935\nNGA033004  7.2356e-01 -1.1335e-03  2.9098e-01  1.3435e+00         0.1791\nNGA033005  7.6856e-01 -9.4575e-04  2.4283e-01  1.5616e+00         0.1184\nNGA033006  1.0302e+00 -1.1998e-03  4.6258e-01  1.5165e+00         0.1294\nNGA033007  1.0923e+00 -1.6376e-03  2.0927e-01  2.3913e+00         0.0168\nNGA033008  8.7396e-01 -1.4102e-03  1.3484e-01  2.3839e+00         0.0171\nNGA033009  9.5064e-01 -1.6376e-03  2.0927e-01  2.0817e+00         0.0374\nNGA033010  7.3405e-01 -1.5599e-03  1.4913e-01  1.9049e+00         0.0568\nNGA033011  2.6788e-01 -4.0269e-04  4.4105e-02  1.2775e+00         0.2014\nNGA033012  1.0784e+00 -1.5599e-03  2.9982e-01  1.9723e+00         0.0486\nNGA033013  4.0902e-01 -1.4841e-03  2.8527e-01  7.6859e-01         0.4421\nNGA033014  4.3451e-01 -4.8444e-04  4.1157e-02  2.1442e+00         0.0320\nNGA033015 -8.7186e-02 -1.0545e-05  1.1554e-03 -2.5646e+00         0.0103\nNGA033016  3.4312e-01 -7.7500e-04  6.5822e-02  1.3404e+00         0.1801\nNGA033017  1.2400e+00 -1.6376e-03  2.5145e-01  2.4760e+00         0.0133\nNGA033018  1.1450e+00 -1.5599e-03  2.3954e-01  2.3427e+00         0.0191\nNGA033019  3.7426e-01 -1.1998e-03  2.3069e-01  7.8172e-01         0.4344\nNGA033020  5.2363e-01 -1.1998e-03  2.3069e-01  1.0927e+00         0.2745\nNGA033021  3.5124e-01 -1.4841e-03  1.4189e-01  9.3639e-01         0.3491\nNGA033022  6.3538e-01 -8.3003e-04  1.5965e-01  1.5923e+00         0.1113\nNGA033023  1.0764e+00 -1.4841e-03  2.2792e-01  2.2578e+00         0.0240\nNGA034001 -2.2621e-03 -1.1091e-07  1.7057e-05 -5.4768e-01         0.5839\nNGA034002  1.5842e-03 -3.7966e-05  5.8389e-03  2.1228e-02         0.9831\nNGA034003  5.4458e-02 -4.1823e-05  4.5823e-03  8.0511e-01         0.4208\nNGA034004 -1.3558e-01 -4.4262e-04  8.5167e-02 -4.6305e-01         0.6433\nNGA034005 -3.9963e-02 -3.1751e-04  4.0628e-02 -1.9669e-01         0.8441\nNGA034006  1.4818e-01 -2.3134e-04  2.9605e-02  8.6255e-01         0.3884\nNGA034007  5.0261e-02 -2.9422e-04  5.6620e-02  2.1246e-01         0.8317\nNGA034008  2.9726e-02 -5.5921e-04  1.4364e-01  7.9909e-02         0.9363\nNGA034009  2.0162e-01 -7.7500e-04  9.9121e-02  6.4286e-01         0.5203\nNGA034010  1.2658e-02 -1.2824e-04  1.6412e-02  9.9810e-02         0.9205\nNGA034011 -4.0837e-02 -1.7798e-05  1.7041e-03 -9.8881e-01         0.3228\nNGA034012  4.5498e-01 -1.1998e-03  1.3131e-01  1.2589e+00         0.2081\nNGA034013 -1.1764e-01 -5.0881e-05  1.3076e-02 -1.0283e+00         0.3038\nNGA034014 -6.2210e-02 -4.4262e-04  6.8045e-02 -2.3679e-01         0.8128\nNGA034015  1.1805e-02 -5.7374e-04  1.1038e-01  3.7260e-02         0.9703\nNGA034016  2.6148e-01 -1.0064e-03  2.5839e-01  5.1638e-01         0.6056\nNGA034017  2.3751e-01 -1.3382e-03  2.5726e-01  4.7090e-01         0.6377\nNGA034018  1.9013e-02 -1.7798e-05  1.5128e-03  4.8930e-01         0.6246\nNGA034019  3.0448e-02 -6.5684e-05  8.4068e-03  3.3279e-01         0.7393\nNGA034020 -2.5456e-01 -4.2987e-04  4.7080e-02 -1.1712e+00         0.2415\nNGA034021 -2.0512e-03 -1.1091e-07  9.4270e-06 -6.6803e-01         0.5041\nNGA034022  9.2069e-02 -2.9422e-04  5.6620e-02  3.8816e-01         0.6979\nNGA034023 -4.7554e-02 -6.5684e-05  8.4068e-03 -5.1792e-01         0.6045\nNGA035001  5.9407e-01 -6.0610e-04  7.7532e-02  2.1357e+00         0.0327\nNGA035002  3.0483e-01 -1.6130e-03  1.3688e-01  8.2828e-01         0.4075\nNGA035003  1.5071e+00 -2.3917e-03  2.2845e-01  3.1582e+00         0.0016\nNGA035004  1.1637e-01 -5.1421e-04  9.8933e-02  3.7161e-01         0.7102\nNGA035005  1.4765e+00 -3.6678e-03  4.6775e-01  2.1643e+00         0.0304\nNGA035006 -4.3443e-01 -2.9422e-04  3.2228e-02 -2.4183e+00         0.0156\nNGA035007  2.6999e-01 -2.5205e-04  6.4760e-02  1.0619e+00         0.2883\nNGA035008  5.0496e-01 -8.6885e-04  6.6320e-02  1.9642e+00         0.0495\nNGA035009  8.0951e-01 -1.5359e-03  2.3586e-01  1.6700e+00         0.0949\nNGA035010 -2.5509e-01 -1.1788e-03  1.1273e-01 -7.5625e-01         0.4495\nNGA035011 -3.1683e-01 -1.7602e-04  6.7930e-02 -1.2149e+00         0.2244\nNGA035012  1.0863e+00 -2.2054e-03  4.2361e-01  1.6724e+00         0.0944\nNGA035013  1.2270e+00 -1.2464e-03  3.1993e-01  2.1715e+00         0.0299\nNGA035014  9.5481e-01 -4.0293e-03  4.3971e-01  1.4460e+00         0.1482\nNGA035015  9.0992e-02 -5.0881e-05  6.5124e-03  1.1282e+00         0.2592\nNGA035016 -2.5486e-01 -4.7109e-04  1.8176e-01 -5.9670e-01         0.5507\nNGA036001 -1.1163e-01 -3.7966e-05  7.3081e-03 -1.3053e+00         0.1918\nNGA036002  4.3127e-01 -4.0269e-04  4.4105e-02  2.0555e+00         0.0398\nNGA036003  1.0324e+00 -1.4102e-03  2.1659e-01  2.2213e+00         0.0263\nNGA036004  1.8372e-01 -1.2681e-03  1.0765e-01  5.6382e-01         0.5729\nNGA036005  5.9978e-01 -5.2815e-04  5.7839e-02  2.4961e+00         0.0126\nNGA036006  1.1226e+00 -1.6376e-03  2.0927e-01  2.4576e+00         0.0140\nNGA036007  1.1428e+00 -1.6376e-03  1.7914e-01  2.7040e+00         0.0069\nNGA036008 -3.8252e-01 -1.5599e-03  1.7065e-01 -9.2219e-01         0.3564\nNGA036009  3.3105e-02 -8.3003e-04  7.9407e-02  1.2042e-01         0.9041\nNGA036010  2.5611e-01 -5.7374e-04  8.8190e-02  8.6435e-01         0.3874\nNGA036011 -1.7530e-01 -1.1335e-03  1.7413e-01 -4.1737e-01         0.6764\nNGA036012  7.4123e-02 -4.8444e-04  6.1978e-02  2.9968e-01         0.7644\nNGA036013  1.3662e-02 -6.6631e-06  1.0248e-03  4.2698e-01         0.6694\nNGA036014  7.5876e-01 -1.3382e-03  3.4346e-01  1.2970e+00         0.1946\nNGA036015  8.6324e-01 -1.2681e-03  1.6211e-01  2.1472e+00         0.0318\nNGA036016  1.0366e+00 -1.6376e-03  3.1472e-01  1.8507e+00         0.0642\nNGA036017  5.9140e-01 -1.0064e-03  1.5463e-01  1.5065e+00         0.1319\nNGA037001  5.8811e-03 -2.9422e-04  4.5237e-02  2.9034e-02         0.9768\nNGA037002  1.3691e-01 -1.3382e-03  1.7106e-01  3.3427e-01         0.7382\nNGA037003  2.4969e-01 -6.7060e-04  1.0307e-01  7.7986e-01         0.4355\nNGA037004  2.2133e-02 -2.6184e-04  3.3506e-02  1.2234e-01         0.9026\nNGA037005  2.2257e-01 -6.2123e-04  1.1951e-01  6.4562e-01         0.5185\nNGA037006  6.3638e-02 -4.0269e-04  4.4105e-02  3.0494e-01         0.7604\nNGA037007  6.8300e-03 -3.0202e-05  2.5670e-03  1.3540e-01         0.8923\nNGA037008  2.0893e-01 -4.8444e-04  7.4470e-02  7.6737e-01         0.4429\nNGA037009  1.8881e-01 -4.0269e-04  3.4214e-02  1.0229e+00         0.3063\nNGA037010  6.8573e-03 -1.7016e-06  1.4464e-04  5.7033e-01         0.5685\nNGA037011  7.1420e-02 -7.0727e-05  1.8175e-02  5.3028e-01         0.5959\nNGA037012 -3.9884e-01 -8.1252e-04  1.5628e-01 -1.0068e+00         0.3140\nNGA037013 -1.0343e-02 -6.6631e-06  1.7124e-03 -2.4978e-01         0.8028\nNGA037014 -1.7361e-01 -2.2215e-04  2.1265e-02 -1.1890e+00         0.2344\n\n\n\n4.6.2.1 Mapping the local Moran’s I for Non-functional Waterpoints\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nnf_wpt.localMI <- cbind(nga_wp,localMI_nf_wpt) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.2.2 Mapping both local Moran’s I values and p-values for Functional Waterpoints\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualization.\n\nnf_wpt_localMI.map <- tm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"Ii\", \n          breaks=c(-Inf, 0, 3, 6, 9, Inf),\n          title = \"Local Moran's I statistics\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I Statistics for Non-Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.7,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\nnf_wpt_pvalue.map <- tm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I P-values for Non-Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.7,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\ntmap_arrange(nf_wpt_localMI.map, nf_wpt_pvalue.map, asp=1, ncol=2)\n\n\n\n\nIi > 0 indicates a grouping of similar values (higher or lower than average). Most areas have positive local moran’s I statistics with 2 regions at the central area where there is high local moran’s I statistics.\nIi < 0 indicates a combination of dissimilar values (e.g. high values surrounded by low values). Approximately 1/3 of areas have negative local moran’s I statistics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.7 Creating a LISA Cluster Map",
    "text": "4.7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n4.7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of functional waterpoints by using moran.plot() of spdep.\n\nnci_f_wpt <- moran.plot(nga_wp$`wpt functional`, rswm_q,\n                  labels=as.character(nga_wp$ADM2_CODE), \n                  xlab=\"Functional_Waterpoints\", \n                  ylab=\"Spatially Lag functional_waterpoints\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high numbers of functional waterpoints and are surrounded by other areas that are higher than the average number of functional waterpoints. This are the high-high locations.\nMost of the LGAs have low number of functional waterpoints is surrounded by other LGAs with lower than average number of functional waterpoints (low-low locations).\nThe code chunk below plots the Moran scatterplot of non-functional waterpoints by using moran.plot() of spdep.\n\nnci_nf_wpt <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,\n                  labels=as.character(nga_wp$ADM2_CODE), \n                  xlab=\"Non-functional_Waterpoints\", \n                  ylab=\"Spatially Lag Non-functional_Waterpoints\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high numbers of non-functional waterpoints and are surrounded by other areas that are higher than the average number of non-functional waterpoints. This are the high-high locations.\nA good portion of LGA has low number of non-functionalwaterpoints is surrounded by other LGAs with lower than average number of non-functionalwaterpoints (low-low locations). Another good portion of LGA has low number of non-functional waterpoints is surrounded by other LGAs with higher than average number of non-functional waterpoints (high-low locations).\n\n\n4.7.2 Plotting Moran scatterplot with standardized variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe code chunk below does it for functional waterpoints\n\nnga_wp$Z.f_wpt <- scale(nga_wp$`wpt functional`) %>% \n  as.vector\n\nThe code chunk below does it for non-functional waterpoints\n\nnga_wp$Z.nf_wpt <- scale(nga_wp$`wpt non-functional`) %>% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nMoran scatterplot is plotted again by using the code chunks below for functional waterpoints\n\nnci2.f_wpt <- moran.plot(nga_wp$Z.f_wpt, rswm_q,\n                   labels=as.character(nga_wp$ADM2_CODE),\n                   xlab=\"z-functional_Waterpoints\", \n                   ylab=\"Spatially Lag z-functional_Waterpoints\")\n\n\n\n\nMoran scatterplot is plotted again by using the code chunks below for non-functional waterpoints\n\nnci2.nf_wpt <- moran.plot(nga_wp$Z.nf_wpt, rswm_q,\n                   labels=as.character(nga_wp$ADM2_CODE),\n                   xlab=\"z-Non-functional_Waterpoints\", \n                   ylab=\"Spatially Lag z-Non-functional_Waterpoints\")\n\n\n\n\n\n\n4.7.3 Preparing LISA map classes for Functional Waterpoints\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant_f_wpt <- vector(mode=\"numeric\",length=nrow(localMI_f_wpt))\n\nNext, derives the spatially lagged variable of interest (i.e. functional_waterpoints) and centers the spatially lagged variable around its mean.\n\nnga_wp$lag_f_wpt <- lag.listw(rswm_q, nga_wp$`wpt functional`)\nDV_f_wpt <- nga_wp$lag_f_wpt - mean(nga_wp$lag_f_wpt)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_f_wpt <- localMI_f_wpt[,1] - mean(localMI_f_wpt[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif_wpt <- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant_f_wpt[DV_f_wpt <0 & LM_I_f_wpt>0] <- 1\nquadrant_f_wpt[DV_f_wpt >0 & LM_I_f_wpt<0] <- 2\nquadrant_f_wpt[DV_f_wpt <0 & LM_I_f_wpt<0] <- 3  \nquadrant_f_wpt[DV_f_wpt >0 & LM_I_f_wpt>0] <- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant_f_wpt[localMI_f_wpt[,5] > signif_wpt] <- 0\n\n\n\n4.7.4 Plotting LISA map for Functional Waterpoints\nNow, we can build the LISA map by using the code chunks below.\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its functional waterpoints thematic map next to each other.\nThe code chunk below will be used to create such visualization for functional waterpoints\n\nf_wpt_plot <- wP_functional # previous plotted in Thematic Mapping\n\nf_wpt.localMI$quadrant <- quadrant_f_wpt\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(f_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_f_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_f_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\nLISAmap_f_wpt <- tm_shape(f_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_f_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_f_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(f_wpt_plot, LISAmap_f_wpt, \n             asp=1, ncol=2)\n\n\n\n\nIn central northern regions of Nigeria, we can find high number of functional waterpoints surrounded by areas with higher than average number of functional waterpoints (red colored areas).\n\n\n4.7.5 Preparing LISA map classes for Non-functional Waterpoints\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant_nf_wpt <- vector(mode=\"numeric\",length=nrow(localMI_nf_wpt))\n\nNext, derives the spatially lagged variable of interest (i.e. non-functional_waterpoints) and centers the spatially lagged variable around its mean.\n\nnga_wp$lag_nf_wpt <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)\nDV_nf_wpt <- nga_wp$lag_nf_wpt - mean(nga_wp$lag_nf_wpt)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_nf_wpt <- localMI_nf_wpt[,1] - mean(localMI_nf_wpt[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif_wpt <- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant_nf_wpt[DV_nf_wpt <0 & LM_I_nf_wpt>0] <- 1\nquadrant_nf_wpt[DV_nf_wpt >0 & LM_I_nf_wpt<0] <- 2\nquadrant_nf_wpt[DV_nf_wpt <0 & LM_I_nf_wpt<0] <- 3  \nquadrant_nf_wpt[DV_nf_wpt >0 & LM_I_nf_wpt>0] <- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant_nf_wpt[localMI_nf_wpt[,5] > signif_wpt] <- 0\n\n\n\n4.7.6 Plotting LISA map for Non-functional Waterpoints\nNow, we can build the LISA map by using the code chunks below.\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its functional waterpoints thematic map next to each other.\nThe code chunk below will be used to create such visualization for functional waterpoints\n\nnf_wpt_plot <- wp_nonfunctional # previous plotted in Thematic Mapping\n\nnf_wpt.localMI$quadrant <- quadrant_nf_wpt\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_nf_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_nf_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\nLISAmap_nf_wpt <- tm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_nf_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_nf_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(nf_wpt_plot, LISAmap_nf_wpt, \n             asp=1, ncol=2)\n\n\n\n\nIn several areas of Nigeria, we can find high number of non-functional waterpoints surrounded by areas with higher than average number of non-functional waterpoints (red colored areas)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.8 Hot Spot and Cold Spot Area Analysis",
    "text": "4.8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbors within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighborhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbors based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\nFixed distance is chosen as there is a large variation in polygon size (very large polygons at the edge of the study area and very small polygons at the center of the study area.\n\n4.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation.\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid. A fresh read is required as nga_wp geometry has been changed prior.\n\nnga_wp_ll <- read_rds(\"geodata/nga_wp.rds\")\nlongitude <- map_dbl(nga_wp_ll$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(nga_wp_ll$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n\n4.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbors of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbors list of class nb with a list of integer vectors containing neighbor region number ids by using knn2nb().\nReturn the length of neighbor relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.001  12.555  20.575  22.026  28.240  71.769 \n\n\nThe summary report shows that the largest first nearest neighbor distance is approximate 72km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.\n\n\n4.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)\nwm_d72\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 18114 \nPercentage nonzero weights: 3.031485 \nAverage number of links: 23.43338 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm72_lw <- nb2listw(wm_d72, style = 'B')\nsummary(wm72_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 18114 \nPercentage nonzero weights: 3.031485 \nAverage number of links: 23.43338 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  9  9 21 35 32 27 37 31 37 28 23 16 22 16 14 12 13 15 11 18 12 13 10  9 10 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n 9 11 15 12  9  9  7 11  9  9 10 22 12  9  7  4  3  4  9  9  9  8  3  5  4  3 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 3  4  2  4  8  4  5  1  6  7 10  4  3  3  1  1 \n5 least connected regions:\n330 650 652 723 739 with 1 link\n1 most connected region:\n296 with 70 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 773 597529 18114 36228 2612720\n\n\nThe output spatial weights object is called wm72_lw."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#computing-gi-statistics",
    "href": "Take-home_Ex/Take-home_Ex1.html#computing-gi-statistics",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.9 Computing Gi statistics",
    "text": "4.9 Computing Gi statistics\n\n4.9.1 Gi statistics using fixed distance for Functional Waterpoints\nThe code chunk below computes the Gi values for each of the LGAs for functional waterpoints\n\nfips <- order(nga_wp$ADM2_CODE)\ngi.fixed_f_wpt <- localG(nga_wp$`wpt functional`, wm72_lw)\ngi.fixed_f_wpt\n\n  [1] -4.750582213 -4.789996205 -3.094343509 -3.940665875 -4.946297098\n  [6] -4.994109267 -5.161614443 -4.585178373 -4.899383530 -2.492946546\n [11] -4.952309828 -4.692020397 -4.702100403 -4.413394795 -4.716816106\n [16] -4.903542830 -5.036796333 -1.528197524 -1.373655804 -1.693416190\n [21] -0.359385370 -1.799110510  0.057370265 -1.246508854 -0.404826205\n [26] -1.602987076 -1.899220105 -1.939768862 -1.987376117 -4.735520646\n [31] -3.631927429 -3.310652630 -4.788836949 -4.690707384 -4.287458270\n [36] -4.071608558 -4.212960290 -4.638349032 -4.491091455 -4.139506358\n [41] -4.409938277 -3.892951435 -4.013625871 -4.336728864 -3.676026899\n [46] -4.351967735 -3.777967763 -4.734373503 -3.338818450 -3.942224683\n [51] -4.539317983 -4.582938294 -3.732073649 -3.113413567 -4.269980522\n [56] -5.416104677 -5.003059009 -4.368895638 -5.407668336 -5.152580265\n [61] -5.401678897 -4.475430591 -5.220793054 -5.104971738 -5.044816957\n [66] -5.013860170 -5.095364504 -5.178861491 -5.166227958 -5.264228373\n [71] -4.936949849 -5.019066959 -4.911776681 -5.394480727 -5.210952184\n [76] -5.163353411  0.819374681  1.276549321  2.657886345  0.615253960\n [81] -0.096353825  1.565484308  6.153384482  1.600311882  2.236625541\n [86]  7.175247104  6.772073365  3.555857489  0.228230786  0.667379023\n [91]  3.837739793  3.936323187  2.308169422  1.059507496  1.988089979\n [96]  8.288901899 -2.990677159 -2.139859789 -2.780468609 -3.176729409\n[101] -2.780215052 -1.018333188 -1.424664661 -1.815854212  0.001213686\n[106]  0.079156264 -0.913061984  0.197605136 -1.179450650 -0.179793493\n[111]  0.722373990 -0.162919146 -1.128562735 -0.024620869 -2.269762025\n[116] -1.521923515  0.180329699 -1.180653115 -0.571188185 -0.288965794\n[121]  0.247076213  0.310823525  0.780670529 -2.048143086 -0.260170354\n[126] -1.397010822 -1.271086403 -1.328041445 -1.874231705 -1.631868234\n[131] -2.049388353 -1.148112598 -1.266496257 -1.624501877 -1.228045636\n[136] -0.442556162 -1.440923008 -0.963815505 -1.470559708 -1.874231705\n[141] -1.426772381 -0.557195553 -0.321376527  1.405402088 -1.616657954\n[146] -2.775499293  1.208529656  0.895296894  0.510794150  1.477884833\n[151] -0.485722059  1.527121586 -3.988689167 -4.194373563 -2.981775911\n[156] -3.190886193 -2.873888105 -3.529277866 -3.262844362 -3.030185038\n[161] -3.024181276 -4.284787202 -3.859724744 -3.104308178 -4.462010251\n[166] -4.915996759 -3.065243124 -2.691019747 -3.109521498 -3.068410377\n[171] -3.201550526 -3.530506194 -3.148092586 -2.727576804  1.415896006\n[176] -1.209536023 -2.135658344  0.598776062 -0.400534890 -0.815433370\n[181]  0.550672534 -1.549322147 -3.442394550  1.539787824 -1.878853487\n[186] -0.075522999 -1.565758940 -1.340110745 -2.014690528 -2.884619772\n[191] -2.767775806 -3.412199421 -2.570937668 -2.727514608 -2.348860142\n[196] -2.343602213 -2.671317065 -2.477253956 -2.004610097 -3.060484829\n[201] -1.647536998 -1.578816764 -1.489378520 -1.385086991 -2.497382474\n[206] -0.350604132  0.142642755 -0.910717473 -0.155914232 -0.066656524\n[211] -0.831263609 -0.687235094  0.072630725  0.026141008 -0.292902796\n[216] -0.562783781  0.438652992  0.068989533 -0.636354277  0.434924501\n[221] -0.423817237 -2.948974556 -4.171285703 -2.282620131 -2.680148257\n[226] -2.964302382 -4.655127497 -3.013618690 -2.943553639 -3.094866910\n[231] -1.764708091 -1.817236278 -3.024435090 -2.883029518 -4.969917008\n[236] -2.434018042 -3.808237038 -3.646956512 -0.542415932 -0.097208470\n[241] -0.514589683  0.774094789  0.748747025  1.323047897  0.084034218\n[246] -0.156375639  0.367008575  0.764479262  1.092925304  0.731337451\n[251]  1.297932517  0.036291887  1.501761361  0.979913532  0.054432975\n[256] -0.331696277  0.470218461 -0.100474782 -0.482522232 -0.742933973\n[261] -0.775481286 -0.746979603 -0.735027415 -0.452019825 -0.670878887\n[266] -0.469003629  0.962806708 -0.432948611  1.303971624 -0.446590084\n[271] -0.945237094  1.042761800  0.281399895 -0.130771664 -0.920927551\n[276]  0.923128842  0.431154180 -5.141731166 -5.520721087 -5.391201055\n[281] -5.292587557 -5.330005797 -5.362446847 -5.183778231 -5.188994137\n[286] -5.611327575 -5.276151826 -5.300731053 -4.950811458 -5.288409826\n[291] -5.266867665 -5.354919069 -5.266482059 -4.919774235 -4.774560638\n[296] -5.270270404 -5.310996110 -5.205685031 -5.161836887 -5.076247688\n[301] -4.910792746 -4.886011187 -4.760967349 -5.430378809 11.319403364\n[306]  8.043432051  9.734143520  6.472766456  5.706619086  7.792966184\n[311] 11.967225251  9.875448259 11.179193640  8.990135780  2.327198665\n[316]  5.218063891 11.707693497 10.724669787 11.359839185 11.850730003\n[321]  6.207272354 10.629933542 11.166691079 12.553437249  9.782258312\n[326]  5.853623244 12.860971158  5.854303368  7.243930735 -0.748249041\n[331]  0.213240111  3.086284616  3.251222234  2.230608115  3.168057135\n[336]  2.165190357  1.602123638  1.666931798  0.999546079  0.139933806\n[341]  1.761432565  3.312192353  2.230370837  3.073454011  3.474431797\n[346]  3.456756827  2.609948055  0.743520752  2.199928479  1.500122040\n[351]  2.113798652  0.853822791  7.224866263  5.883789415  3.897355622\n[356]  3.883302188  4.760121400  4.892035436  4.398205530  7.512252563\n[361]  5.270109627  4.457572874  2.180331206  4.804785797  8.430932147\n[366]  4.397631029  3.543102241  7.231975017  6.552747435  4.369573831\n[371]  3.335984339  3.779158704  4.347775527  3.101776880  4.002022274\n[376]  2.720337230  4.306071465  5.703354476  4.355924568  3.524323283\n[381]  6.067589572  6.660526734  5.210089990  4.255445580  3.768549810\n[386]  3.185561124  3.888510989  3.580379327  5.078429066  4.294227319\n[391]  3.798679745  4.212357513  4.025935480  6.287772903  5.627926205\n[396]  4.949753290  1.963494691  2.975971025  2.637818272  3.448632870\n[401]  3.278205222  3.510382493  2.830353241  3.465127721  3.674848897\n[406]  3.860020883  2.467985303  1.274032571  2.745093714  4.159173518\n[411]  3.343864227  2.787939663  3.322013925  2.802551873  2.967397902\n[416]  4.127209951  3.338946501  3.670228939  3.113027070  3.389466555\n[421]  3.194684279  2.502268174  5.241402400  2.206462371 -0.444923262\n[426] -0.371226848 -0.849390372 -0.377626573 -0.372811937 -1.115657555\n[431] -0.382705778 -0.539665712 -0.309505450 -1.027824869 -0.461844167\n[436] -0.600996375  0.032241259 -0.552624780 -0.587912374 -0.133162481\n[441] -0.435139616  0.025455536 -0.970608357 -1.783757748 -2.386282769\n[446] -1.278485118 -1.834507591 -3.145407944 -2.327942301 -2.747216429\n[451] -0.854931148 -1.007516672 -0.523276713 -1.002032903 -0.170329736\n[456] -2.306573863 -1.079460259 -0.854390164 -1.292616741 -2.760832446\n[461] -1.060712768 -0.004484768  0.362348829  1.888648155  2.220068949\n[466] -0.052500005  0.581286740  1.961108379  1.480190268  1.552209716\n[471]  0.927503979  0.852623578 -0.462245767  1.554321489  1.821012182\n[476]  0.359029132  1.446274111  0.401187280 -2.132999567 -1.721731798\n[481] -2.228524356 -1.717186566 -2.104868904 -1.904520066 -1.801698008\n[486] -1.897223701 -1.923450649  0.603752409  0.226510704 -0.448909513\n[491] -0.036296291 -0.054075177  0.378928199  0.628671841  0.085886228\n[496] -0.812465892  0.596892310  0.188341680 -0.515577897  1.119872472\n[501]  0.718222773 -0.561983830  0.910489707  0.486245380  0.018511389\n[506]  1.231386917  0.851025735 -0.601707015  0.826578847 -0.546778482\n[511] -0.565820785  0.955127894 -0.507681257 -0.113298412 -0.039845702\n[516]  0.991595260 -0.491310238 -0.631966176  0.051253766 -0.465671538\n[521] -0.234456337 -0.363574047 -0.345879383  0.811550161 -1.448597057\n[526] -1.656520604 -2.134861478 -1.791566794 -2.089512317 -2.172580828\n[531] -1.411977149 -1.022034143 -1.423120457 -1.831345546 -2.500886283\n[536] -2.388923443 -1.946408609 -2.461968520 -1.864587723 -2.306855001\n[541] -1.182558029 -1.237595314 -0.929993564 -0.930944961 -0.469809339\n[546] -0.455945085 -1.471738811 -1.004670341 -0.466039697  0.294465929\n[551] -1.313452916 -1.123547037 -1.252375698 -0.456116369 -0.366007351\n[556] -1.044505939 -0.771492514 -0.275254997  0.549448026  0.543139712\n[561]  0.586520007  0.778809601  0.666758793  0.892617994  0.805264047\n[566]  1.312906710  0.450118739  0.678414495  0.881719276  0.045667652\n[571]  0.073789458  0.809605641  0.979140398  1.463264645 -0.936560885\n[576] -1.187593129 -0.648250074 -0.586771417 -0.013329118 -0.404224802\n[581] -0.377439324 -0.472663697 -0.181050929  1.020001404  1.226588530\n[586]  1.331970746  0.310766696 -1.228945930 -0.527166502 -0.061249155\n[591]  0.278574682  0.326283694 -0.004919455 -0.444615667  1.417431259\n[596]  0.436117119  2.445597591  1.302981795  1.473195148  1.288699227\n[601]  1.771438623  1.669031175  2.315170190  1.162215511  0.942028703\n[606]  1.214430513  1.684256206  2.059071711  0.921872460  1.864346630\n[611]  0.597167696  0.565086805 -2.552455490 -2.800572929 -2.396073313\n[616] -3.389494956 -3.711661880 -3.406294276 -4.617889548 -3.756800320\n[621] -4.035687834 -4.048370015 -3.807653880 -4.039673152 -3.548415800\n[626] -3.611962658 -4.640764455 -4.217696610 -3.825815937 -3.873561723\n[631] -1.062207022 -1.051500217 -1.079349214 -0.855900564 -1.186091270\n[636] -0.780839775 -0.715147027 -1.311579170 -0.927020028 -0.972704667\n[641] -1.126238959 -1.280353911 -1.204906118 -0.394223811 -0.538746657\n[646] -1.152904648 -1.002829125 -0.904515480  0.471464592  0.454041795\n[651]  0.590206584  1.195099579  0.068563401  0.350807406  0.682558590\n[656]  0.493890144 -0.582779888 -0.487138000 -0.865188236  3.136350653\n[661] -0.344731722 -1.214805754 -0.809452866 -1.043337498 -0.576960157\n[666] -0.980810830 -0.841100101  4.129664495  3.755366219  0.542123830\n[671]  5.599818790 -0.795107133 -0.589175356  0.564210620  0.020420637\n[676]  1.643364454  0.112656382  0.578065313 -0.640323810  0.978469895\n[681]  0.881745300  0.562195830  0.123966383  0.043797890 -0.242895813\n[686]  1.355142507  0.527511956 -2.832250501 -0.516543547 -0.922309172\n[691] -0.856002211 -1.031304143 -0.734739628 -0.465091869  1.739318565\n[696]  2.817906449  2.800053376  3.033899273  5.044847379  7.021195169\n[701] 10.077716841 12.034369708  8.977858183  3.458353616 -0.394715192\n[706] -1.183056797 -1.183056797 -1.675272061 -1.868682153 -1.449884535\n[711] -1.449884535 -2.155494456 -1.859039840 -1.867410525 -1.884494242\n[716] -1.783413513 -0.007314641 -1.756243155 -1.108821641 -0.111678605\n[721] -0.532860620 -0.091176295 -0.042579268 -0.075496483 -0.740013948\n[726] -0.024311391 -1.449884535 -1.569862767 -1.402448006 -1.876104925\n[731] -1.735089882 -1.524609945 -1.507202355 -1.648082547 -1.273282907\n[736] -0.519970261 -0.464826729 -1.023200952  0.129599432  0.272478507\n[741]  0.015736384 -0.233820138  0.246487321  0.144706589  0.078913531\n[746]  0.699753166 -0.665396418 -3.425646062 -2.290498647 -1.699406265\n[751] -1.210539582 -3.328969635 -3.335819398 -3.638624952 -2.812134049\n[756] -3.027903114 -2.686757956 -3.119429989 -3.948929803 -3.086263890\n[761] -2.577374828 -1.869581016 -2.126395053 -2.234660472 -2.720768726\n[766] -2.506549475 -2.067024434 -1.191055146 -2.076795743 -1.838914080\n[771] -1.821752789 -1.830183203 -2.450750900\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [31] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [46] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [76] Low  High High High Low  Low  High High High Low  High High High Low  High\n [91] High High High High High High Low  Low  Low  Low  Low  Low  Low  Low  High\n[106] High Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  High\n[121] Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low \n[136] Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High High\n[151] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[166] Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High High High\n[181] Low  High Low  Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[196] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  High\n[211] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[226] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[241] Low  Low  High Low  Low  Low  High High High High High High Low  High Low \n[256] High Low  Low  Low  Low  High Low  Low  Low  High High High High High Low \n[271] High Low  High Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[286] Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[301] Low  Low  Low  Low  High High High High High High High High High High High\n[316] High Low  High High High High High High High High High High High High Low \n[331] Low  High High High High Low  High High High Low  High High High High High\n[346] High High High High High High High High High High High High High High High\n[361] High High Low  Low  High High High High High High Low  Low  Low  Low  High\n[376] High Low  High High High High High Low  High High High High High High Low \n[391] High High High High High High High High High High High Low  Low  Low  Low \n[406] Low  High High High High High High High High High High High High High High\n[421] Low  Low  Low  High Low  High Low  High Low  Low  High High Low  Low  Low \n[436] Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[451] High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High\n[466] High High High Low  Low  High High High High High High High High Low  Low \n[481] High Low  Low  Low  Low  Low  Low  High Low  Low  High Low  Low  Low  High\n[496] High High Low  Low  Low  High Low  High High Low  High High Low  Low  Low \n[511] Low  High Low  Low  Low  High Low  Low  High High High Low  Low  High Low \n[526] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[541] High High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[556] Low  High High High Low  High High High High High High High High Low  High\n[571] High Low  Low  High High Low  High High Low  Low  Low  High High High Low \n[586] Low  Low  Low  Low  Low  High Low  High Low  High High High High Low  High\n[601] Low  High High High Low  High High High High High High High Low  Low  Low \n[616] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low \n[631] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[646] Low  Low  Low  High High High High Low  Low  Low  High High High High High\n[661] High Low  Low  Low  Low  Low  Low  Low  High Low  High Low  Low  High Low \n[676] Low  Low  Low  Low  High High Low  High High High High High Low  High High\n[691] Low  Low  Low  Low  High Low  Low  High High High High High Low  Low  Low \n[706] Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[721] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[736] Low  Low  High Low  High High High Low  High High Low  Low  Low  High Low \n[751] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[766] Low  Low  Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt functional`, listw = wm72_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding nga_wp sf data frame by using the code chunk below.\n\nf_wpt.gi <- cbind(nga_wp, as.matrix(gi.fixed_f_wpt)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed_f_wpt.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed_f_wpt) into r matrix object by using as.matrix(). Next, cbind() is used to join nga_wp@data and gi.fixed_f_wpt matrix to produce a new SpatialPolygonDataFrame called f_wpt.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n4.9.2 Gi statistics using fixed distance for Non-functional Waterpoints\nThe code chunk below computes the Gi values for each of the LGAs for non-functional waterpoints\n\nfips <- order(nga_wp$ADM2_CODE)\ngi.fixed_nf_wpt <- localG(nga_wp$`wpt non-functional`, wm72_lw)\ngi.fixed_nf_wpt\n\n  [1] -3.380059734 -3.470321267 -0.682027168 -2.580765996 -2.733360867\n  [6] -3.796521918 -3.682181842 -4.550525968 -3.341095288 -0.589163130\n [11] -3.864641280 -3.447120859 -2.951498982 -3.318339711 -4.923572348\n [16] -3.664229904 -3.467518021 -2.030191048 -2.477226117 -2.534453096\n [21] -0.455056239 -2.738821858  0.711944774 -1.546479002 -0.749567933\n [26] -2.507241912 -2.843287484 -2.958714306 -2.949330818 -1.514519229\n [31] -0.299815824 -0.318320495 -1.957359094 -2.207022949 -1.050091650\n [36] -0.267306984 -0.623252204 -2.456978938 -1.186343601 -1.967901316\n [41] -1.454809938 -0.896390925 -0.138217485 -1.539332060 -0.006785383\n [46] -0.696185182 -0.191412548 -2.022511966 -0.047336693 -0.877739729\n [51] -2.020477626 -2.096620225  0.225975931 -0.027973960 -0.511112218\n [56] -6.035899720 -5.934326141 -4.873460968 -6.042176829 -6.181294594\n [61] -6.320924011 -5.352115731 -5.922624093 -5.616857560 -5.606515866\n [66] -5.656617664 -5.566625845 -5.999050186 -5.733991934 -5.863726164\n [71] -5.423127731 -5.454532436 -5.324939045 -6.215157511 -5.641714440\n [76] -5.854748681  2.426681285 -0.959722330  2.493788959 -0.225572817\n [81]  0.333177760 -0.059436166 -0.070895494 -0.605148892 -0.281358014\n [86]  0.848729139 -0.493350695  0.018694041  1.535986180 -0.394928823\n [91]  0.665897757 -0.371767020  1.500497500 -0.367395062 -1.133626267\n [96]  0.776089334 -3.258918043 -2.486056540 -3.390133272 -3.588397390\n[101] -3.367989091 -1.223587621 -0.223901586 -0.332962011  1.840525408\n[106]  1.803376151  0.314646875  0.150053586  0.273001326  2.277126976\n[111]  2.771821229  1.568736862  0.252092572  0.572443402 -2.093851548\n[116] -1.168987747  1.910374182 -1.188727918 -0.075440830  1.453423490\n[121]  1.922261349  2.404524083  4.118764935 -2.891216152  0.460860472\n[126] -2.457419080 -2.106534234 -2.053597249 -2.524445633 -2.229413652\n[131] -2.767196134 -2.447588786 -2.338972745 -2.463923536 -2.313859840\n[136] -0.086828121 -2.570884252 -2.027851790 -2.159361219 -2.524445633\n[141] -2.550397321 -0.600126323  0.840595475  3.629433235  0.692245750\n[146]  0.183875131  3.763447742  2.876134560  3.600916366  3.523982777\n[151]  1.304253205  2.709432530 -4.092361040 -4.340853743 -2.996332559\n[156] -2.853730557 -2.502466181 -3.411680085 -3.018068766 -2.780015909\n[161] -3.012773189 -4.698901812 -4.169508256 -2.821579124 -4.860304152\n[166] -5.371236456 -3.390914936 -2.420156345 -2.793877263 -2.842514483\n[171] -3.120846868 -3.695611894 -2.630106568 -2.688653001  2.673399426\n[176] -0.013749451 -0.776426342  1.273886794  0.604645839  0.254261737\n[181]  2.338829188 -1.592825991 -2.827698492  2.700427411 -1.000191906\n[186] -0.147803067 -0.760424707  1.863245525 -0.919295798 -2.582141306\n[191] -2.117886340 -3.592259128 -1.810752342 -1.872209194 -0.901918210\n[196] -0.425930912 -2.482611983 -2.230920679 -1.028653755 -2.794518876\n[201]  0.115323963  0.517483163  1.368832219  1.118640883 -1.587844887\n[206]  4.338792936  5.434208074  3.662909209  4.471689000  5.094259006\n[211]  3.071628696  3.875821728  5.263701786  4.681312813  4.243581887\n[216]  4.164599199  5.998649324  5.399847857  3.872781317  5.535715328\n[221]  4.233612675 -2.686582188 -4.368315084 -2.655463714 -3.137119046\n[226] -3.368181299 -5.552454931 -3.273064832 -2.619183872 -2.656629537\n[231] -2.205173635 -1.747239463 -3.435484399 -2.866582804 -5.563496731\n[236] -2.226870754 -4.397480861 -3.990758755 -0.182047437  1.198020805\n[241]  0.121192051  5.980410682  5.707401115  5.307333137  1.940665281\n[246]  1.558222263  2.651562748  5.378512525  4.654192358  3.638525311\n[251]  5.346818355  4.955656841  5.433018688  5.478298292  0.553586621\n[256]  0.511538911  0.420324321  1.315717117  0.336684068  0.082571826\n[261] -0.128179740  0.037218303  0.116206915  0.131265055 -0.154502935\n[266]  0.455621216  2.988978651 -0.202329062  3.201622016  1.845572357\n[271]  1.221434980  4.808362173  2.671525155  3.200126075  0.939693664\n[276]  3.027921348  2.354106111 -4.035450001 -4.647306805 -4.949882616\n[281] -4.019322320 -5.650406496 -5.539476982 -4.278231758 -4.670828979\n[286] -5.388600395 -5.462052410 -5.174283834 -4.154507197 -5.498949556\n[291] -5.517020926 -5.626782019 -3.950074837 -5.387739941 -4.794223406\n[296] -5.358110942 -5.747121700 -5.580992844 -5.357132821 -5.338282965\n[301] -4.274996333 -4.059771272 -4.263094657 -5.521587631  0.789151659\n[306]  1.870952430  0.210333884  0.159472405 -0.203471219  0.416951824\n[311]  1.409357156  1.330197417  1.345270142  1.473032500 -0.582681618\n[316]  1.608854312  0.704505162  0.517509062  1.360908262  1.426954121\n[321]  1.330600399  0.666167796  0.912682834  1.169032282  0.921113297\n[326]  0.759290043  0.856143371  1.770460310 -0.534199682 -0.231506219\n[331]  1.845332667  3.614850921  0.405467331  4.279739391  1.655668322\n[336]  2.864359824  2.092505811  1.599640064  3.549452838  1.769789101\n[341]  2.864644749  2.277504564  0.278639449  3.235680339 -0.439020953\n[346]  1.862884359  3.155217694  3.009916882  3.776987397  2.681555163\n[351]  3.562263557  4.120735903 -0.149161781 -0.281603859 -1.770381649\n[356] -0.761831452 -1.299551089 -1.097118454 -1.896418666 -0.046380170\n[361] -1.426084465 -1.178438011 -0.050433088 -1.530236274  0.099357126\n[366] -0.542169146 -1.534618097 -0.080283202 -1.160436527 -1.911847815\n[371] -2.260505313 -2.081799688 -2.071365630 -2.099702038 -0.679590974\n[376] -1.085350813 -2.075566823 -0.441161273 -1.653779076 -1.937209587\n[381] -0.006869681 -0.108246678 -1.360219878 -0.827835772 -1.863842732\n[386]  0.969115212 -1.820800384 -0.193739396  0.092546469 -2.062968306\n[391] -1.659964924 -1.406567763 -0.135560618 -1.153186211 -1.383888765\n[396] -1.290907714  0.802204033  0.560275954  0.360616912  1.006238243\n[401]  0.320487229 -0.369585464  2.291755296  2.405032809  1.595099700\n[406]  1.825270133 -0.789478339 -0.535960654  2.374748761  1.298894415\n[411]  0.732594952 -1.242374156 -0.425441245  1.390596619 -0.162600929\n[416] -0.181942635 -0.839382911  1.447930044 -0.848581834 -1.304730059\n[421]  1.212438644  2.405229960  2.155603308 -0.234832047  1.005441188\n[426]  0.877687116 -0.288788456  1.231966351  1.199286883  0.128575814\n[431]  0.626022336  1.280209158  1.563773636 -0.162012136  1.674070429\n[436]  0.892745658  0.885331118  0.556597921  1.825573061  0.131688356\n[441]  1.128703743  0.263977913  2.034232668 -0.284061321 -1.556689520\n[446] -0.064312063 -0.963706349 -3.212588185 -1.632482484 -2.559948477\n[451]  2.632036110  1.264552890  0.265816090  0.083616838  3.310008007\n[456] -1.378450386  2.167501842  2.075628907  1.242741468 -2.041712645\n[461]  0.858839647  3.742458698  3.992446750  5.162047444  3.912326416\n[466]  4.139026709  4.480476711  5.977391682  5.127787367  5.173225442\n[471]  5.377063969  5.868493775 -0.271414777  3.211881308  5.781290483\n[476]  4.897475043  4.893076188  1.093264759 -2.590641453 -2.092258214\n[481] -2.730459737 -2.102110538 -2.646649406 -2.258759895 -2.155402745\n[486] -2.372651733 -2.197394091  2.370667004  2.377883445  1.139956984\n[491]  1.653640545  0.944614999  1.633785682  2.078326842  1.179845891\n[496] -0.114720760  1.684508300  1.483929353  1.260296800  3.812315771\n[501]  0.525818938  0.287232673  1.596388703 -0.013204782 -0.180275076\n[506]  0.973020939  0.479882760  0.945407246  0.721357121  0.186931470\n[511]  0.071846400  1.205057029 -0.008262037  0.262149990 -0.078112931\n[516]  2.309302118 -0.778436587 -0.960561704 -0.035778858  0.356315110\n[521] -0.633759790  1.299643292  1.338474683 -0.218532750 -1.048812552\n[526] -2.034368549 -3.154440536 -2.192713811 -2.518652921 -2.681517141\n[531]  1.117166311  0.196304228 -0.383926777 -1.641513991 -3.453101399\n[536] -3.066610795 -1.616833398 -3.417677873 -2.039377800 -3.169579875\n[541]  2.396092740  2.286834627  1.966569902  2.352146819  4.069411869\n[546]  4.145265397  0.195081136  2.938690985  3.913171862  4.578048306\n[551]  1.218125246  1.482570687  1.326479354  3.877161778  3.821585648\n[556]  1.505866203  2.630150063  1.863210564  3.106801675  4.635068034\n[561]  4.736980037  5.356940930  4.847477765  5.646212959  4.872211599\n[566]  5.391293528  3.402557732  5.175462647  5.062847217  3.420181488\n[571]  4.089345736  6.558693333  4.339589859  6.645652219 -1.022100095\n[576] -1.140391112 -0.497909427 -0.038811603  0.407471426 -0.036279962\n[581] -0.034723234 -0.236166200  1.367049636  3.229361854  3.555426425\n[586]  4.161547167  0.688935932 -0.166134426  0.297890984 -0.253702431\n[591]  1.859595925  1.550400661 -0.139146006 -0.432926043  4.194597931\n[596]  2.367111477  1.394873069  3.748646949  1.386168494  2.088354340\n[601]  2.231543735  0.688294833  1.976952184  2.296260892  2.541595822\n[606]  2.663986832  3.154429791  3.311141357  2.995481393  2.676270856\n[611]  2.154786925  1.775896776 -3.548107907 -3.436825623 -3.097465228\n[616] -4.018960161 -3.005997609 -4.114722870 -3.859176211 -2.773576756\n[621] -3.969474772 -2.277620255 -3.665526423 -4.145710585 -2.792817627\n[626] -3.218378003 -3.712623756 -2.710004032 -3.369988973 -2.813675620\n[631] -0.391207359 -0.608716494 -1.194744177 -1.035281064 -0.929349982\n[636] -0.577210144  0.252632276 -0.884035195 -1.110147792 -0.361312214\n[641] -0.185167432 -0.689466945 -0.676658432  0.370039028 -1.135353658\n[646] -1.033842403 -0.691531349 -0.203942258  1.353522051  1.684431850\n[651]  2.579147641  1.119409668  1.828340042  0.908076472  1.926861943\n[656]  0.685835744  0.716681697 -0.179463075 -0.991321668 -1.457180348\n[661] -1.734939369 -1.944970846 -0.197837042 -1.946351402 -1.547116200\n[666] -2.188840636 -0.131148912  0.236844073 -0.973228817 -0.264187258\n[671]  0.009530063 -0.587336899 -1.687777413  0.176602608 -0.151643129\n[676] -0.504510898  0.187037819 -0.509937179 -0.796321878 -0.560208054\n[681] -0.540601233 -0.908930374 -0.444907208 -0.596787747 -1.221890911\n[686] -1.026238884 -1.189032325  0.248233055 -0.077201579  1.181293794\n[691] -0.374645495 -0.707571781  0.200496682 -1.007988832  1.294413953\n[696]  1.238938711  1.532617709  1.721868272  2.534827972  1.832244931\n[701]  1.794980215  1.760082818  0.722605370 -0.329166832 -1.192355910\n[706] -1.593486311 -1.593486311 -2.256462329 -2.524445633 -1.952882705\n[711] -1.952882705 -2.730980900 -2.135150856 -2.221614678 -2.156490462\n[716] -2.116467448  0.323516674 -2.447094275 -0.876537600  0.440694582\n[721] -0.293656157 -0.075992761  0.143553425 -0.642860616  0.621176122\n[726]  1.292247029 -1.952882705 -2.188840636 -2.067121588 -2.644650260\n[731] -2.567801215 -2.282357247 -2.107098386 -2.490771564 -1.892914538\n[736] -1.047352029 -0.294526927 -1.035745192  0.629224825  1.657733172\n[741]  2.129349181  1.816508812  2.906157378  3.162041211  3.440088285\n[746]  2.912953868  3.015563648  0.037965862 -3.024430382 -2.365289762\n[751]  1.356178252 -2.197862792 -3.071445074 -1.959758858  0.323577337\n[756]  0.256373490  0.351782030 -0.016193068 -1.936577211 -3.876929808\n[761] -3.905415966 -2.469058329 -1.953514136 -2.395895189 -2.734970804\n[766] -2.608842400 -1.624818339  0.985477818 -3.092673470 -2.372515183\n[771] -2.030508432 -2.982181949 -0.133373018\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  High Low  Low  Low  High Low  Low  High High High Low \n [16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [31] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High High\n [46] Low  High High High Low  High Low  Low  High High Low  Low  Low  Low  Low \n [61] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [76] Low  Low  Low  Low  Low  High Low  High Low  Low  Low  Low  High Low  High\n [91] Low  High Low  Low  Low  High Low  Low  Low  High Low  Low  High Low  High\n[106] High High High Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[121] High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[136] Low  Low  Low  Low  Low  Low  Low  High High High Low  High High High High\n[151] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low \n[166] Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High Low  High\n[181] Low  High Low  Low  High High High High Low  Low  Low  Low  Low  Low  Low \n[196] Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low  High High\n[211] Low  High Low  High High High Low  Low  Low  High High Low  Low  Low  Low \n[226] Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High\n[241] High Low  High High High Low  Low  High High Low  High High Low  High Low \n[256] High Low  Low  Low  Low  High Low  Low  High High High High High High High\n[271] High Low  High High High High High Low  Low  Low  Low  Low  Low  Low  Low \n[286] Low  Low  Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low \n[301] Low  Low  Low  Low  High High High Low  Low  Low  High High High Low  Low \n[316] High Low  Low  Low  Low  High High Low  Low  Low  High High High High High\n[331] Low  High Low  High Low  High High High High High High High Low  High High\n[346] Low  High High High High High Low  Low  High High Low  High Low  High High\n[361] High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High Low \n[376] High Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High High Low \n[391] Low  Low  High High High Low  Low  Low  High High High Low  Low  Low  High\n[406] Low  High High Low  Low  Low  Low  Low  High High Low  Low  High Low  Low \n[421] High Low  Low  Low  High High Low  High High Low  High High High High Low \n[436] High High High Low  High Low  Low  Low  Low  High High High Low  Low  Low \n[451] High Low  High Low  High Low  Low  Low  High Low  Low  Low  High Low  High\n[466] High High High Low  Low  High High High High High High High High Low  Low \n[481] High Low  Low  Low  Low  Low  Low  High High High High Low  Low  Low  High\n[496] High High High High Low  High High Low  Low  Low  High High Low  Low  Low \n[511] Low  High High High Low  High High Low  Low  High Low  Low  Low  High Low \n[526] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High\n[541] High High High High Low  Low  High High High High High High High High High\n[556] High High High High Low  High High High High Low  High High High High High\n[571] High Low  High High High Low  High High Low  Low  Low  High High High Low \n[586] High Low  Low  Low  Low  High Low  High High High High High High High Low \n[601] High High High High Low  High High High High High High High Low  Low  Low \n[616] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[631] High High Low  Low  High High Low  High Low  Low  Low  Low  Low  High High\n[646] High Low  High High High High High Low  High High High High High High High\n[661] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[676] Low  Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  High High\n[691] Low  High Low  High High Low  High High Low  High High Low  Low  Low  Low \n[706] Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High Low  Low  Low \n[721] High High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[736] Low  Low  High Low  High High High High High High High High High High Low \n[751] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[766] Low  Low  Low  High Low  Low  High High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non-functional`, listw = wm72_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding nga_wp sf data frame by using the code chunk below.\n\nnf_wpt.gi <- cbind(nga_wp, as.matrix(gi.fixed_nf_wpt)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed_nf_wpt.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join nga_wp@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nf_wpt.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n4.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix for functional waterpoint.\n\nf_wpt_plot <- wP_functional # plotted prior\n\nGimap <-tm_shape(f_wpt.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"equal\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(f_wpt_plot, Gimap, asp=1, ncol=2)\n\n\n\n\n\nf_wpt_plot <- wP_functional # plotted prior\n\nGimap <-tm_shape(f_wpt.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"equal\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n        tm_layout(main.title = \"Local GI for Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\ntmap_arrange(f_wpt_plot, Gimap, asp=1, ncol=2)\n\n\n\n\nThe hot spots for functional waterpoints are in the northern central region of Nigeria. significant and positive if location i is associated with relatively high values in the surrounding locations.\nThe cold spots for functional waterpoints are in the southern central region of Nigeria. significant and negative if location i is associated with relatively low values in surrounding locations.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix for non-functional waterpoint.\n\nnf_wpt_plot <- wp_nonfunctional # plotted prior\n\nGimap <-tm_shape(nf_wpt.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"equal\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local GI for Non-functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n    \n\ntmap_arrange(nf_wpt_plot, Gimap, asp=1, ncol=2)\n\n\n\n\nThe hot spots for non-functional waterpoints are in the central eastern and central region of Nigeria. significant and positive if location i is associated with relatively high values in the surrounding locations.\nThe cold spots for non-functional waterpoints are in the southern central region of Nigeria. significant and negative if location i is associated with relatively low values in surrounding locations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "",
    "text": "The process of creating regions is called regionalization. A regionlization is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location. In this sense, regionalization embeds the same logic as standard clustering techniques, but also applies a series of geographical constraints. Often, these constraints relate to connectivity: two candidates can only be grouped together in the same region if there exists a path from one member to another member that never leaves the region. These paths often model the spatial relationships in the data, such as contiguity or proximity. However, connectivity does not always need to hold for all regions, and in certain contexts it makes sense to relax connectivity or to impose different types of geographic constraints.\n\n\n\n\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set. We will rename this file to “geo_export”.\n\n\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries. We will use the file “nga_polnda_adm2_1m_salb”."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex2.html#objectives",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.2 Objectives",
    "text": "1.2 Objectives\nIn this take-home exercise you are required to regionalize Nigeria by using, but not limited to the following measures:\n\nTotal number of functional water points in LGA\nTotal number of nonfunctional water points in LGA\nPercentage of functional water points\n\nequates to “number of functional water points in LGA / Total number of functional water points in LGA”\n\nPercentage of non-functional water points\n\nequates to “number of nonfunctional water points in LGA” / “Total number of nonfunctional water points in LGA”\n\nPercentage of main water point technology (i.e. Hand Pump)\n\nequates to “number of water points in LGA using Hand Pump” / “Total number of functional water points in LGA”\n\nPercentage of usage capacity (i.e. < 1000, >=1000)\n\nPercentage of usage capacity (< 1000) equates to “number of water points in LGA with usage capacity < 1000” / “Total number of functional water points in LGA”\nPercentage of usage capacity (>= 1000) equates to “number of water points in LGA with usage capacity >= 1000” / “Total number of functional water points in LGA”\n\nPercentage of rural water points\n\n“Percentage of is_urban == False in LGA” / “Total number of functional water points in LGA”\n\n\nThe areas within a region must be geographically connected (the spatial contiguity constraint).\n\n1.2.1 Installing and loading R packages\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2, GGally,and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, heatmaply, palmerpenguins, and patchwork\n\nCluster analysis\n\ncluster\nClustGeo\n\nRapid Exploratory Data Analysis\n\nfunModeling\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(sf, spdep, tmap, tidyverse, tmap, funModeling, rgdal, ClustGeo,\n               ggpubr, cluster, factoextra, NbClust, heatmaply,\n               corrplot, psych, GGally, palmerpenguins, patchwork)\n\nNote: With tidyverse, we do not have to install readr, ggplot2 and dplyr packages separately. In fact, tidyverse also installs other very useful R packages such as tidyr."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex2.html#importing-geospatial-data",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.3 Importing Geospatial Data",
    "text": "1.3 Importing Geospatial Data\nIn this in-class data, two geospatial data sets will be used as mentioned in 1.1.1, they are:\n\ngeo_export\nnga_polnda_adm2_1m_salb\n\n\n1.3.1 Importing water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp = st_read(dsn = 'geodata',\n             layer = 'geo_export',\n             crs = 4326) %>%\n    filter(clean_coun == 'Nigeria')\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\ncrs is set to 4326 which will be the same for nga in 1.3.2\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga = write_rds(wp, 'geodata/wp_nga_ex2.rds')\n\n\nst_crs(wp_nga)\n\n\n\n1.3.2 Importing Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga = st_read(dsn = 'geodata',\n              layer = 'nga_polnda_adm2_1m_salb',\n              crs = 4326)\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_polnda_adm2_1m_salb shapefile into R environment and save the imported geospatial data into simple feature data table.\ncrs is set to 4326 which is the same for wp_nga\n\n\nst_crs(nga)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex2.html#data-wrangling",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.4 Data Wrangling",
    "text": "1.4 Data Wrangling\n\n1.4.1 Sorting and comparing number of observations\nThis section involves sorting Nigeria LGA observation by column ADM2_CODE before comparing numbers of unique observations.\nThe code chunk below sort the dataset according to field ADM2_CODE\n\nnga <- (nga[order(nga$ADM2_CODE), ])\n\nThe code chunk below extract the unique rows with reference to field ADM2_CODE\n\nuniq_nga <- unique(nga, by=nga$ADM2_CODE)\n\nAfter comparison, nga has 773 observations of 13 variables which is the same as as uniq_nga. Hence, we can conclude that there is no duplicate observations.\n\n\n1.4.2 Re-coding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown so that we can so not need to omit rows with NA in the selected fields (status_cle and X_water_tec) and remove the need to create another subset of data solely comprising of “completed” data (rows without NA).\n\nwp_nga <- read_rds(\"geodata/wp_nga_ex2.rds\") %>%\n    mutate(status_cle = replace_na(status_cle, \"Unknown\")) %>%\n    mutate(X_water_tec = replace_na(X_water_tec, \"Unknown\"))\n\n\n\n1.4.3 EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga quickly.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\nfreq(data=wp_nga, \n     input = 'X_water_tec')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex2.html#extracting-water-point-data",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.5 Extracting Water Point Data",
    "text": "1.5 Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\n1.5.1 Extracting functional water points\nIn the code chunk below, filter() of dplyr is used to select functional water points. You will be able to understand what are considered as functional wpt in this take-home exercise.\n\nwpt_func <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_func, \n     input = 'status_cle')\n\n\n\n1.5.2 Extracting non-functional water points\nIn the code chunk below, filter() of dplyr is used to select non-functional water points. You will be able to understand what are considered as nonfunctional wpt in this take-home exercise.\n\nwpt_nonfunc <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunc, \n     input = 'status_cle')\n\n\n\n1.5.3 Extracting water points with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n1.5.4 Extracting water points using Hand Pump\nWe extract the rows with “Hand Pump” under the field X_water_tec\n\nwpt_handpump <- wp_nga %>%\n  filter(X_water_tec == \"Hand Pump\")\n\n\n\n1.5.5 Extracting Rural water points\nWe extract the rows with “False” under the field is_urban\n\nwpt_rural <- wp_nga %>%\n  filter(is_urban == \"False\")\n\n\n\n1.5.6 Extracting water points Usage Capacity < 1000\nWe first set the field usage_cap to integer. Subsequently, we extract rows where usage cap < 1000.\n\nwp_nga$usage_cap <- as.integer(wp_nga$usage_cap)  \nwpt_usecapless1k <- wp_nga %>%\n  filter(usage_cap < 1000)\n\n\n\n1.5.7 Extracting water points Usage Capacity >= 1000\nAs the field usage_cap is already in integer, we can proceed to extract rows where usage cap >= 1000.\n\nwpt_usecapequalormore1k <- wp_nga %>%\n  filter(usage_cap >= 1000)\n\n\n\n1.5.8 Performing Point-in-Polygon Count\nst_intersects() return a list where the list contains the indexes of the point geometry that is found inside the polygon geometry.\nlengths() returns the number of element inside the list which represent the number of water point within the polygon\n\nnga_wp <- nga %>% \n    mutate(`total wpt` = lengths(\n        st_intersects(nga, wp_nga))) %>%\n    mutate(`wpt functional` = lengths(\n        st_intersects(nga, wpt_func))) %>%\n    mutate(`wpt non-functional` = lengths(\n        st_intersects(nga, wpt_nonfunc))) %>%\n    mutate(`wpt unknown` = lengths(\n        st_intersects(nga, wpt_unknown))) %>%\n    mutate(`wpt unknown` = lengths(\n        st_intersects(nga, wpt_unknown))) %>%\n    mutate(`wpt cap < 1000` = lengths(\n        st_intersects(nga, wpt_usecapless1k))) %>%\n    mutate(`wpt cap >= 1000` = lengths(\n        st_intersects(nga, wpt_usecapequalormore1k))) %>%\n    mutate(`wpt rural` = lengths(\n        st_intersects(nga, wpt_rural))) %>%\n    mutate(`wpt hand pump` = lengths(\n        st_intersects(nga, wpt_handpump)))\n\n\n\n1.5.9 Derive new variables using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of total wpt. In general, the LGAs with relatively higher total number of water points will also have higher number of wpt functional, wpt rural, wpt hand pump and etc.\nIn order to overcome this problem, we will derive the percentage of each variable by using the code chunk below. The definitions are listed below:\n\nPercentage of functional water points pct functional equates to “number of functional water points in LGA / Total number of functional water points in LGA”\nPercentage of non-functional water points pct non-functional equates to “number of nonfunctional water points in LGA” / “Total number of nonfunctional water points in LGA”\nPercentage of main water point technology (i.e. Hand Pump) pct hand pump equates to “number of water points in LGA using Hand Pump” / “Total number of functional water points in LGA”\nPercentage of usage capacity (< 1000) pct cap < 1000 equates to “number of water points in LGA with usage capacity < 1000” / “Total number of functional water points in LGA”\nPercentage of usage capacity (>= 1000) pct cap >= 1000 equates to “number of water points in LGA with usage capacity >= 1000” / “Total number of functional water points in LGA”\nPercentage of rural water points pct rural “number of is_urban == False in LGA” / “Total number of functional water points in LGA”\n\n\nnga_wp <- nga_wp %>%\n    mutate(`pct functional` = `wpt functional`/`total wpt`) %>%\n    mutate(`pct non-functional` = `wpt non-functional`/`total wpt`) %>%\n    mutate(`pct rural` = `wpt rural`/`total wpt`) %>%\n    mutate(`pct cap < 1000` = `wpt cap < 1000`/`total wpt`) %>%\n    mutate(`pct cap >= 1000` = `wpt cap >= 1000`/`total wpt`) %>%\n    mutate(`pct hand pump` = `wpt hand pump`/`total wpt`)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/wp_nga_ex2.rds\")\n\nBefore you end this section, please remember to delete away all the raw data. Notice that the only data file left is wp_nga_ex2.rds and it’s file size is around 2.1MB.\n\nnga_wp <- read_rds(\"geodata/wp_nga_ex2.rds\")\n\nThe code chunk below selects the required fields and assign them to nga_wp_Ex2\n\nnga_wp_Ex2 <- select(nga_wp, -c(`wpt rural`,`wpt cap < 1000`,`wpt hand pump`,`CNTRY_CODE`,`CNTRY_NAME`,`ADM1_NAME`,`ADM1_CODE`,`ADM2_NAME`,`HRname`,`HRpcode`,`HRparent`,`Shape_Leng`,`ADM2_New`,`Shape_Area`,`wpt unknown`,`wpt cap >= 1000`))\n\nAll NA in data is replaced with 0 as to prevent instances where division by 0 occurs.\n\nnga_wp_Ex2[is.na(nga_wp_Ex2)] = 0\n\n\nsummary(nga_wp_Ex2)\n\n  ADM2_CODE           total wpt     wpt functional   wpt non-functional\n Length:773         Min.   :  0.0   Min.   :  0.00   Min.   :  0.00    \n Class :character   1st Qu.: 44.0   1st Qu.: 16.00   1st Qu.: 12.00    \n Mode  :character   Median : 92.0   Median : 45.00   Median : 33.00    \n                    Mean   :122.9   Mean   : 67.46   Mean   : 41.66    \n                    3rd Qu.:169.0   3rd Qu.: 87.00   3rd Qu.: 60.00    \n                    Max.   :846.0   Max.   :716.00   Max.   :264.00    \n pct functional   pct non-functional   pct rural      pct cap < 1000  \n Min.   :0.0000   Min.   :0.0000     Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.3226   1st Qu.:0.2115     1st Qu.:0.5826   1st Qu.:0.4118  \n Median :0.4746   Median :0.3514     Median :0.8614   Median :0.6800  \n Mean   :0.4983   Mean   :0.3600     Mean   :0.7288   Mean   :0.6138  \n 3rd Qu.:0.6802   3rd Qu.:0.5000     3rd Qu.:1.0000   3rd Qu.:0.8750  \n Max.   :1.0000   Max.   :1.0000     Max.   :1.0000   Max.   :1.0000  \n pct cap >= 1000  pct hand pump             geometry  \n Min.   :0.0000   Min.   :0.0000   MULTIPOLYGON :773  \n 1st Qu.:0.1198   1st Qu.:0.1875   epsg:4326    :  0  \n Median :0.3077   Median :0.5147   +proj=long...:  0  \n Mean   :0.3694   Mean   :0.4943                      \n 3rd Qu.:0.5614   3rd Qu.:0.7805                      \n Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex2.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "2.1 Exploratory Data Analysis (EDA)",
    "text": "2.1 Exploratory Data Analysis (EDA)\n\n2.1.1 EDA using statistical graphics\nThe following code chunk sets the theme for aesthetic purposes\n\ntheme_set(theme_bw(16))\n\nWe can plot the distribution of the variables by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution).\nWe will proceed to find the distribution of wpt functional, wpt non-functional, pct functional, pct non-functional, pct rural, pct handpump, pct cap < 1000, pct cap >= 1000 using the code chunks below.\n\nwpt_func_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`wpt functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\nwpt functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\nWe also use shapiro.test to test for normality in the code chunk below. Should the p-value is greater than 0.05, the data is normal. If it is below 0.05, the data deviate from a normal distribution.\n\nshapiro.test(nga_wp_Ex2$`wpt functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`wpt functional`\nW = 0.70314, p-value < 2.2e-16\n\n\n\nwpt_nonfunc_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`wpt non-functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\nwpt non-functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nshapiro.test(nga_wp_Ex2$`wpt non-functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`wpt non-functional`\nW = 0.88598, p-value < 2.2e-16\n\n\n\nwpt_pctfunc_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`pct functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nshapiro.test(nga_wp_Ex2$`pct functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`pct functional`\nW = 0.98358, p-value = 1.276e-07\n\n\n\nwpt_pctnonfunc_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`pct non-functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct non-functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nshapiro.test(nga_wp_Ex2$`pct non-functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`pct non-functional`\nW = 0.98492, p-value = 3.83e-07\n\n\n\nwpt_pctrural_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`pct rural`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct rural\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nwpt_handpump_hist <-ggplot(data=nga_wp_Ex2,\n                                      aes(x=`pct hand pump`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct hand pump\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nwpt_usecapless1k_hist <-ggplot(data=nga_wp_Ex2,\n                                      aes(x=`pct cap < 1000`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct usecap < 1000\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nwpt_usecapequalormore1k_hist <-ggplot(data=nga_wp_Ex2,\n                                      aes(x=`pct cap >= 1000`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct usecap >= 1000\") +\n    theme(plot.title=element_text(hjust=0.5))\n\nThe distribution of the variables are displayed visually using the code chunks below.\n\nwpt_func_hist + wpt_nonfunc_hist\n\n\n\n\n\nwpt_pctfunc_hist + wpt_pctnonfunc_hist\n\n\n\n\n\nwpt_pctrural_hist + wpt_handpump_hist\n\n\n\n\n\nwpt_usecapless1k_hist + wpt_usecapequalormore1k_hist\n\n\n\n\nAs observed, not all variables have a normal distribution. Hence we are unable to to use z-standardization for these variables. We will proceed to use Min-Max scaling.\n\n\n2.2.1 EDA using choropleth map\n\n2.2.1.1 Preparing a choropleth map\nTo have a quick look at the distribution of total water points in Nigeria vs percentage of water points using Hand pump at Local Government Area level, a choropleth map will be prepared.\nThe code chunks below are used to create an interactive choropleth by using codes in tmap package.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntotal_wpt_plot <- tm_shape(nga_wp_Ex2) +\n    tm_fill(\"total wpt\",\n            style=\"jenks\",\n            title = \"total wpt\") +\n    tm_legend(legend.position = c(\"right\", \"bottom\")) +\n    tm_borders(\"black\", lwd = 0.3, alpha = 0.3) +\n    tm_layout(outer.margins=0, asp=0) +\n    tm_view(set.zoom.limits = c(5,10))\n\npct_handpump_plot <- tm_shape(nga_wp_Ex2) +\n    tm_fill(\"pct hand pump\",\n            style=\"jenks\",\n            title = \"pct hand pump\") +\n    tm_legend(legend.position = c(\"right\", \"bottom\")) +\n    tm_borders(\"black\", lwd = 0.3, alpha = 0.3) +\n    tm_layout(outer.margins=0, asp=0) +\n    tm_view(set.zoom.limits = c(5,10))\n\ntmap_arrange (total_wpt_plot, pct_handpump_plot, asp = 1, ncol = 2, sync = TRUE)\n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode is set back to “plot” mode.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#correlation-analysis",
    "href": "Take-home_Ex/Take-home_Ex2.html#correlation-analysis",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "3.1 Correlation Analysis",
    "text": "3.1 Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables. We need to remove the geometry column so that we can use cor(). The geometry column can be removed by using st_set_geometry(NULL) as shown in the code chunk below.\n\nnga_wp_Ex2_DG = nga_wp_Ex2 %>%\n    st_set_geometry(NULL)\n\n\ncluster_vars.cor = cor(nga_wp_Ex2_DG[,(3:10)])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nThe correlation plot above shows that “pct cap < 1000” and “pct cap >= 1000” are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both. For this take-home exercise, “pct cap < 1000” is chosen. We will omit “pct cap >= 1000” in the next section.\nSelected clustering variables are as follows:\n\nwpt functional\nwpt non-functional\npct functional\npct non-functional\npct rural\npct cap < 1000\npct hand pump"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#hierarchy-cluster-analysis",
    "href": "Take-home_Ex/Take-home_Ex2.html#hierarchy-cluster-analysis",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "4.1 Hierarchy Cluster Analysis",
    "text": "4.1 Hierarchy Cluster Analysis\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n4.1.1 Extracting clustering variables\nThe code chunk below will be used to extract the selected clustering variables from the nga_wp_Ex2 simple feature object into data.frame and also to use column ADM2_CODE as the row index.\n\ncluster_vars <- nga_wp_Ex2_DG\nrow.names(cluster_vars) <- cluster_vars$\"ADM2_CODE\"\nnga_wp_Ex2_ict <- select(cluster_vars, c(3:8,10))\nhead(nga_wp_Ex2_ict, 10)\n\n          wpt functional wpt non-functional pct functional pct non-functional\nNGA001001              5                  9      0.3125000          0.5625000\nNGA001002             32                 37      0.4210526          0.4868421\nNGA001003              7                  7      0.2800000          0.2800000\nNGA001004             15                 15      0.2500000          0.2500000\nNGA001005             13                 43      0.1214953          0.4018692\nNGA001006             22                 31      0.2315789          0.3263158\nNGA001007             14                 33      0.2456140          0.5789474\nNGA001008             25                 18      0.3906250          0.2812500\nNGA001009             30                117      0.1724138          0.6724138\nNGA001010              8                 19      0.2051282          0.4871795\n           pct rural pct cap < 1000 pct hand pump\nNGA001001 0.00000000      0.1250000    0.06250000\nNGA001002 0.07894737      0.1710526    0.14473684\nNGA001003 0.84000000      0.6000000    0.08000000\nNGA001004 0.81666667      0.5666667    0.06666667\nNGA001005 0.82242991      0.5233645    0.04672897\nNGA001006 0.93684211      0.6105263    0.16842105\nNGA001007 0.87719298      0.1929825    0.01754386\nNGA001008 1.00000000      0.4375000    0.10937500\nNGA001009 0.98275862      0.4367816    0.28160920\nNGA001010 0.58974359      0.3846154    0.07692308"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#data-standardisation",
    "href": "Take-home_Ex/Take-home_Ex2.html#data-standardisation",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "4.2 Data Standardisation",
    "text": "4.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\nWarning: As highlighted Z-score standardisation method will not be used as NOT all variables come are of normal distribution. For this example we will proceed with Min-Max\n\n4.2.1 Min-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nnga_wp_Ex2_ict.std <- normalize(nga_wp_Ex2_ict)\nsummary(nga_wp_Ex2_ict.std)\n\n wpt functional    wpt non-functional pct functional   pct non-functional\n Min.   :0.00000   Min.   :0.00000    Min.   :0.0000   Min.   :0.0000    \n 1st Qu.:0.02235   1st Qu.:0.04545    1st Qu.:0.3226   1st Qu.:0.2115    \n Median :0.06285   Median :0.12500    Median :0.4746   Median :0.3514    \n Mean   :0.09421   Mean   :0.15779    Mean   :0.4983   Mean   :0.3600    \n 3rd Qu.:0.12151   3rd Qu.:0.22727    3rd Qu.:0.6802   3rd Qu.:0.5000    \n Max.   :1.00000   Max.   :1.00000    Max.   :1.0000   Max.   :1.0000    \n   pct rural      pct cap < 1000   pct hand pump   \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.5826   1st Qu.:0.4118   1st Qu.:0.1875  \n Median :0.8614   Median :0.6800   Median :0.5147  \n Mean   :0.7288   Mean   :0.6138   Mean   :0.4943  \n 3rd Qu.:1.0000   3rd Qu.:0.8750   3rd Qu.:0.7805  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n4.2.2 Visualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunks below plot the scaled wpt functional & wpt non-functional field.\n\nr <- ggplot(data=nga_wp_Ex2, \n             aes(x= `wpt functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without\\nstandardisation\")\n\n\nnga_wp_Ex2_ict_std_df <- as.data.frame(nga_wp_Ex2_ict.std)\ns <- ggplot(data=nga_wp_Ex2_ict_std_df,\n       aes(x=`wpt functional`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max\\nStandardisation\")\n\n\nr + s\n\n\n\n\nNotice that the x-values have been standardised so that they fall between 0 to 1."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#computing-proximity-matrix",
    "href": "Take-home_Ex/Take-home_Ex2.html#computing-proximity-matrix",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.1 Computing proximity matrix",
    "text": "5.1 Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(nga_wp_Ex2_ict, method = 'euclidean')\nproxmat\n\n\n5.1.1 Computing hierarchical clustering (Non-spatially constrained clustering)\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.05)\n\n\n\n\n\n\n5.1.2 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(nga_wp_Ex2_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.9922221 0.9670021 0.9935483 0.9980725 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n5.1.3 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n5.1.3.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(nga_wp_Ex2_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = nga_wp_Ex2_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW    E.logW       gap     SE.sim\n [1,] 9.759796 10.879617 1.1198209 0.01454078\n [2,] 9.532971 10.426413 0.8934415 0.03881546\n [3,] 9.178684 10.211475 1.0327914 0.02516053\n [4,] 9.126162 10.088090 0.9619282 0.01713119\n [5,] 9.006787  9.985733 0.9789458 0.01307360\n [6,] 8.895835  9.891464 0.9956289 0.01286276\n [7,] 8.840645  9.805948 0.9653024 0.01459348\n [8,] 8.773782  9.728964 0.9551814 0.01791584\n [9,] 8.747021  9.661292 0.9142709 0.01850749\n[10,] 8.638142  9.602217 0.9640758 0.01750828\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 3-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n5.1.4 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.1)\nrect.hclust(hclust_ward, \n            k = 3, \n            border = 2:5)\n\n\n\n\n\n\n5.1.5 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n5.1.5.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform nga_wp_Ex2_ict data frame into a data matrix.\n\nnga_wp_Ex2_ict_mat <- data.matrix(nga_wp_Ex2_ict)\n\n\nheatmaply(normalize(nga_wp_Ex2_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 3,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria Local Government Area by WPT indicators\",\n          xlab = \"WPT indicators\",\n          ylab = \"Nigeria Local Government Area\")\n\n\n\n\n\nCluster 3 has the highest pct functional, highest pct cap < 1000, and highest pct hand pump in the Nigeria Local Government Area level.\n\n\n\n5.1.6 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain three (3) clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=3))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto nga_wp_Ex2 simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto nga_wp_Ex2 to produce an output simple feature object called nga_wp_Ex2_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nnga_wp_Ex2_cluster <- cbind(nga_wp_Ex2, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(nga_wp_Ex2_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-skater-approach",
    "href": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-skater-approach",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.2 Spatially Constrained Clustering: SKATER approach",
    "text": "5.2 Spatially Constrained Clustering: SKATER approach\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n5.2.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert nga_wp_Ex2 into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert nga_wp_Ex2 into a SpatialPolygonDataFrame called nga_wp_Ex2_sp.\n\nnga_wp_Ex2_sp <- as_Spatial(nga_wp_Ex2)\n\n\n\n5.2.2 Computing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nnga_wp_Ex2.nb <- poly2nb(nga_wp_Ex2_sp)\nsummary(nga_wp_Ex2.nb)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\n\nWe can plot the neighbours list on nga_wp_Ex2_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Nigeria Local Government Area boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(nga_wp_Ex2_sp, \n     border=grey(.5))\nplot(nga_wp_Ex2.nb, \n     coordinates(nga_wp_Ex2_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n5.2.3 Computing minimum spanning tree\n\n5.2.3.1 Calculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(nga_wp_Ex2.nb, nga_wp_Ex2_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nnga_wp_Ex2.w <- nb2listw(nga_wp_Ex2.nb, \n                   lcosts, \n                   style=\"B\")\n\nWarning in nb2listw(nga_wp_Ex2.nb, lcosts, style = \"B\"): zero sum general\nweights\n\nsummary(nga_wp_Ex2.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1        S2\nB 773 597529 264324.9 70899855 706330302\n\n\n\n\n\n5.2.4 Computing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nnga_wp_Ex2.mst <- mstree(nga_wp_Ex2.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(nga_wp_Ex2.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(nga_wp_Ex2.mst)\n\n[1] 772   3\n\n\nNote that the dimension is 772 and not 773. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of nga_wp_Ex2.mst by using head() as shown in the code chunk below.\n\nhead(nga_wp_Ex2.mst)\n\n     [,1] [,2]     [,3]\n[1,]  182  173 47.38331\n[2,]  173  170 13.34193\n[3,]  173  169 23.34723\n[4,]  169  217 15.82093\n[5,]  169  212 33.97151\n[6,]  212  221 21.95609\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(nga_wp_Ex2_sp, border=gray(.5))\nplot.mst(nga_wp_Ex2.mst, \n         coordinates(nga_wp_Ex2_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n5.2.5 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust3 <- spdep::skater(edges = nga_wp_Ex2.mst[,1:2], \n                 data = nga_wp_Ex2_ict, \n                 method = \"euclidean\", \n                 ncuts = 2)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust3)\n\nList of 8\n $ groups      : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n $ edges.groups:List of 3\n  ..$ :List of 3\n  .. ..$ node: num [1:207] 474 473 228 186 187 200 86 79 80 84 ...\n  .. ..$ edge: num [1:206, 1:3] 173 213 240 229 173 10 226 17 227 43 ...\n  .. ..$ ssw : num 4401\n  ..$ :List of 3\n  .. ..$ node: num [1:558] 398 378 329 98 322 324 407 754 746 95 ...\n  .. ..$ edge: num [1:557, 1:3] 754 746 750 95 94 749 148 98 329 322 ...\n  .. ..$ ssw : num 35216\n  ..$ :List of 3\n  .. ..$ node: num [1:8] 326 325 343 334 320 319 321 344\n  .. ..$ edge: num [1:7, 1:3] 343 326 325 334 334 334 325 320 325 334 ...\n  .. ..$ ssw : num 860\n $ not.prune   : NULL\n $ candidates  : int [1:3] 1 2 3\n $ ssto        : num 49860\n $ ssw         : num [1:3] 49860 43984 40476\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs3 <- clust3$groups\nccs3\n\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [38] 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1\n[112] 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 2 1 2 1 1 2 2 2 2 2 1 2 2 2\n[186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 2 1 2 1 2 1 2\n[223] 2 2 1 1 1 1 1 2 2 2 1 1 1 1 1 1 2 1 1 2 2 2 2 2 2 1 2 2 1 2 2 2 1 2 2 1 1\n[260] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1\n[297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 2 2 3 3 2 2 2 2 2 2 2\n[334] 3 2 2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[371] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[445] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2\n[482] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[519] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[556] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 1 1 1 1 2 1\n[593] 2 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[630] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[667] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[704] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[741] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 207, which is also the number of observations in the first cluster.\n\ntable(ccs3)\n\nccs3\n  1   2   3 \n207 558   8 \n\n\nLastly, we can also plot the pruned tree that shows the three clusters on top of Nigeria Local Government Area.\n\nplot(nga_wp_Ex2_sp, border=gray(.5))\nplot(clust3, \n     coordinates(nga_wp_Ex2_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n5.2.6 Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ngroups_mat <- as.matrix(clust3$groups)\nnga_wp_Ex2_spatialcluster <- cbind(nga_wp_Ex2_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(nga_wp_Ex2_spatialcluster, \"SP_CLUSTER\") +\n        tm_view(set.zoom.limits = c(5,10))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.3 Spatially Constrained Clustering: ClustGeo Method",
    "text": "5.3 Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n5.3.1 A short note about ClustGeo package\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n5.3.2 Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 3, \n            border = 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n5.3.2.1 Mapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups <- as.factor(cutree(nongeo_cluster, k=3))\n\n\nnga_wp_Ex2_ngeo_cluster <- cbind(nga_wp_Ex2, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(nga_wp_Ex2_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n5.3.3 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist <- st_distance(nga_wp_Ex2, nga_wp_Ex2)\ndistmat <- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below. Take note of K, it must be uppercase.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=3, graph = )\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.2 will be used as shown in the code chunk below. Reason for choosing is that we do not sacrifice too much variables homogeneity for spatial homogeneity.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=3))\n\nWe will then join back the group list with nga_wp_Ex2 polygon feature data frame by using the code chunk below.\n\nnga_wp_Ex2_Gcluster <- cbind(nga_wp_Ex2, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(nga_wp_Ex2_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#visual-interpretation-of-clusters",
    "href": "Take-home_Ex/Take-home_Ex2.html#visual-interpretation-of-clusters",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.4 Visual Interpretation of Clusters",
    "text": "5.4 Visual Interpretation of Clusters\n\n5.4.1 Visualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e pct.rural) by cluster.\n\nggplot(data = nga_wp_Ex2_Gcluster,\n       aes(x = CLUSTER, y = pct.rural)) +\n  geom_boxplot()\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest pct rural. This is followed by Cluster 2, and lastly 1.\n\n\n5.4.2 Multivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package.\n\nnga_wp_Ex2_ngeo_cluster2 <- select(nga_wp_Ex2_ngeo_cluster, c(3:8,10:11))\n\n\nggparcoord_nga <- ggparcoord(data = nga_wp_Ex2_ngeo_cluster2,\n                             columns = c(1:7),\n                             scale = \"std\",\n                             alphaLines = 0.2,\n                             boxplot = TRUE,\n                             title = \"Multiple Parallel Coordinates Plots of Clustering Variables by Cluster\") +\n    facet_grid(~ CLUSTER) +\n    theme(plot.title = element_text(size=10),\n          axis.text.x = element_text(size = 8))\nggparcoord_nga + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nThe parallel coordinate plot above reveals that LGAs in Cluster 3’s while having the highest average number of wpt functional also have the highest average pct wpt functional. Cluster 3 has the highest average “pct cap < 1000”, this is inline with them having the highest average “pct hand pump”. Hand pump usually have smaller capacity and have less components leading to lesser failures as compared to mechanical pump.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nnga_wp_Ex2_ngeo_cluster %>% \n  st_set_geometry(NULL) %>%\n  group_by(CLUSTER) %>%\n  summarise(mean_FUNC = mean(wpt.functional),\n            mean_NONFUNC = mean(wpt.non.functional),\n            mean_PCTFUNC = mean(pct.functional),\n            mean_PCTNONFUNC = mean(pct.non.functional),\n            mean_PCTRURAL = mean(pct.rural),\n            mean_PCTCAPLESS1000 = mean(pct.cap...1000),\n            mean_PCTHANDPUMP = mean(pct.hand.pump))\n\n# A tibble: 3 × 8\n  CLUSTER mean_FUNC mean_NONFUNC mean_PCTFUNC mean_PCT…¹ mean_…² mean_…³ mean_…⁴\n  <chr>       <dbl>        <dbl>        <dbl>      <dbl>   <dbl>   <dbl>   <dbl>\n1 1            17.3         18.4        0.409      0.380   0.653   0.470   0.308\n2 2            87.0         61.4        0.550      0.363   0.788   0.728   0.638\n3 3           302.          73          0.795      0.187   0.866   0.866   0.844\n# … with abbreviated variable names ¹​mean_PCTNONFUNC, ²​mean_PCTRURAL,\n#   ³​mean_PCTCAPLESS1000, ⁴​mean_PCTHANDPUMP"
  }
]