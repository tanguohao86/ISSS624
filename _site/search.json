[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n\nBy the end of this hands-on exercise, you will able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.2 Getting Started",
    "text": "5.2 Getting Started\n\n5.2.1 The analytical question\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#the-data",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.3 The data",
    "text": "5.3 The data\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)\n\n5.3.1 Installing and loading R packages\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)\n\nNote: With tidyverse, we do not have to install readr, ggplot2 and dplyr packages separately. In fact, tidyverse also installs other very useful R packages such as tidyr."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-import-and-prepatation",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-import-and-prepatation",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.4 Data Import and Prepatation",
    "text": "5.4 Data Import and Prepatation\n\n5.4.1 Importing geospatial data into R environment\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below: # not going to use CRS (projection) because Ex only deals with contiguity\n\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\n5.4.2 Importing aspatial data into R environment\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n5.4.3 Derive new variables using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below. * multiply by 1000 to make it per 1000 people, rename DT code to District P Code\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.5 Exploratory Data Analysis (EDA)",
    "text": "5.5 Exploratory Data Analysis (EDA)\n\n5.5.1 EDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nThey are also similar to a normal distribution with 1 outlier at the ing\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n5.5.2 EDA using choropleth map\n\n5.5.2.1 Joining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE. sf file to be in the front because you want to retain geometry property\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\n5.5.2.2 Preparing a choropleth map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.6 Correlation Analysis",
    "text": "5.6 Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated (>0.85). This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.7 Hierarchy Cluster Analysis",
    "text": "5.7 Hierarchy Cluster Analysis\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n5.7.1 Extracting clustering variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame. # they will drop the geometry column, geometry is hidden\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below. #\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n5.7.2 Data Standardization\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is biased to clustering variables with large values, it is useful to standardize the input variables before performing cluster analysis.\n\n\n5.7.3 Min-Max standardization\nIn the code chunk below, normalize() of heatmaply package is used to standardize the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardized clustering variables.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardized clustering variables are 0-1 now.\n\n\n5.7.4 Z-score standardization\nZ-score standardization can be performed easily by using scale() of Base R. The code chunk below will be used to standardize the clustering variables by using Z-score method.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardized clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardization method should only be used if we would assume all variables come from some normal distribution.\n\n\n5.7.5 Visualizing the standardized clustering variables\nBeside reviewing the summary statistics of the standardized clustering variables, it is also a good practice to visualize their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\nNormal distribution for min-max and z-score standardisation.\nAfter standardization, the distribution for the raw valves is different from the min-max and z-score standardization.\nmin-max standardisation and z-score standardisation gives us the same distribution with the main difference in the x-values.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n5.7.6 Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method. # input must only have variable of interest, geometry column must be dropped. index is the location to be compared\n\nproxmat <- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n5.7.7 Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n#cex is to scale down so that the township name can be read fig.width = 10, fig.height=6\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n5.7.8 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms. #functional programming at play.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n} # #functional programming at play to avoid looping (choice)\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n5.7.9 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n5.7.9.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick. (the next highest gap statistics after 1)\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n5.7.10 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n5.7.11 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hierarchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n5.7.11.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\n5.7.11.2 Plotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n5.7.12 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering-skater-approach",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.8 Spatially Constrained Clustering: SKATER approach",
    "text": "5.8 Spatially Constrained Clustering: SKATER approach\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n5.8.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp. #Spatially Constrained Clustering: SKATER approach\n\nshan_sp <- as_Spatial(shan_sf)\n\n\n\n5.8.2 Computing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n5.8.3 Computing minimum spanning tree\n\n5.8.3.1 Calculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardized. # ** take note\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n5.8.4 Computing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst <- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes. n is the number of polygons\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n5.8.5 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 <- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5) # cut 5, you ended up with 6 clusters\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the code chunk below.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n5.8.6 Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat <- as.matrix(clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`) # shan_sf_cluster is a simple object.\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands-on_Ex4 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.9 Spatially Constrained Clustering: ClustGeo Method",
    "text": "5.9 Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n5.9.1 Ward-like hierarchical clustering: ClustGeo # only works with Ward\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n5.9.1.1 Mapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n5.9.2 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below. # to balance attribute space vs spatial space. alpha value is from 0 to 1 (0 -attribute homogeneity , 1-spatial homogeneity), 2nd chart is the normalized one. use normalized if your distribution is skewed.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chun below.\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can not plot the map of the newly delineated spatially constrained clusters.\nto explain cluster, see how they are being plotted. visually-driven hierarchical clustering analysis ICT indicators\nor do boxplots\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting start paragraph."
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, i learn how to import and wrangling geospatial data in R using sf packages."
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#getting-started",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#importing-geospatial-data",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.4 Importing Geospatial Data",
    "text": "1.4 Importing Geospatial Data\n\n1.4.1 Importing polygon feature data\nThe code chunk below uses st_read() function of sf package to import ESRI shapefile into R as a polygon feature data frame.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex1a\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n1.4.2 Importing polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import ESRI shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex1a\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\n1.4.3 Importing GIS data in kml format\nThe code chunk below will be used to import the kml into R.\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex1a\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message above reveals that preschool is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.5 Checking the Content of A Simple Feature Data Frame",
    "text": "1.5 Checking the Content of A Simple Feature Data Frame\n\n1.5.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n\n1.5.2 Working with glimpse()\nThe code chunk below is used to learn more about the associated attribute information in the data frame.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n1.5.3 Working with head()\nThe code chunk below is used to reveal complete information of a feature object.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.6 Plotting the Geospatial Data",
    "text": "1.6 Plotting the Geospatial Data\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz['PLN_AREA_N'])"
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#working-with-projection",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.7 Working with Projection",
    "text": "1.7 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n1.7.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\nmpsz3414 = st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n1.7.2 Transforming the projection of preschool from wgs84 to svy21.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\npreschool3414 = st_transform(preschool, crs=3414)\n\n\nst_geometry(preschool3414)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)"
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.8 Importing and Converting An Aspatial Data",
    "text": "1.8 Importing and Converting An Aspatial Data\nIn practice, it is not unusual that we will come across data such as listingof Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there aretwo fields that capture the x- and y coordinates of the data points.\nIn this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\nFor the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.\n\n1.8.1 Importing the aspatial data\n\nlistings = read_csv('data/aspatial/listings.csv')\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n1.8.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nlistings_sf = st_as_sf(listings,\n                       coords = c('longitude', 'latitude'),\n                       crs=4326) %>%\n    st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\nLet us examine the content of this newly created simple feature data frame.\n\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.9 Geoprocessing with sf package",
    "text": "1.9 Geoprocessing with sf package\n\n1.9.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling = st_buffer(cyclingpath,\n                           dist = 5,\n                           nQuadSegs = 30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA = st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\n1.9.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count` = lengths(st_intersects(mpsz3414, preschool3414))\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nDIY: Calculate the density of pre-school by planning subzone.\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area = mpsz3414 %>%\n    st_area()\n\n\nmpsz3414 = mpsz3414 %>%\n    mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nsummary(mpsz3414$`PreSch Density`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.974   4.076   6.609  29.059 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Density`)\n\nSimple feature collection with 1 feature and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28896.26 ymin: 28339.16 xmax: 29426.66 ymax: 28685.25\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       22         10     ANSON    DTSZ10      Y DOWNTOWN CORE         DT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 4893F02202845C1D 2014-12-05 29145.35 28466.78\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1     1586.1   103238.5 MULTIPOLYGON (((29201.07 28...            3\n            Area   PreSch Density\n1 103238.5 [m^2] 29.05893 [1/m^2]"
  },
  {
    "objectID": "Hands-on_Ex1a/Hands-on_Ex1a.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1a/Hands-on_Ex1a.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1.10 Exploratory Data Analysis (EDA)",
    "text": "1.10 Exploratory Data Analysis (EDA)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(`PreSch Density`)))+\n    geom_histogram(bins=30,\n                   color= 'black',\n                   fill='light blue') +\n    labs(title = 'Are pre-school even distributed in Singapore?',\n         subtitle = 'There are many planning sub-zones with a single pre-school, on the hand, \\nthere are two planning sub-zones with at least 20 pre-schools',\n         x = 'Pre-school density (per km sq)',\n         y = 'Frequency')\n\n\n\n\nDIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\nThe solution:\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) +\n    geom_point() + \n    labs(x = 'Pre-school density (per km sq)',\n         y = 'Pre-school count')"
  },
  {
    "objectID": "Hands-on_Ex1b/Hands-on_Ex1b.html",
    "href": "Hands-on_Ex1b/Hands-on_Ex1b.html",
    "title": "Hands-on Exercise 1 Part 2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, I will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package."
  },
  {
    "objectID": "Hands-on_Ex1b/Hands-on_Ex1b.html#getting-started",
    "href": "Hands-on_Ex1b/Hands-on_Ex1b.html#getting-started",
    "title": "Hands-on Exercise 1 Part 2: Choropleth Mapping with R",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1b/Hands-on_Ex1b.html#importing-data-into-r",
    "href": "Hands-on_Ex1b/Hands-on_Ex1b.html#importing-data-into-r",
    "title": "Hands-on Exercise 1 Part 2: Choropleth Mapping with R",
    "section": "2.3 Importing Data into R",
    "text": "2.3 Importing Data into R\n\n2.3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n2.3.2 Importing Geospatial Data into R\n\nmpsz = st_read(dsn = 'data/geospatial',\n                layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex1b\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n2.3.3 Importing Attribute Data into R\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata = read.csv('data/aspatial/respopagesextod2011to2020.csv')\n\n\n\n2.3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n2.3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 = popdata %>%\n    filter(Time == 2020) %>%\n    group_by(PA, SZ, AG) %>%\n    summarise(`POP` = sum(`Pop`)) %>%\n    ungroup() %>%\n    pivot_wider(names_from=AG,\n                values_from =POP) %>%\n    mutate(YOUNG = rowSums(.[3:6]) +\n               rowSums(.[12])) %>%\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) +\n               rowSums(.[13:15])) %>%\n    mutate(`AGED`=rowSums(.[16:21])) %>%\n    mutate(`TOTAL`=rowSums(.[3:21])) %>%  \n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n           /`ECONOMY ACTIVE`) %>%\n    select(`PA`, `SZ`, `YOUNG`, \n           `ECONOMY ACTIVE`, `AGED`, \n           `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n2.3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 <- popdata2020 %>%\n    mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 = left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, 'data/rds/mpszpop2020.rds')"
  },
  {
    "objectID": "Hands-on_Ex1b/Hands-on_Ex1b.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex1b/Hands-on_Ex1b.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1 Part 2: Choropleth Mapping with R",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n2.4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020,\n    fill = 'DEPENDENCY')\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n2.4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, I will learn tmap functions that used to plot these elements.\n\n2.4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n    tm_polygons()\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n    tm_polygons('DEPENDENCY')\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n2.4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n2.4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n2.4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nWarning: Maps Lie!\n\nDIY: Using what you have learned prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\nAns: Using different classification intervals will result in different looking maps. Each classification encompasses different ranges of values (hence the reason all three maps look so different).\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\nAns: We are able to look at the maps are a higher level of granularity as the number of classes increases. We are able to notice that the area highlighted orange is actually of higher dependency then originally though when n = 2. Likewise for all other areas highlighted yellow, they are of lower dependency then originally thought.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 100)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n2.4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n2.4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n2.4.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n2.4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n2.4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n2.4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap = tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap = tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n2.4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Province, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n4.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n4.2.3 Setting the Analytical Toolls\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-the-data-into-r-environment",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.3 Getting the Data Into R Environment",
    "text": "4.3 Getting the Data Into R Environment\n\n4.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n4.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n4.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\n4.3.4 Visualizing Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4 Global Spatial Autocorrelation",
    "text": "4.4 Global Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n4.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\n\n\n4.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n4.4.4 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.5 Spatial Correlogram",
    "text": "4.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n4.5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.6 Cluster and Outlier Analysis",
    "text": "4.6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#computing-local-morans-i",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#computing-local-morans-i",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.6.1 Computing local Moran’s I",
    "text": "4.6.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n4.6.1.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.1.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n4.6.1.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.1.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nthe one in orange has strong negative correlation but not significant (could be due to the low number of neighbors)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.7 Creating a LISA Cluster Map",
    "text": "4.7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n4.7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that are **higher than the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n4.7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n4.7.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, we centers the variable of interest around its mean.\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05       \n\nThese four command lines define the high-high, low-low, low-high and high-low categories.\n\nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 2      \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 3\n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 2      \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n4.7.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.8 Hot Spot and Cold Spot Area Analysis",
    "text": "4.8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n4.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n\n4.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nknearneigh(x, k=1, longlat = NULL, use_kd_tree=TRUE)\nchange k = 2 for 2 neighbors.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n4.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n4.8.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Hands-on_Ex2 - 4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.9 Computing Gi statistics",
    "text": "4.9 Computing Gi statistics\n\n4.9.1 Gi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n4.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "",
    "text": "I will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#the-study-area-and-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#the-study-area-and-data",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.2 The Study Area and Data",
    "text": "3.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n3.2.1 Getting Started\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-the-data-into-r-environment",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-the-data-into-r-environment",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.3 Getting the Data Into R Environment",
    "text": "3.3 Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n3.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan = st_read(dsn = 'data/geospatial',\n             layer = 'Hunan')\n\nReading layer `Hunan' from data source \n  `C:\\tanguohao86\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 = read_csv('data/aspatial/Hunan_2012.csv')\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n3.3.3 Performing relational join\n\nhunan = left_join(hunan,hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-regional-development-indicator",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-regional-development-indicator",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.4 Visualising Regional Development Indicator",
    "text": "3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.5 Computing Contiguity Spatial Weights",
    "text": "3.5 Computing Contiguity Spatial Weights\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n3.5.1 Computing (QUEEN) contiguity based neighbors\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q = poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbors. There are two area units with only one neighbors.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 = wm_q[[1]]\nnb1 = hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbors based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n3.5.2 Creating (ROOK) contiguity based neighbors\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbors. There are two area units with only one neighbors.\n\n\n3.5.3 Visualizing contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n3.5.3.1 Plotting Queen contiguity based neighbors map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n3.5.3.2 Plotting Rook contiguity based neighbors map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n3.5.3.3 Plotting both Queen and Rook contiguity based neighbors maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbors",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbors",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.6 Computing distance based neighbors",
    "text": "3.6 Computing distance based neighbors\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n3.6.1 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbor distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.\n\n\n3.6.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above? Number of nonzero links: 324 divide by Number of regions: 88.\nusing max distance as 62km, there are an average of 3.681818 links per region\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp = n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n3.6.2.1 Plotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\n3.6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settled areas (usually the rural counties) tend to have lesser neighbors. Having many neighbors smoothes the neighbor relationship across more neighbors.\nIt is possible to control the numbers of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry as shown in the code chunk below.\n\nknn6 = knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbors, no less no more!\n\n3.6.3.1 Plotting distance based neighbors\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.7 Weights based on IDW",
    "text": "3.7 Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist = nbdists(wm_q, coords, longlat = TRUE)\nids = lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n3.7.1 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q = nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s four neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardized distance weight matrix by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class_Ex1 - 3- Spatial Weights and Applications",
    "section": "3.8 Application of Spatial Weight Matrix",
    "text": "3.8 Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and spatial window sum.\n\n\n3.8.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag = lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 = wm_q[[1]]\nnb1 = hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class_Ex2 - 5 Geographical Segmentation with Spatially Constrained Clustering Techniques - Spatially Constrained Clustering: ClustGeo Method",
    "section": "",
    "text": "In this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)\n\n\n\n\nThe following code chunks are the required to obtain proximity matrix.\n\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\tanguohao86\\ISSS624\\In-class_Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict <- select(cluster_vars, c(2:6))\n\n\nproxmat <- dist(shan_ict, method = 'euclidean')\n\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix in hands on Ex3.\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below. # to balance attribute space vs spatial space. alpha value is from 0 to 1 (0 -attribute homogeneity , 1-spatial homogeneity), 2nd chart is the normalized one. use normalized if your distribution is skewed.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chun below.\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can not plot the map of the newly delineated spatially constrained clusters.\nto explain cluster, see how they are being plotted. visually-driven hierarchical clustering analysis ICT indicators\nor do boxplots\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this website, I am going to share with you my learning journey of geospatial analytics.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of Functional & Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.\n\n\n\n\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set. We will rename this file to “geo_export”.\n\n\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries. We will use the file “nga_polnda_adm2_1m_salb”.\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\n\nPlot hotspot areas and outliers/clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\nThis exercise will be graded by using the following criteria:\n\nGeospatial Data Wrangling (20 marks): This is an important aspect of geospatial analytics. You will be assessed on your ability to employ appropriate R functions from various R packages specifically designed for modern data science such as readr, tidyverse (tidyr, dplyr, ggplot2), sf just to mention a few of them, to perform the entire geospatial data wrangling processes, including. This is not limited to data import, data extraction, data cleaning and data transformation. Besides assessing your ability to use the R functions, this criterion also includes your ability to clean and derive appropriate variables to meet the analysis need. (Warning: All data are like vast grassland full of land mines. Your job is to clear those mines and not to step on them).\nGeospatial Analysis (25 marks): In this exercise, you are expected to use the appropriate thematic and analytics mapping techniques and R functions introduced in class to analyse the geospatial data prepared. You will be assessed on your ability to derive analytical maps by using appropriate rate mapping techniques.\nGeovisualisation and Geocommunication (25 marks): In this section, you will be assessed on your ability to communicate the complex spatial statistics results in business friendly visual representations. This course is geospatial centric, hence, it is important for you to demonstrate your competency in using appropriate. geovisualisation techniques to reveal and communicate the findings of your analysis.\nReproducibility (20 marks): This is an important learning outcome of this exercise. You will be assessed on your ability to provide a comprehensive documentation of the analysis procedures in the form of code chunks of Markdown. It is important to note that it is not enough by merely providing the code chunk without any explanation on the purpose and R function(s) used.\nBonus (10 marks): Demonstrate your ability to employ methods beyond what you had learned in class to gain insights from the data. The methods used must be geospatial in nature."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, tmap, funModeling)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#downloading-and-importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#downloading-and-importing-geospatial-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.3 Downloading and Importing Geospatial Data",
    "text": "1.3 Downloading and Importing Geospatial Data\nIn this in-class data, two geospatial data sets will be used, they are:\n\ngeo_export\nnga_polnda_adm2_1m_salb\n\n\n1.3.1 Importing water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp = st_read(dsn = 'geodata',\n             layer = 'geo_export',\n             crs = 4326) %>%\n    filter(clean_coun == 'Nigeria')\n\n\nwrite_rds(wp, 'geodata/wp_nga.rds')\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga = write_rds(wp,\n                   'geodata/wp_nga.rds')\n\n\n\n1.3.2 Importing Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga = st_read(dsn = 'geodata',\n              layer = 'nga_polnda_adm2_1m_salb',\n              crs = 4326) \n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_polnda_adm2_1m_salb shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.4 Data Wrangling",
    "text": "1.4 Data Wrangling\n\n1.4.1 Recoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n    mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n1.4.2 EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#extracting-water-point-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "1.5 Extracting Water Point Data",
    "text": "1.5 Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\n1.5.1 Extracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n1.5.2 Extracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n1.5.3 Extracting water point with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n1.5.4 Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n1.5.5 Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")\n\nBefore you end this section, please remember to delete away all the raw data. Notice that the only data file left is nga_wp.rds and it’s file size is around 2.1MB.\n\n\n1.5.6 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\nWe will first use st_crs() of sf package as shown in the code chunk below to check the coordinate system of nga_wp dataframe.\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\n\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAlthough nga_wpdata frame is projected in wgs84 but when we read until the end of the print, it indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for wgs84 should be 26391.\n\n\n1.5.9 Transforming the projection of preschool from wgs84 to EPSG 26391.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis requires the use of distance or/and area measurements.\nWe need to reproject nga_wpfrom one coordinate system to another coordinate system mathematically.\nLet us perform the projection transformation by using the code chunk below.\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\nnga_wp26391 <- st_transform(nga_wp,\n                    crs = 26391)\nst_crs(nga_wp26391)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\nFor simplicity sake, nga_wp26391 will be renamed to nga_wp and overwrite its data using the code chunk below.\n\nnga_wp <- nga_wp26391"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#proportion-of-functional-and-non-functional-water-point-at-lga-level.",
    "href": "Take-home_Ex/Take-home_Ex1.html#proportion-of-functional-and-non-functional-water-point-at-lga-level.",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "2 Proportion of functional and non-functional water point at LGA level.",
    "text": "2 Proportion of functional and non-functional water point at LGA level.\nThere are in total 773 LGA as per nga_wp26391 data table. We shall extract the relevant information and create a table (tab) to show the relevant columns (proportion of functional and non-functional water points at LGA level)\n\ntab <- nga_wp[,c(6,14,15,16,18,19)]\ntab\n\nSimple feature collection with 773 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28868.2 ymin: 30747.71 xmax: 1343676 ymax: 1094979\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n   ADM2_CODE total wpt wpt functional wpt non-functional pct_functional\n1  NGA001001        16              5                  9      0.3125000\n2  NGA001002        76             32                 37      0.4210526\n3  NGA001003        25              7                  7      0.2800000\n4  NGA001004        60             15                 15      0.2500000\n5  NGA001005       107             13                 43      0.1214953\n6  NGA001006        95             22                 31      0.2315789\n7  NGA001007        57             14                 33      0.2456140\n8  NGA001008        64             25                 18      0.3906250\n9  NGA001009       174             30                117      0.1724138\n10 NGA001010        39              8                 19      0.2051282\n   pct_non-functional                       geometry\n1           0.5625000 MULTIPOLYGON (((543570.1 12...\n2           0.4868421 MULTIPOLYGON (((542081.5 11...\n3           0.2800000 MULTIPOLYGON (((608160.4 17...\n4           0.2500000 MULTIPOLYGON (((568876.8 20...\n5           0.4018692 MULTIPOLYGON (((568036.9 16...\n6           0.3263158 MULTIPOLYGON (((540288.3 14...\n7           0.5789474 MULTIPOLYGON (((549299.6 16...\n8           0.2812500 MULTIPOLYGON (((551352.8 21...\n9           0.6724138 MULTIPOLYGON (((563707 1442...\n10          0.4871795 MULTIPOLYGON (((586759.5 20..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3 Visualizing the spatial distribution of water points",
    "text": "3 Visualizing the spatial distribution of water points"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#thematic-mapping-1",
    "href": "Take-home_Ex/Take-home_Ex1.html#thematic-mapping-1",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "3.1 Thematic Mapping",
    "text": "3.1 Thematic Mapping\nMaps are plotted to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\nTo draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\nIn the code chunk below, the following tmap’s drawing elements are used:\n\ntm_shape() is used to define the input data (i.e nga_wp)\ntm_fill() shades the polygons by using the default colour scheme to show the geographical distribution of a selected variable (i.e wpt functional and `wpt non-functional)\ntm_borders() adds the borders of the shapefile onto the choropleth map\ntm_layout() refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\nThe 2 maps are placed side by side for better comparison using tmap_arrange().\n\nwP_functional <- tm_shape(nga_wp)+\n    tm_fill(\"wpt functional\",\n            style = \"equal\")+\n    tm_layout(main.title = \"Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)+\n    tm_borders(lwd = 0.1, alpha = 0.5)\n\nwp_nonfunctional <- tm_shape(nga_wp)+\n    tm_fill( \"wpt non-functional\",\n            style = \"equal\")+\n    tm_layout(main.title = \"Non-functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)+\n    tm_borders(lwd = 0.1, alpha = 0.5)\n\ntmap_arrange(wP_functional, wp_nonfunctional, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.4 Global Spatial Autocorrelation",
    "text": "4.4 Global Spatial Autocorrelation\nIn this section, we will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\n4.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighborhood relationships between the geographical units (i.e. ADM2_CODE) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbors list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbors using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(nga_wp, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\n\nThe summary report above shows that there are 773 area units in Nigeria. The most connected area unit (516) has 13 neighbors. There are two area units (475 & 505) with only one neighbor.\n\n\n4.4.2 Row-standardized weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 281.9605 3193.332\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.policy.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardized (sums over all links to n), C is globally standardized (sums over all links to n), U is equal to C divided by the number of neighbors (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbor in the neighbors list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbors))) %*% x, for arbitrary numerical vector x of length length(neighbors). The spatially lagged value of x for the zero-neighbor region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.4.3 Global Spatial Autocorrelation: Moran’s I & Geary’s C for Functional Waterpoints\nIn this section, we will perform Moran’s I statistics testing by using moran.test() and geary.test() of spdep for functional waterpoints.\n\n4.4.3.1 Moran’s I test for Functional Waterpoints\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nf_wpt = moran.test(nga_wp$`wpt functional`,\n                       listw=rswm_q,\n                       zero.policy = TRUE,\n                       na.action=na.omit)\nf_wpt\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt functional`  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 25.818, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.5518087465     -0.0012953368      0.0004589518 \n\n\nMoran I statistic is found to be 0.5518087465. positive (I>0): Clustered, observations tend to be similar. There is a need to confirm the Moran I statistic by comparing actual value of Moran’s I to Monte Carlo Moran’s I to obtain p-value.\n\n\n4.4.3.2 Computing Monte Carlo Moran’s I for Functional Waterpoints\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\nBear in mind the number of simulation starts counting from 0 hence nsim = 999.\nset seed (value) where value specifies the initial value of the random number seed.\nThe na.omit R function removes all incomplete cases of a data object\n\nset.seed(1234)\nbperm_f_wpt = moran.mc(nga_wp$`wpt functional`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_f_wpt\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.55181, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Moran’s I is identical to previously obtained Moran I statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.3.3 Visualizing Monte Carlo Moran’s I for Functional Waterpoints\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunks below.\n\nhist(bperm_f_wpt$res, \n     freq=TRUE,\n     xlim = c(-0.1,0.6),\n     breaks=50,\n     main = \"Histogram of Monte Carlo Moran's I for Functional Waterpoints\",\n     xlab=\"Simulated Moran's I for Functional Waterpoints\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n4.4.3.4 Geary’s C test for Functional Waterpoints\nThe code chunk below performs Geary’s C statistical testing using geary.test() of spdep.\n\ngeary.test(nga_wp$`wpt functional`, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wpt functional` \nweights: rswm_q \n\nGeary C statistic standard deviate = 15.383, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.468025940       1.000000000       0.001195875 \n\n\nGeary C statistic is found to be 0.468025940. small c value (<1): Clustered, observations tend to be similar. There is a need to confirm the Geary C statistic by comparing actual value of Geary’s C to Monte Carlo Geary’s C to obtain p-value.\n\n\n4.4.3.5 Computing Monte Carlo Geary’s C for Functional Waterpoints\n\nset.seed(1234)\nbperm_g_f_wpt=geary.mc(nga_wp$`wpt functional`, \n               listw=rswm_q, \n               nsim=999)\nbperm_g_f_wpt\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wpt functional` \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.46803, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Geary’s C is identical to previously obtained Geary C statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.3.6 Visualizing the Monte Carlo Geary’s C for Functional Waterpoints\n\nhist(bperm_g_f_wpt$res,\n     freq=TRUE,\n     breaks=20,\n     main = \"Histogram of Monte Carlo Geary's C for Functional Waterpoints\",\n     xlab=\"Simulated Geary's C for Functional Waterpoints\")\nabline(v=1, col=\"red\")\n\n\n\n\n\n\n4.4.3.7 Conclusion after review of Monte Carlo histograms of both Moran’s I and Geary’s C for Functional Waterpoints\nIt is acceptable to use either Moran’s I or Geary’s C as their p-values are below 0.05. There is no merit to choose one over the other as distribution of both histograms are not approximately normal. Moving forward, we will be using Moran’s I for functional waterpoints.\n\n\n\n4.4.4 Global Spatial Autocorrelation: Moran’s I & Geary’s C for Non-functional Waterpoints\nIn this section, we will perform Moran’s I statistics testing by using moran.test() and geary.test() of spdep for non-functional waterpoints.\n\n4.4.4.1 Moran’s I test for Non-functional Waterpoints\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nnf_wpt = moran.test(nga_wp$`wpt non-functional`,\n                       listw=rswm_q,\n                       zero.policy = TRUE,\n                       na.action=na.omit)\nnf_wpt\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 19.973, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4301096187     -0.0012953368      0.0004665373 \n\n\nMoran I statistic is found to be 0.4301096187. positive (I>0): Clustered, observations tend to be similar. There is a need to confirm the Moran I statistic by comparing actual value of Moran’s I to Monte Carlo Moran’s I to obtain p-value.\n\n\n4.4.4.2 Computing Monte Carlo Moran’s I for Non-functional Waterpoints\n\nset.seed(1234)\nbperm_nf_wpt = moran.mc(nga_wp$`wpt non-functional`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_nf_wpt\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43011, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Moran’s I is identical to previously obtained Moran I statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.4.3 Visualizing Monte Carlo Moran’s I for Non-functional Waterpoints\n\nhist(bperm_nf_wpt$res, \n     freq=TRUE,\n     xlim = c(-0.1,0.5),\n     breaks=50,\n     main = \"Histogram of Monte Carlo Moran's I for Non-functional Waterpoints\",\n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n4.4.4.4 Geary’s C test for Non-functional Waterpoints\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(nga_wp$`wpt non-functional`, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q \n\nGeary C statistic standard deviate = 14.296, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.6289314781      1.0000000000      0.0006737348 \n\n\nGeary C statistic is found to be 0.6289314781. Small c value (<1): Clustered, observations tend to be similar. There is a need to confirm the Geary C statistic by comparing actual value of Geary’s C to Monte Carlo Geary’s C to obtain p-value.\n\n\n4.4.4.5 Computing Monte Carlo Geary’s C for Non-functional Waterpoints\n\nset.seed(1234)\nbperm_g_nf_wpt=geary.mc(nga_wp$`wpt non-functional`, \n               listw=rswm_q, \n               nsim=999)\nbperm_g_nf_wpt\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.62893, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nMonte Carlo Geary’s C is identical to previously obtained Geary C statistic. The p-value is 0.001 < 0.05, hence the result is statistically significant. Hence we can conclude that there is indeed clustering.\n\n\n4.4.4.6 Visualizing the Monte Carlo Geary’s C for Non-functional Waterpoints\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nhist(bperm_g_nf_wpt$res,\n     freq=TRUE,\n     breaks=20,\n     main = \"Histogram of Monte Carlo Geary's C for Non-functional Waterpoints\",\n     xlab=\"Simulated Geary's C for Non-functional Waterpoint \")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n4.4.3.7 Conclusion after review of Monte Carlo histograms of both Moran’s I and Geary’s C for Non-functional Waterpoints\nIt is acceptable to use either Moran’s I or Geary’s C as their p-values are below 0.05. There is no merit to choose one over the other as distribution of both histograms are not approximately normal. Moving forward, we will be using Moran’s I for non-functional waterpoints."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#spatial-correlogram",
    "href": "Take-home_Ex/Take-home_Ex1.html#spatial-correlogram",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.5 Spatial Correlogram",
    "text": "4.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n4.5.1 Compute Moran’s I correlogram for Functional Waterpoints\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of `wpt functional`. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr_f_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt functional`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr_f_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr_f_wpt)\n\nSpatial correlogram for nga_wp$`wpt functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  5.5181e-01 -1.2953e-03  4.5895e-04           25.818       < 2.2e-16\n2 (773)  4.5396e-01 -1.2953e-03  1.9759e-04           32.388       < 2.2e-16\n3 (773)  3.5993e-01 -1.2953e-03  1.1970e-04           33.017       < 2.2e-16\n4 (773)  2.8542e-01 -1.2953e-03  8.6698e-05           30.793       < 2.2e-16\n5 (773)  1.9300e-01 -1.2953e-03  6.7697e-05           23.614       < 2.2e-16\n6 (773)  1.3391e-01 -1.2953e-03  5.6591e-05           17.973       < 2.2e-16\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nMoran’s I decrease as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Pr(I) is not statistically significant at spatial lag 10 and Moran’s I turns negative starting henceforth.\n\n\n4.5.2 Compute Geary’s C correlogram and plot for Functional Waterpoints\n\nGC_corr_f_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt functional`, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr_f_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(GC_corr_f_wpt)\n\nSpatial correlogram for nga_wp$`wpt functional` \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.46802594  1.00000000 0.00119588         -15.3832       < 2.2e-16 ***\n2 (773) 0.55789502  1.00000000 0.00079243         -15.7052       < 2.2e-16 ***\n3 (773) 0.63636061  1.00000000 0.00063656         -14.4129       < 2.2e-16 ***\n4 (773) 0.70991012  1.00000000 0.00062241         -11.6277       < 2.2e-16 ***\n5 (773) 0.79552249  1.00000000 0.00062612          -8.1718       3.039e-16 ***\n6 (773) 0.86736007  1.00000000 0.00074435          -4.8617       1.164e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nGeary’s C increases as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Geary’s C turns flat staying below 1 starting from spatial lag 7.\n\n\n4.5.3 Compute Moran’s I correlogram for Non-functional Waterpoints\n\nMI_corr_nf_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt non-functional`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr_nf_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr_nf_wpt)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3011e-01 -1.2953e-03  4.6654e-04          19.9729       < 2.2e-16\n2 (773)  2.6815e-01 -1.2953e-03  2.0085e-04          19.0121       < 2.2e-16\n3 (773)  1.9482e-01 -1.2953e-03  1.2168e-04          17.7794       < 2.2e-16\n4 (773)  1.3648e-01 -1.2953e-03  8.8129e-05          14.6761       < 2.2e-16\n5 (773)  6.3707e-02 -1.2953e-03  6.8814e-05           7.8359       4.654e-15\n6 (773)  2.7753e-02 -1.2953e-03  5.7524e-05           3.8300       0.0001282\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nMoran’s I decrease as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Pr(I) is not statistically significant at spatial lag 7 and Moran’s I turns negative starting henceforth.\n\n\n4.5.4 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of `wpt non-functional`. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr_nf_wpt <- sp.correlogram(wm_q, \n                          nga_wp$`wpt non-functional`, \n                          order=8, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr_nf_wpt)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(GC_corr_nf_wpt)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.62893148  1.00000000 0.00067373         -14.2958       < 2.2e-16 ***\n2 (773) 0.75743251  1.00000000 0.00036843         -12.6373       < 2.2e-16 ***\n3 (773) 0.81590194  1.00000000 0.00026738         -11.2586       < 2.2e-16 ***\n4 (773) 0.86991261  1.00000000 0.00023922          -8.4107       < 2.2e-16 ***\n5 (773) 0.95214396  1.00000000 0.00022636          -3.1808        0.001469 ** \n6 (773) 0.99534531  1.00000000 0.00025160          -0.2934        0.769179    \n7 (773) 1.03397466  1.00000000 0.00032633           1.8807        0.060010 .  \n8 (773) 1.05167167  1.00000000 0.00040028           2.5827        0.009804 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nGeary’s C increases as spatial lags increases from 1 to 6. As the order of neighbor increases, the degree of clustering decreases. After multiple testings, Pr(I) is not statistically significant at spatial lag 6, Geary’s C goes above 1 starting from spatial lag 7."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.6 Cluster and Outlier Analysis",
    "text": "4.6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from functional and non-functional waterpoints of Nigeria.\n\n4.6.1 Computing local Moran’s I for Functional Waterpoints\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbor weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of functional waterpoints at the county level.\n\nfips <- order(nga_wp$ADM2_CODE)\nlocalMI_f_wpt <- localmoran(nga_wp$`wpt functional`, rswm_q)\nhead(localMI_f_wpt)\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.4518554 -0.0007743811 0.14895142 1.172791     0.24087944\n2 0.2932012 -0.0002495782 0.04803132 1.338976     0.18057833\n3 0.3949213 -0.0007255814 0.09280546 1.298736     0.19403449\n4 0.4448276 -0.0005462632 0.05227489 1.947952     0.05142074\n5 0.4197113 -0.0005887106 0.07530933 1.531563     0.12563022\n6 0.3375760 -0.0004102032 0.06306252 1.345901     0.17833430\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local Moran’s I statistics under the randomization hypothesis\nVar.Ii: the variance of local Moran’s I statistics under the randomization hypothesis\nZ.Ii:the standard deviate of local Moran’s I statistics\nPr(): the p-value of local Moran’s I statistics\n\nThe code chunk below list the content of the local Moran’s I statistics matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI_f_wpt[fips,], \n  row.names=nga_wp$ADM2_CODE[fips]),\n  check.names=FALSE)\n\n                   Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nNGA001001  4.5186e-01 -7.7438e-04  1.4895e-01  1.1728e+00         0.2409\nNGA001002  2.9320e-01 -2.4958e-04  4.8031e-02  1.3390e+00         0.1806\nNGA001003  3.9492e-01 -7.2558e-04  9.2805e-02  1.2987e+00         0.1940\nNGA001004  4.4483e-01 -5.4626e-04  5.2275e-02  1.9480e+00         0.0514\nNGA001005  4.1971e-01 -5.8871e-04  7.5309e-02  1.5316e+00         0.1256\nNGA001006  3.3758e-01 -4.1020e-04  6.3063e-02  1.3459e+00         0.1783\nNGA001007  3.8528e-01 -5.6729e-04  6.2122e-02  1.5481e+00         0.1216\nNGA001008  3.5824e-01 -3.5785e-04  5.5016e-02  1.5288e+00         0.1263\nNGA001009  2.9481e-01 -2.7853e-04  2.1273e-02  2.0232e+00         0.0430\nNGA001010  4.7116e-01 -7.0178e-04  1.3500e-01  1.2843e+00         0.1991\nNGA001011  4.2117e-01 -7.2558e-04  6.9422e-02  1.6012e+00         0.1093\nNGA001012  3.9201e-01 -6.1053e-04  7.8099e-02  1.4049e+00         0.1600\nNGA001013  3.4753e-01 -4.1020e-04  4.4927e-02  1.6415e+00         0.1007\nNGA001014  2.9501e-01 -2.4958e-04  3.1937e-02  1.6522e+00         0.0985\nNGA001015  3.4670e-01 -3.9235e-04  4.2973e-02  1.6743e+00         0.0941\nNGA001016  3.3482e-01 -3.5785e-04  5.5016e-02  1.4290e+00         0.1530\nNGA001017  5.3082e-01 -7.7438e-04  8.4783e-02  1.8257e+00         0.0679\nNGA002001  4.4610e-01 -7.0178e-04  6.7146e-02  1.7243e+00         0.0847\nNGA002002  4.4887e-01 -5.6729e-04  7.2570e-02  1.6684e+00         0.0952\nNGA002003  2.0624e-01 -7.9938e-04  1.5376e-01  5.2801e-01         0.5975\nNGA002004  3.1418e-01 -3.0906e-04  5.9476e-02  1.2896e+00         0.1972\nNGA002005  4.0293e-01 -4.6613e-04  7.1657e-02  1.5069e+00         0.1318\nNGA002006  2.8152e-01 -6.1053e-04  7.8099e-02  1.0096e+00         0.3127\nNGA002007  4.4541e-01 -7.4978e-04  9.5899e-02  1.4407e+00         0.1497\nNGA002008  5.2669e-01 -6.7837e-04  1.7422e-01  1.2635e+00         0.2064\nNGA002009  8.6851e-02 -8.5056e-04  1.3070e-01  2.4259e-01         0.8083\nNGA002010  5.8365e-01 -9.0333e-04  1.7373e-01  1.4024e+00         0.1608\nNGA002011  4.9454e-01 -5.8871e-04  9.0489e-02  1.6460e+00         0.0998\nNGA002012  1.0643e-01 -7.0178e-04  5.9608e-02  4.3879e-01         0.6608\nNGA002013  4.6459e-01 -5.4626e-04  1.4031e-01  1.2417e+00         0.2143\nNGA002014  5.6711e-01 -9.0333e-04  1.3880e-01  1.5246e+00         0.1274\nNGA002015  6.3017e-01 -9.0333e-04  3.4837e-01  1.0692e+00         0.2850\nNGA002016  4.6682e-01 -8.2477e-04  1.2674e-01  1.3136e+00         0.1890\nNGA002017  4.4741e-01 -7.7438e-04  8.4783e-02  1.5392e+00         0.1237\nNGA002018  3.8569e-01 -4.2845e-04  4.6925e-02  1.7824e+00         0.0747\nNGA002019 -1.4142e-01 -7.9938e-04  2.0527e-01 -3.1037e-01         0.7563\nNGA002020  5.1102e-01 -7.4978e-04  1.1523e-01  1.5076e+00         0.1316\nNGA002021  4.2497e-01 -5.0540e-04  1.9499e-01  9.6354e-01         0.3353\nNGA003001  3.3242e-01 -3.9235e-04  5.0201e-02  1.4854e+00         0.1374\nNGA003002  4.4791e-01 -7.9938e-04  1.2284e-01  1.2802e+00         0.2005\nNGA003003  2.1515e-01 -1.7226e-04  2.6489e-02  1.3230e+00         0.1858\nNGA003004  3.3823e-01 -4.8557e-04  6.2122e-02  1.3590e+00         0.1742\nNGA003005  3.5773e-01 -4.6613e-04  5.1050e-02  1.5854e+00         0.1129\nNGA003006  4.0264e-01 -5.2563e-04  8.0799e-02  1.4183e+00         0.1561\nNGA003007  3.1094e-01 -7.0178e-04  8.9763e-02  1.0402e+00         0.2983\nNGA003008  4.3972e-01 -7.0178e-04  1.0786e-01  1.3411e+00         0.1799\nNGA003009  3.0879e-01 -4.4709e-04  6.8731e-02  1.1795e+00         0.2382\nNGA003010  3.0637e-01 -4.4709e-04  5.7201e-02  1.2828e+00         0.1995\nNGA003011  4.0948e-01 -6.7837e-04  1.3050e-01  1.1354e+00         0.2562\nNGA003012  3.2528e-01 -3.9235e-04  4.2973e-02  1.5710e+00         0.1162\nNGA003013  3.0995e-01 -3.0906e-04  4.7519e-02  1.4233e+00         0.1547\nNGA003014  3.7884e-01 -5.4626e-04  1.4031e-01  1.0128e+00         0.3111\nNGA003015  4.7522e-01 -7.2558e-04  9.2805e-02  1.5623e+00         0.1182\nNGA003016  2.8844e-01 -5.6729e-04  1.0914e-01  8.7480e-01         0.3817\nNGA003017  4.8339e-01 -6.7837e-04  1.3050e-01  1.3400e+00         0.1802\nNGA003018  2.2774e-01 -1.8415e-04  2.3567e-02  1.4847e+00         0.1376\nNGA003019  3.3201e-01 -4.6613e-04  8.9688e-02  1.1102e+00         0.2669\nNGA003020  2.7463e-01 -3.5785e-04  6.8860e-02  1.0479e+00         0.2947\nNGA003021  2.0296e-01 -1.7226e-04  1.6491e-02  1.5818e+00         0.1137\nNGA003022  3.7258e-01 -4.6613e-04  5.1050e-02  1.6511e+00         0.0987\nNGA003023  2.7161e-01 -3.5785e-04  3.9195e-02  1.3737e+00         0.1695\nNGA003024  2.8081e-01 -3.2493e-04  4.1577e-02  1.3788e+00         0.1680\nNGA003025  3.2047e-01 -6.1053e-04  1.1745e-01  9.3688e-01         0.3488\nNGA003026  3.6652e-01 -6.5536e-04  8.3830e-02  1.2682e+00         0.2047\nNGA003027  4.8488e-01 -6.7837e-04  1.7422e-01  1.1633e+00         0.2447\nNGA003028  4.4158e-01 -6.7837e-04  8.6771e-02  1.5014e+00         0.1333\nNGA003029  3.4283e-01 -7.0178e-04  8.9763e-02  1.1466e+00         0.2515\nNGA003030  3.9253e-01 -4.6613e-04  7.1657e-02  1.4681e+00         0.1421\nNGA003031  2.4203e-01 -2.0913e-04  1.5974e-02  1.9166e+00         0.0553\nNGA004001  5.4805e-01 -7.7438e-04  1.1901e-01  1.5909e+00         0.1116\nNGA004002  3.9698e-01 -4.6613e-04  5.9636e-02  1.6275e+00         0.1036\nNGA004003  3.6491e-01 -3.5785e-04  3.4251e-02  1.9737e+00         0.0484\nNGA004004  4.0996e-01 -3.9235e-04  4.2973e-02  1.9795e+00         0.0478\nNGA004005  5.0305e-01 -7.0178e-04  6.7146e-02  1.9440e+00         0.0519\nNGA004006  4.9324e-01 -6.7837e-04  1.0426e-01  1.5297e+00         0.1261\nNGA004007  5.1855e-01 -7.4978e-04  1.1523e-01  1.5298e+00         0.1261\nNGA004008  4.1035e-01 -4.6613e-04  7.1657e-02  1.5347e+00         0.1249\nNGA004009  5.5463e-01 -8.7674e-04  1.3472e-01  1.5135e+00         0.1302\nNGA004010  5.2479e-01 -8.5056e-04  9.3116e-02  1.7226e+00         0.0850\nNGA004011  5.3103e-01 -7.2558e-04  7.9444e-02  1.8866e+00         0.0592\nNGA004012  3.5752e-01 -3.0906e-04  3.9547e-02  1.7994e+00         0.0720\nNGA004013  4.4468e-01 -5.4626e-04  5.9821e-02  1.8204e+00         0.0687\nNGA004014  5.4499e-01 -6.1053e-04  1.5681e-01  1.3778e+00         0.1683\nNGA004015  5.6259e-01 -8.5056e-04  8.1370e-02  1.9752e+00         0.0482\nNGA004016  4.1446e-01 -5.2563e-04  4.0136e-02  2.0714e+00         0.0383\nNGA004017  4.8403e-01 -6.7837e-04  7.4278e-02  1.7785e+00         0.0753\nNGA004018  5.3932e-01 -7.9938e-04  2.0527e-01  1.1921e+00         0.2332\nNGA004019  4.9713e-01 -6.3275e-04  9.7253e-02  1.5961e+00         0.1105\nNGA004020  5.4481e-01 -7.0178e-04  8.9763e-02  1.8208e+00         0.0686\nNGA004021  4.2883e-01 -5.0540e-04  6.4658e-02  1.6885e+00         0.0913\nNGA005001  2.8486e-03 -5.8324e-08  5.5844e-06  1.2054e+00         0.2280\nNGA005002  1.5164e-01 -5.9053e-04  9.0769e-02  5.0528e-01         0.6134\nNGA005003  2.4369e-01 -1.0087e-04  1.9415e-02  1.7496e+00         0.0802\nNGA005004 -1.9087e-01 -3.4119e-04  4.3657e-02 -9.1187e-01         0.3618\nNGA005005  1.1261e-02 -1.2865e-04  1.4095e-02  9.5940e-02         0.9236\nNGA005006  1.5145e+00 -6.3990e-03  2.4542e+00  9.7081e-01         0.3316\nNGA005007  1.3087e+00 -1.0551e-02  1.3362e+00  1.1413e+00         0.2538\nNGA005008  3.3711e-02 -1.1292e-05  1.0811e-03  1.0256e+00         0.3051\nNGA005009 -3.5041e-02 -3.9450e-06  7.5941e-04 -1.2714e+00         0.2036\nNGA005010  1.1102e+00 -3.5927e-04  3.4387e-02  5.9890e+00         0.0000\nNGA005011  3.1044e-01 -1.1956e-04  2.3013e-02  2.0472e+00         0.0406\nNGA005012  8.9500e-02 -2.2061e-05  2.4172e-03  1.8209e+00         0.0686\nNGA005013 -6.8766e-02 -1.4966e-04  2.3014e-02 -4.5230e-01         0.6511\nNGA005014 -3.4769e-03 -4.8722e-04  7.4897e-02 -1.0924e-02         0.9913\nNGA005015  1.0552e-01 -1.1292e-05  1.0811e-03  3.2094e+00         0.0013\nNGA005016  7.4193e-01 -1.4867e-03  2.2832e-01  1.5558e+00         0.1197\nNGA005017  4.9956e-01 -9.6001e-04  8.1520e-02  1.7530e+00         0.0796\nNGA005018  2.1834e-01 -3.2628e-04  2.4919e-02  1.3852e+00         0.1660\nNGA005019  1.0059e+00 -5.9097e-03  1.1309e+00  9.5146e-01         0.3414\nNGA005020  8.8578e+00 -1.2761e-02  1.3804e+00  7.5501e+00         0.0000\nNGA006001  4.8465e-01 -7.4978e-04  1.1523e-01  1.4299e+00         0.1527\nNGA006002  5.8551e-01 -7.9938e-04  1.5376e-01  1.4952e+00         0.1348\nNGA006003  4.1528e-01 -4.8557e-04  1.2473e-01  1.1772e+00         0.2391\nNGA006004  4.4315e-01 -5.4626e-04  1.4031e-01  1.1845e+00         0.2362\nNGA006005  3.8535e-01 -4.2845e-04  5.4817e-02  1.6477e+00         0.0994\nNGA006006  4.2439e-01 -5.4626e-04  4.6406e-02  1.9726e+00         0.0485\nNGA006007  4.7826e-01 -6.5536e-04  7.1760e-02  1.7878e+00         0.0738\nNGA006008  4.1137e-01 -5.8871e-04  7.5309e-02  1.5012e+00         0.1333\nNGA007001 -1.0763e-02 -8.2788e-06  7.0368e-04 -4.0543e-01         0.6852\nNGA007002  2.4112e-01 -3.5785e-04  5.5016e-02  1.0295e+00         0.3032\nNGA007003  4.6453e-01 -6.1053e-04  9.3841e-02  1.5184e+00         0.1289\nNGA007004 -5.8778e-02 -2.5076e-04  3.2089e-02 -3.2672e-01         0.7439\nNGA007005  6.1781e-02 -6.8249e-05  1.0496e-02  6.0371e-01         0.5460\nNGA007006  3.4886e-02 -2.0913e-04  1.7772e-02  2.6326e-01         0.7924\nNGA007007 -5.9866e-02 -1.0923e-04  9.2837e-03 -6.2020e-01         0.5351\nNGA007008  3.4071e-01 -9.0333e-04  1.1552e-01  1.0051e+00         0.3148\nNGA007009  1.0579e-02 -2.1711e-05  2.3788e-03  2.1735e-01         0.8279\nNGA007010  3.3910e-01 -1.8887e-03  2.0655e-01  7.5028e-01         0.4531\nNGA007011 -2.6308e-02 -2.6385e-04  3.3764e-02 -1.4174e-01         0.8873\nNGA007012 -4.4870e-03 -3.0906e-04  4.7519e-02 -1.9166e-02         0.9847\nNGA007013  8.1628e-02 -4.7433e-05  9.1304e-03  8.5476e-01         0.3927\nNGA007014  6.2723e-03 -4.7203e-07  9.0865e-05  6.5805e-01         0.5105\nNGA007015  3.3156e-01 -2.9360e-04  4.5141e-02  1.5619e+00         0.1183\nNGA007016  3.3011e-01 -3.4119e-04  6.5656e-02  1.2896e+00         0.1972\nNGA007017  3.2754e-01 -6.6146e-03  8.4106e-01  3.6437e-01         0.7156\nNGA007018  3.3998e-01 -5.4626e-04  6.9882e-02  1.2882e+00         0.1977\nNGA007019  2.6669e-01 -4.2845e-04  4.1005e-02  1.3191e+00         0.1871\nNGA007020 -8.1003e-04 -2.6445e-05  5.0905e-03 -1.0983e-02         0.9912\nNGA007021  8.4319e-04 -1.3896e-04  2.6746e-02  6.0055e-03         0.9952\nNGA007022 -3.2536e-02 -3.0809e-05  3.9433e-03 -5.1763e-01         0.6047\nNGA007023 -4.0463e-03 -1.1993e-06  1.8445e-04 -2.9784e-01         0.7658\nNGA008001  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008002  2.8780e-01 -2.9360e-04  2.8103e-02  1.7186e+00         0.0857\nNGA008003  6.9323e-01 -9.0333e-04  1.3880e-01  1.8631e+00         0.0624\nNGA008004  4.5545e-02 -5.3769e-05  8.2691e-03  5.0145e-01         0.6161\nNGA008005 -4.2430e-02 -6.0970e-06  5.8377e-04 -1.7558e+00         0.0791\nNGA008006  2.1770e-01 -3.5785e-04  9.1933e-02  7.1917e-01         0.4720\nNGA008007  5.3067e-01 -9.0333e-04  8.6413e-02  1.8083e+00         0.0706\nNGA008008  6.9392e-01 -9.0333e-04  1.1552e-01  2.0443e+00         0.0409\nNGA008009  6.8290e-01 -9.0333e-04  1.3880e-01  1.8354e+00         0.0664\nNGA008010  6.9565e-01 -9.0333e-04  1.1552e-01  2.0494e+00         0.0404\nNGA008011  6.9220e-01 -9.0333e-04  1.7373e-01  1.6629e+00         0.0963\nNGA008012  2.3388e-01 -2.7853e-04  3.0509e-02  1.3406e+00         0.1800\nNGA008013  2.8494e-02 -3.9450e-06  7.5941e-04  1.0341e+00         0.3011\nNGA008014  6.0433e-01 -9.0333e-04  1.3880e-01  1.6245e+00         0.1043\nNGA008015  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008016  5.0616e-01 -8.5056e-04  6.4925e-02  1.9898e+00         0.0466\nNGA008017  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008018  1.7986e-01 -8.2477e-04  1.5864e-01  4.5365e-01         0.6501\nNGA008019  5.9990e-01 -9.0333e-04  9.8888e-02  1.9106e+00         0.0561\nNGA008020  5.4654e-01 -7.4978e-04  8.2092e-02  1.9102e+00         0.0561\nNGA008021 -1.7434e-01 -2.1022e-04  8.1127e-02 -6.1134e-01         0.5410\nNGA008022  6.9737e-01 -9.0333e-04  1.7373e-01  1.6753e+00         0.0939\nNGA008023  6.8496e-01 -9.0333e-04  1.3880e-01  1.8409e+00         0.0656\nNGA008024  6.9530e-01 -9.0333e-04  1.3880e-01  1.8687e+00         0.0617\nNGA008025  6.9737e-01 -9.0333e-04  2.3194e-01  1.4499e+00         0.1471\nNGA008026  5.8373e-01 -8.7674e-04  9.5980e-02  1.8870e+00         0.0592\nNGA008027  5.3655e-02 -1.1875e-04  1.3009e-02  4.7146e-01         0.6373\nNGA009001 -7.9968e-02 -2.6061e-05  4.0080e-03 -1.2627e+00         0.2067\nNGA009002 -3.0993e-02 -2.7853e-04  3.0509e-02 -1.7585e-01         0.8604\nNGA009003  1.2915e-01 -1.1875e-04  2.2856e-02  8.5508e-01         0.3925\nNGA009005 -1.1555e-01 -1.0923e-04  1.6798e-02 -8.9067e-01         0.3731\nNGA009006  6.3806e-02 -2.3570e-04  2.2562e-02  4.2635e-01         0.6699\nNGA009007  4.3270e-02 -7.0376e-04  1.0816e-01  1.3371e-01         0.8936\nNGA009008  1.9491e-01 -5.6729e-04  1.4571e-01  5.1209e-01         0.6086\nNGA009009  1.8432e-01 -4.1020e-04  1.0538e-01  5.6905e-01         0.5693\nNGA009010 -1.7375e-02 -8.3081e-05  2.1350e-02 -1.1834e-01         0.9058\nNGA009011 -5.7507e-03 -5.9134e-06  7.5690e-04 -2.0881e-01         0.8346\nNGA009012  9.3411e-03 -2.4905e-06  6.4005e-04  3.6932e-01         0.7119\nNGA009013  1.0924e-02 -1.2828e-06  1.6419e-04  8.5264e-01         0.3939\nNGA009014  1.3306e-02 -1.6171e-04  2.0696e-02  9.3617e-02         0.9254\nNGA009015  1.0441e-02 -4.2196e-07  2.9267e-05  1.9300e+00         0.0536\nNGA009016  4.2319e-02 -6.1086e-05  9.3943e-03  4.3725e-01         0.6619\nNGA009017 -3.1027e-01 -2.9325e-03  4.4968e-01 -4.5832e-01         0.6467\nNGA009018  1.2179e-01 -7.5809e-05  7.2580e-03  1.4304e+00         0.1526\nNGA010001  5.7500e-01 -8.7674e-04  1.6862e-01  1.4024e+00         0.1608\nNGA010002  4.9265e-01 -7.2558e-04  7.9444e-02  1.7504e+00         0.0800\nNGA010003  6.1574e-01 -8.7674e-04  1.3472e-01  1.6799e+00         0.0930\nNGA010004  6.2437e-01 -8.2477e-04  1.5864e-01  1.5697e+00         0.1165\nNGA010005  4.1193e-01 -7.0178e-04  1.3500e-01  1.1231e+00         0.2614\nNGA010006  4.6009e-01 -7.2558e-04  1.1151e-01  1.3799e+00         0.1676\nNGA010007  5.6074e-01 -8.7674e-04  1.3472e-01  1.5301e+00         0.1260\nNGA010008  4.9070e-01 -7.9938e-04  1.5376e-01  1.2534e+00         0.2100\nNGA010009  3.3679e-01 -5.2563e-04  1.0113e-01  1.0607e+00         0.2888\nNGA010010  3.9440e-01 -5.8871e-04  9.0489e-02  1.3131e+00         0.1892\nNGA010011  2.3902e-01 -1.8415e-04  1.7629e-02  1.8016e+00         0.0716\nNGA010012  3.4779e-01 -4.8557e-04  5.3178e-02  1.5103e+00         0.1310\nNGA010013  5.0043e-01 -8.5056e-04  9.3116e-02  1.6427e+00         0.1004\nNGA010014  3.4502e-01 -3.0906e-04  4.7519e-02  1.5842e+00         0.1132\nNGA010015  4.2792e-01 -6.3275e-04  6.9286e-02  1.6281e+00         0.1035\nNGA010016  5.3425e-01 -8.5056e-04  1.3070e-01  1.4801e+00         0.1388\nNGA010017  5.4039e-01 -7.7438e-04  1.4895e-01  1.4022e+00         0.1609\nNGA010018  5.2772e-01 -7.2558e-04  1.3957e-01  1.4145e+00         0.1572\nNGA010019  3.0538e-01 -2.6385e-04  2.0153e-02  2.1530e+00         0.0313\nNGA010020  5.2556e-01 -6.3275e-04  6.9286e-02  1.9991e+00         0.0456\nNGA010021  3.4988e-01 -5.6729e-04  1.0914e-01  1.0608e+00         0.2888\nNGA010022  5.1820e-01 -8.5056e-04  1.3070e-01  1.4357e+00         0.1511\nNGA010023  4.0573e-01 -7.2558e-04  6.1628e-02  1.6373e+00         0.1016\nNGA010024  3.8372e-01 -3.0906e-04  3.9547e-02  1.9311e+00         0.0535\nNGA010025  5.7296e-01 -8.7674e-04  1.3472e-01  1.5634e+00         0.1180\nNGA011001  1.7278e-01 -1.0446e-03  1.1434e-01  5.1406e-01         0.6072\nNGA011002  1.7232e-02 -2.6445e-05  4.0671e-03  2.7062e-01         0.7867\nNGA011003  2.6386e-01 -7.0178e-04  8.9763e-02  8.8304e-01         0.3772\nNGA011004  3.4479e-02 -2.2061e-05  3.3929e-03  5.9231e-01         0.5536\nNGA011005  1.5214e-01 -4.7951e-05  6.1373e-03  1.9426e+00         0.0521\nNGA011006  6.7844e-01 -1.3199e-03  2.5374e-01  1.3495e+00         0.1772\nNGA011007 -2.5002e-02 -1.1993e-06  1.5351e-04 -2.0179e+00         0.0436\nNGA011008  9.3699e-02 -3.7635e-04  4.8154e-02  4.2871e-01         0.6681\nNGA011009  3.8576e-01 -7.4978e-04  9.5899e-02  1.2481e+00         0.2120\nNGA011010 -1.5768e-01 -6.7631e-05  1.0401e-02 -1.5454e+00         0.1222\nNGA011011 -3.6127e-02 -1.0087e-04  1.2910e-02 -3.1707e-01         0.7512\nNGA011012  1.0538e-01 -3.7635e-04  7.2420e-02  3.9297e-01         0.6943\nNGA011013  3.2087e-01 -3.4349e-03  3.2775e-01  5.6647e-01         0.5711\nNGA012001  1.2435e-01 -2.3570e-04  1.6345e-02  9.7452e-01         0.3298\nNGA012002  1.8441e-01 -2.7853e-04  7.1561e-02  6.9039e-01         0.4899\nNGA012003  4.3991e-01 -7.4978e-04  1.4422e-01  1.1603e+00         0.2459\nNGA012004  4.1665e-01 -5.6729e-04  8.7198e-02  1.4129e+00         0.1577\nNGA012005  4.6989e-01 -7.0178e-04  5.9608e-02  1.9275e+00         0.0539\nNGA012006  3.5190e-01 -5.2563e-04  6.7245e-02  1.3591e+00         0.1741\nNGA012007  3.8529e-01 -5.2563e-04  8.0799e-02  1.3573e+00         0.1747\nNGA012008  3.2180e-01 -4.8557e-04  4.1252e-02  1.5868e+00         0.1126\nNGA012009  1.6530e-01 -1.0012e-04  1.0969e-02  1.5793e+00         0.1143\nNGA012010  4.3091e-01 -7.0178e-04  8.9763e-02  1.4406e+00         0.1497\nNGA012011  2.0987e-01 -2.3570e-04  2.5819e-02  1.3076e+00         0.1910\nNGA012012  1.8135e-01 -2.6385e-04  6.7792e-02  6.9751e-01         0.4855\nNGA012013  2.0824e-01 -1.2865e-04  8.1682e-03  2.3055e+00         0.0211\nNGA012014  1.2078e-01 -1.2865e-04  9.8277e-03  1.2196e+00         0.2226\nNGA012015  1.3521e-01 -1.2865e-04  1.9784e-02  9.6222e-01         0.3359\nNGA012016  2.0414e-01 -2.3570e-04  3.6242e-02  1.0736e+00         0.2830\nNGA012017  3.0165e-01 -6.5536e-04  1.0073e-01  9.5253e-01         0.3408\nNGA012018  2.1036e-01 -2.0913e-04  2.6763e-02  1.2872e+00         0.1980\nNGA013001 -2.2027e-02 -1.1292e-05  1.7366e-03 -5.2831e-01         0.5973\nNGA013002 -4.5947e-03 -8.4958e-06  8.1345e-04 -1.6080e-01         0.8723\nNGA013003 -3.0049e-01 -6.7837e-04  1.3050e-01 -8.2994e-01         0.4066\nNGA013004  2.1132e-03 -1.7757e-05  2.7310e-03  4.0777e-02         0.9675\nNGA013005  8.0453e-04 -4.2196e-07  4.6233e-05  1.1838e-01         0.9058\nNGA013006 -1.4218e-02 -3.9384e-04  3.7694e-02 -7.1205e-02         0.9432\nNGA013007 -9.8671e-02 -2.9360e-04  4.5141e-02 -4.6303e-01         0.6433\nNGA013008  2.1727e-01 -4.6613e-04  7.1657e-02  8.1341e-01         0.4160\nNGA013009  1.5340e-03 -4.1632e-08  6.4029e-06  6.0625e-01         0.5443\nNGA013010  9.1133e-02 -2.3570e-04  3.6242e-02  4.7995e-01         0.6313\nNGA013011  1.3527e-02 -5.9134e-06  6.4793e-04  5.3165e-01         0.5950\nNGA013012  2.1463e-01 -6.7837e-04  1.3050e-01  5.9602e-01         0.5512\nNGA013013  7.4880e-03 -1.0923e-04  1.0458e-02  7.4291e-02         0.9408\nNGA013014  8.6481e-02 -3.5785e-04  4.5787e-02  4.0583e-01         0.6849\nNGA013015  1.3598e-01 -3.9235e-04  5.0201e-02  6.0864e-01         0.5428\nNGA013016  7.1142e-02 -7.5158e-05  1.1558e-02  6.6243e-01         0.5077\nNGA014001  3.0170e-01 -5.2563e-04  8.0799e-02  1.0632e+00         0.2877\nNGA014002  4.4378e-01 -6.3275e-04  8.0939e-02  1.5621e+00         0.1183\nNGA014003  4.0354e-01 -5.6729e-04  8.7198e-02  1.3685e+00         0.1712\nNGA014004  3.5534e-01 -4.4709e-04  6.8731e-02  1.3571e+00         0.1748\nNGA014005  4.0737e-01 -7.0178e-04  1.3500e-01  1.1107e+00         0.2667\nNGA014006  5.3266e-01 -7.0178e-04  1.0786e-01  1.6241e+00         0.1044\nNGA014007  4.8493e-01 -6.1053e-04  9.3841e-02  1.5850e+00         0.1130\nNGA014008  3.7063e-01 -4.2845e-04  6.5866e-02  1.4458e+00         0.1482\nNGA014009  4.5115e-01 -5.8871e-04  9.0489e-02  1.5017e+00         0.1332\nNGA014010  3.5547e-01 -8.7674e-04  7.4456e-02  1.3059e+00         0.1916\nNGA014011  9.8230e-02 -2.2222e-04  1.6973e-02  7.5569e-01         0.4498\nNGA014012  4.0107e-01 -5.8871e-04  9.0489e-02  1.3352e+00         0.1818\nNGA014013  5.1155e-01 -6.3275e-04  8.0939e-02  1.8003e+00         0.0718\nNGA014014  5.4518e-01 -7.7438e-04  7.4088e-02  2.0058e+00         0.0449\nNGA014015  4.9407e-01 -7.4978e-04  1.1523e-01  1.4577e+00         0.1449\nNGA014016  3.8044e-01 -3.7490e-04  3.1854e-02  2.1337e+00         0.0329\nNGA014017  5.3876e-01 -8.5056e-04  8.1370e-02  1.8917e+00         0.0585\nNGA015001  4.2697e-02 -1.7226e-04  1.8871e-02  3.1207e-01         0.7550\nNGA015002 -1.1726e-02 -1.4484e-05  1.3868e-03 -3.1450e-01         0.7531\nNGA015003  5.7367e-03 -1.7757e-05  3.4182e-03  9.8426e-02         0.9216\nNGA015004  2.6718e-03 -4.2196e-07  5.4010e-05  3.6361e-01         0.7162\nNGA015005 -2.0317e-03 -1.1875e-04  1.8261e-02 -1.4156e-02         0.9887\nNGA015006 -7.2250e-02 -1.2951e-04  3.3279e-02 -3.9534e-01         0.6926\nNGA016001  2.0834e-01 -8.7896e-04  7.4644e-02  7.6579e-01         0.4438\nNGA016002  2.4856e-01 -1.1936e-03  1.1415e-01  7.3924e-01         0.4598\nNGA016003  3.7708e-01 -2.7978e-04  5.3842e-02  1.6263e+00         0.1039\nNGA016004 -2.3683e-02 -4.4709e-04  4.8966e-02 -1.0501e-01         0.9164\nNGA016005 -4.4322e-02 -1.4484e-05  2.2277e-03 -9.3876e-01         0.3479\nNGA016006 -1.5947e-01 -2.6385e-04  1.0182e-01 -4.9893e-01         0.6178\nNGA016007  1.2312e+00 -3.3828e-03  6.4899e-01  1.5325e+00         0.1254\nNGA016008  3.8042e-03 -1.7757e-05  2.2728e-03  8.0168e-02         0.9361\nNGA016009 -1.1086e-02 -1.2828e-06  2.4693e-04 -7.0542e-01         0.4805\nNGA016010  4.7222e-01 -8.2692e-04  1.2707e-01  1.3270e+00         0.1845\nNGA016011  4.2244e-02 -6.8032e-04  8.7021e-02  1.4551e-01         0.8843\nNGA017001  3.6697e-01 -4.4709e-04  4.8966e-02  1.6604e+00         0.0968\nNGA017002  3.8244e-01 -4.8557e-04  5.3178e-02  1.6605e+00         0.0968\nNGA017003  3.7633e-01 -4.2845e-04  6.5866e-02  1.4680e+00         0.1421\nNGA017004  4.0026e-01 -5.6729e-04  8.7198e-02  1.3574e+00         0.1747\nNGA017005  5.5204e-01 -7.2558e-04  6.9422e-02  2.0979e+00         0.0359\nNGA017006  5.5954e-01 -7.7438e-04  1.1901e-01  1.6242e+00         0.1043\nNGA017007  4.4128e-01 -6.7837e-04  1.0426e-01  1.3687e+00         0.1711\nNGA017008  4.3414e-01 -7.2558e-04  1.1151e-01  1.3023e+00         0.1928\nNGA017009  3.1377e-01 -2.4958e-04  2.7339e-02  1.8992e+00         0.0575\nNGA017010  5.1667e-01 -7.4978e-04  1.1523e-01  1.5243e+00         0.1274\nNGA017011  4.1589e-01 -5.8871e-04  5.6335e-02  1.7547e+00         0.0793\nNGA017012  2.6112e-01 -3.7490e-04  3.5883e-02  1.3805e+00         0.1674\nNGA017013  5.5832e-01 -8.5056e-04  1.3070e-01  1.5467e+00         0.1219\nNGA017014  4.9365e-01 -5.6729e-04  8.7198e-02  1.6737e+00         0.0942\nNGA017015  5.6033e-01 -8.5056e-04  1.3070e-01  1.5522e+00         0.1206\nNGA017016  3.9160e-01 -5.2563e-04  8.0799e-02  1.3795e+00         0.1677\nNGA017017  2.9835e-01 -5.2563e-04  5.0302e-02  1.3326e+00         0.1827\nNGA017018 -9.0485e-02 -3.6404e-05  3.9886e-03 -1.4322e+00         0.1521\nNGA017019  4.5970e-01 -5.8871e-04  5.6335e-02  1.9393e+00         0.0525\nNGA017020  4.3162e-01 -4.2845e-04  5.4817e-02  1.8453e+00         0.0650\nNGA017021  5.0836e-01 -7.0178e-04  8.9763e-02  1.6991e+00         0.0893\nNGA017022  5.3880e-01 -7.7438e-04  9.9042e-02  1.7145e+00         0.0864\nNGA017023  4.9298e-01 -7.2558e-04  1.3957e-01  1.3215e+00         0.1863\nNGA017024  3.2212e-01 -4.4709e-04  5.7201e-02  1.3487e+00         0.1774\nNGA017025  8.4471e-02 -4.1495e-05  5.3110e-03  1.1597e+00         0.2462\nNGA017026  2.1566e-01 -4.1020e-04  1.5827e-01  5.4313e-01         0.5870\nNGA017027  5.5124e-01 -8.7674e-04  1.1212e-01  1.6488e+00         0.0992\nNGA018001  1.6980e+01 -6.4392e-02  6.6011e+00  6.6340e+00         0.0000\nNGA018002  2.0886e+01 -8.3494e-02  1.1769e+01  6.1124e+00         0.0000\nNGA018003  1.8991e+01 -5.1539e-02  6.2569e+00  7.6129e+00         0.0000\nNGA018004  1.8331e+00 -1.2246e-03  1.1711e-01  5.3601e+00         0.0000\nNGA018005  1.6978e+00 -7.2071e-03  1.1004e+00  1.6253e+00         0.1041\nNGA018006  2.3768e+00 -1.5213e-03  1.4544e-01  6.2364e+00         0.0000\nNGA018007  1.5506e+01 -2.2751e-02  2.8459e+00  9.2051e+00         0.0000\nNGA018008  1.1903e+01 -1.4637e-02  1.3810e+00  1.0142e+01         0.0000\nNGA018009  5.7070e+00 -3.8654e-03  9.8955e-01  5.7410e+00         0.0000\nNGA018010  8.7606e+00 -1.3372e-02  1.4456e+00  7.2975e+00         0.0000\nNGA018011  6.2277e-01 -6.8032e-04  6.5095e-02  2.4436e+00         0.0145\nNGA018012  9.9999e-01 -1.0160e-03  1.2992e-01  2.7772e+00         0.0055\nNGA018013 -1.0057e+00 -6.7631e-05  1.7380e-02 -7.6281e+00         0.0000\nNGA018014  5.3645e+00 -5.1163e-03  6.5153e-01  6.6523e+00         0.0000\nNGA018015  7.2275e+00 -7.8250e-03  9.9375e-01  7.2581e+00         0.0000\nNGA018016  1.6881e+01 -3.2970e-02  3.0528e+00  9.6806e+00         0.0000\nNGA018017  5.1919e+00 -8.3865e-03  9.1120e-01  5.4478e+00         0.0000\nNGA018018  1.3664e+01 -1.8170e-02  2.2834e+00  9.0544e+00         0.0000\nNGA018019  6.5345e+00 -2.7996e-02  4.1852e+00  3.2078e+00         0.0013\nNGA018020  2.0590e+00 -5.6907e-04  8.7473e-02  6.9638e+00         0.0000\nNGA018021  1.0558e+01 -7.5129e-03  1.1468e+00  9.8663e+00         0.0000\nNGA018022  1.3339e+00 -1.1002e-04  1.6919e-02  1.0256e+01         0.0000\nNGA018023  3.4086e+00 -2.4257e-03  3.0973e-01  6.1290e+00         0.0000\nNGA018024  1.4700e+00 -1.6273e-03  2.4988e-01  2.9440e+00         0.0032\nNGA018025  1.6323e+01 -3.3132e-02  4.1004e+00  8.0772e+00         0.0000\nNGA018026  1.7179e+01 -5.2148e-02  6.3268e+00  6.8504e+00         0.0000\nNGA018027  1.7138e+00 -3.8654e-03  5.9219e-01  2.2321e+00         0.0256\nNGA019001 -6.1914e-02 -6.0501e-05  4.6219e-03 -9.0982e-01         0.3629\nNGA019002 -1.0845e-01 -3.5785e-04  3.4251e-02 -5.8404e-01         0.5592\nNGA019003  1.6350e-01 -6.1238e-04  5.2019e-02  7.1955e-01         0.4718\nNGA019004  1.6455e-01 -6.1086e-05  5.1918e-03  2.2845e+00         0.0223\nNGA019005  3.9472e-01 -1.3985e-04  1.7897e-02  2.9515e+00         0.0032\nNGA019006 -2.5401e-01 -6.0501e-05  9.3044e-03 -2.6327e+00         0.0085\nNGA019007  3.6559e-01 -4.3000e-04  4.7095e-02  1.6866e+00         0.0917\nNGA019008  4.3823e-01 -1.0160e-03  1.1121e-01  1.3171e+00         0.1878\nNGA019009  4.4318e-04 -4.7203e-07  1.2131e-04  4.0280e-02         0.9679\nNGA019010 -3.6467e-02 -1.8517e-04  4.7580e-02 -1.6633e-01         0.8679\nNGA019011  4.7094e-05 -2.1711e-05  2.3788e-03  1.4107e-03         0.9989\nNGA019012  2.6585e+00 -7.3592e-03  6.2091e-01  3.3831e+00         0.0007\nNGA019013  2.7974e-01 -3.1226e-05  6.0107e-03  3.6086e+00         0.0003\nNGA019014  7.1911e-01 -3.2628e-04  5.0165e-02  3.2121e+00         0.0013\nNGA019015  1.8721e+00 -4.9269e-03  6.2752e-01  2.3695e+00         0.0178\nNGA019016  2.0039e-01 -6.1086e-05  7.8184e-03  2.2670e+00         0.0234\nNGA019017  4.8601e-01 -3.4257e-04  5.2669e-02  2.1192e+00         0.0341\nNGA019018  4.5546e-01 -3.4257e-04  6.5922e-02  1.7752e+00         0.0759\nNGA019019  2.0111e+00 -4.1473e-03  7.9504e-01  2.2602e+00         0.0238\nNGA019020  3.2344e-02 -3.1226e-05  3.4213e-03  5.5350e-01         0.5799\nNGA019021  2.5838e+00 -7.5129e-03  7.1394e-01  3.0669e+00         0.0022\nNGA019022  3.0028e+00 -2.2886e-02  2.8623e+00  1.7884e+00         0.0737\nNGA019023  1.5087e+00 -1.8120e-03  3.4818e-01  2.5599e+00         0.0105\nNGA020001  1.3335e+00 -1.8887e-03  2.4129e-01  2.7186e+00         0.0066\nNGA020002  2.8307e+00 -5.1802e-03  7.9258e-01  3.1854e+00         0.0014\nNGA020003  9.4255e-01 -4.8026e-03  5.2369e-01  1.3091e+00         0.1905\nNGA020004  1.2232e-01 -3.6404e-05  5.5986e-03  1.6353e+00         0.1020\nNGA020005  5.6631e-01 -4.1172e-04  6.3296e-02  2.2526e+00         0.0243\nNGA020006  2.7720e-01 -3.4257e-04  3.7523e-02  1.4328e+00         0.1519\nNGA020007  3.8683e-01 -7.4358e-03  1.4207e+00  3.3077e-01         0.7408\nNGA020008  2.0995e+00 -5.4802e-04  8.4238e-02  7.2356e+00         0.0000\nNGA020009  4.9218e-01 -1.2877e-03  1.6461e-01  1.2163e+00         0.2239\nNGA020010  1.2394e+00 -1.7743e-03  2.2670e-01  2.6067e+00         0.0091\nNGA020011 -1.0298e-01 -3.0809e-05  4.7382e-03 -1.4957e+00         0.1347\nNGA020012 -2.0995e-01 -1.6076e-04  2.4721e-02 -1.3343e+00         0.1821\nNGA020013  1.6107e+00 -1.1936e-03  1.5259e-01  4.1263e+00         0.0000\nNGA020014  1.9578e-01 -2.6445e-05  2.8975e-03  3.6376e+00         0.0003\nNGA020015  2.7035e-01 -4.6775e-04  7.1906e-02  1.0099e+00         0.3125\nNGA020016  2.2125e+00 -4.4392e-03  8.5075e-01  2.4035e+00         0.0162\nNGA020017  1.2977e+00 -3.0298e-03  4.6456e-01  1.9084e+00         0.0563\nNGA020018  4.4496e-02 -2.2061e-05  2.8237e-03  8.3776e-01         0.4022\nNGA020019 -8.6794e-03 -1.1993e-06  1.5351e-04 -7.0043e-01         0.4837\nNGA020020 -2.7026e-01 -1.6076e-04  1.7612e-02 -2.0353e+00         0.0418\nNGA020021  7.5176e-02 -4.1020e-04  1.0538e-01  2.3285e-01         0.8159\nNGA020022 -1.6100e-02 -1.1993e-06  1.8445e-04 -1.1854e+00         0.2359\nNGA020023  3.0587e-01 -1.5562e-03  2.9911e-01  5.6212e-01         0.5740\nNGA020024  4.4065e-01 -2.7895e-03  3.0479e-01  8.0322e-01         0.4218\nNGA020025 -1.3097e-01 -1.1875e-04  9.0709e-03 -1.3739e+00         0.1695\nNGA020026  6.7656e-01 -1.0160e-03  1.2992e-01  1.8799e+00         0.0601\nNGA020027  2.1555e-01 -9.2120e-05  1.7731e-02  1.6194e+00         0.1054\nNGA020028  5.1783e-01 -1.6273e-03  1.3810e-01  1.3978e+00         0.1622\nNGA020029  5.9048e-01 -2.9488e-04  3.2300e-02  3.2871e+00         0.0010\nNGA020030  2.2814e+00 -3.8654e-03  4.2189e-01  3.5184e+00         0.0004\nNGA020031 -1.8053e-01 -2.2222e-04  2.8437e-02 -1.0692e+00         0.2850\nNGA020032  9.5698e-02 -4.1979e-05  6.4560e-03  1.1916e+00         0.2334\nNGA020033  3.9007e-01 -7.2760e-04  9.3064e-02  1.2810e+00         0.2002\nNGA020034  2.5375e-01 -4.4868e-04  4.9139e-02  1.1467e+00         0.2515\nNGA020035  1.1823e-01 -3.6404e-05  3.9886e-03  1.8726e+00         0.0611\nNGA020036  1.7135e+00 -3.7553e-03  7.2018e-01  2.0235e+00         0.0430\nNGA020037  3.5070e+00 -1.5959e-02  2.0102e+00  2.4848e+00         0.0130\nNGA020038 -3.4063e-02 -6.7631e-05  8.6560e-03 -3.6539e-01         0.7148\nNGA020039  5.4119e-01 -4.1172e-04  5.2678e-02  2.3597e+00         0.0183\nNGA020040  4.5860e-01 -4.1172e-04  5.2678e-02  1.9999e+00         0.0455\nNGA020041  1.9464e-01 -1.0087e-04  7.7055e-03  2.2184e+00         0.0265\nNGA020042  7.8531e-01 -1.5562e-03  1.3207e-01  2.1652e+00         0.0304\nNGA020043  5.5719e-01 -9.8781e-04  1.0813e-01  1.6975e+00         0.0896\nNGA020044  5.3048e-01 -3.1038e-04  3.3998e-02  2.8787e+00         0.0040\nNGA021001  1.5324e+00 -7.6681e-03  9.7398e-01  1.5605e+00         0.1187\nNGA021002  8.5861e-02 -2.6445e-05  2.8975e-03  1.5956e+00         0.1106\nNGA021003  3.1498e-01 -4.6775e-04  7.1906e-02  1.1764e+00         0.2394\nNGA021004  4.9109e+00 -2.5143e-03  3.8571e-01  7.9114e+00         0.0000\nNGA021005  1.0910e+00 -3.1287e-03  3.9921e-01  1.7317e+00         0.0833\nNGA021006  6.4627e-01 -8.7896e-04  1.1241e-01  1.9302e+00         0.0536\nNGA021007 -7.8713e-02 -2.1711e-05  2.3788e-03 -1.6134e+00         0.1067\nNGA021008 -6.2909e-02 -1.1041e-05  2.1254e-03 -1.3643e+00         0.1725\nNGA021009 -3.8668e-01 -2.6385e-04  3.3764e-02 -2.1029e+00         0.0355\nNGA021010 -4.7775e-02 -2.4958e-04  4.8031e-02 -2.1685e-01         0.8283\nNGA021011 -1.0464e-01 -8.3081e-05  1.0633e-02 -1.0139e+00         0.3106\nNGA021012  9.7113e-01 -2.2112e-03  2.8240e-01  1.8316e+00         0.0670\nNGA021013  9.2661e-01 -8.3865e-03  7.9625e-01  1.0478e+00         0.2947\nNGA021014  2.4780e-01 -7.5809e-05  1.1658e-02  2.2957e+00         0.0217\nNGA021015  1.2102e+00 -4.0333e-03  4.4015e-01  1.8302e+00         0.0672\nNGA021016 -7.3081e-02 -1.1041e-05  1.6981e-03 -1.7732e+00         0.0762\nNGA021017  4.2579e-01 -1.2246e-03  1.5655e-01  1.0792e+00         0.2805\nNGA021018  2.3237e-01 -4.6799e-03  5.9621e-01  3.0700e-01         0.7588\nNGA021019  3.4042e-01 -1.6171e-04  1.7716e-02  2.5588e+00         0.0105\nNGA021020  9.4824e-01 -2.0067e-03  1.9175e-01  2.1700e+00         0.0300\nNGA021021  3.3450e-01 -3.4257e-04  8.8011e-02  1.1287e+00         0.2590\nNGA021022  5.4426e-01 -6.1238e-04  9.4126e-02  1.7760e+00         0.0757\nNGA021023  1.1228e-01 -1.1292e-05  1.7366e-03  2.6945e+00         0.0070\nNGA021024 -9.7915e-02 -1.1328e-03  2.1782e-01 -2.0737e-01         0.8357\nNGA021025  1.0783e-01 -1.8074e-05  2.7797e-03  2.0456e+00         0.0408\nNGA021026  3.9604e-01 -3.4257e-04  4.3834e-02  1.8932e+00         0.0583\nNGA021027 -6.2241e-02 -1.7757e-05  2.7310e-03 -1.1907e+00         0.2338\nNGA021028  6.1042e-01 -7.2760e-04  1.3996e-01  1.6336e+00         0.1023\nNGA021029  2.9543e-01 -9.0558e-04  9.9134e-02  9.4118e-01         0.3466\nNGA021030 -2.2556e-01 -6.7631e-05  1.0401e-02 -2.2111e+00         0.0270\nNGA021031 -5.4703e-01 -7.2558e-04  1.3957e-01 -1.4623e+00         0.1437\nNGA021032 -6.7379e-02 -2.1711e-05  2.7789e-03 -1.2778e+00         0.2013\nNGA021033  5.4614e-01 -1.5213e-03  1.9443e-01  1.2420e+00         0.2142\nNGA021034  2.6177e-01 -9.2120e-05  1.7731e-02  1.9665e+00         0.0492\nNGA022001 -3.3968e-02 -3.0809e-05  5.9304e-03 -4.4069e-01         0.6594\nNGA022002  8.2292e-03 -8.2788e-06  9.0710e-04  2.7351e-01         0.7845\nNGA022003  4.4964e-03 -2.6445e-05  4.0671e-03  7.0920e-02         0.9435\nNGA022004  1.1016e-01 -1.8415e-04  2.0174e-02  7.7688e-01         0.4372\nNGA022005 -1.4796e-02 -2.4905e-06  3.8303e-04 -7.5588e-01         0.4497\nNGA022006  1.9300e-02 -4.8722e-04  6.2333e-02  7.9254e-02         0.9368\nNGA022007  5.7409e-02 -6.0501e-05  1.1646e-02  5.3254e-01         0.5944\nNGA022008  5.1389e-02 -6.0501e-05  1.1646e-02  4.7676e-01         0.6335\nNGA022009  4.9268e-02 -1.0012e-04  1.0969e-02  4.7137e-01         0.6374\nNGA022010  1.0569e-02 -8.4958e-06  1.6354e-03  2.6156e-01         0.7937\nNGA022011 -3.5625e-02 -9.2120e-05  1.1790e-02 -3.2725e-01         0.7435\nNGA022012  9.3049e-03 -5.9134e-06  7.5690e-04  3.3843e-01         0.7350\nNGA022013  1.3106e-01 -1.0923e-04  1.1967e-02  1.1991e+00         0.2305\nNGA022014  1.6957e-01 -6.5536e-04  1.0073e-01  5.3636e-01         0.5917\nNGA022015  2.0684e-02 -1.4201e-05  1.8176e-03  4.8549e-01         0.6273\nNGA022016  1.2954e-03 -8.4958e-06  1.6354e-03  3.2241e-02         0.9743\nNGA022017  1.2411e-01 -2.9360e-04  4.5141e-02  5.8551e-01         0.5582\nNGA022018  1.6979e-01 -6.3275e-04  8.0939e-02  5.9905e-01         0.5491\nNGA022019 -4.8958e-02 -3.9384e-04  4.3136e-02 -2.3383e-01         0.8151\nNGA022020  7.5898e-02 -5.2563e-04  6.7245e-02  2.9471e-01         0.7682\nNGA022021 -2.4116e-02 -1.7226e-04  2.6489e-02 -1.4712e-01         0.8830\nNGA023001  1.8090e-01 -2.3570e-04  3.6242e-02  9.5150e-01         0.3413\nNGA023002  2.1546e-01 -3.9235e-04  5.0201e-02  9.6340e-01         0.3353\nNGA023003  4.1872e-01 -5.8871e-04  6.4467e-02  1.6514e+00         0.0986\nNGA023004  7.3929e-02 -4.7433e-05  4.5414e-03  1.0977e+00         0.2723\nNGA023005  2.3731e-01 -2.0913e-04  4.0249e-02  1.1839e+00         0.2365\nNGA023006  4.8710e-01 -7.0178e-04  7.6839e-02  1.7598e+00         0.0784\nNGA023007  4.4614e-01 -5.8871e-04  1.5121e-01  1.1488e+00         0.2506\nNGA023008  4.3733e-01 -5.2563e-04  4.4654e-02  2.0721e+00         0.0383\nNGA023009 -1.5540e-03 -5.8324e-08  5.5844e-06 -6.5759e-01         0.5108\nNGA023010  7.2745e-02 -2.0913e-04  2.6763e-02  4.4595e-01         0.6556\nNGA023011  9.9519e-02 -3.0906e-04  4.7519e-02  4.5795e-01         0.6470\nNGA023012  5.4162e-02 -1.3896e-04  1.0615e-02  5.2705e-01         0.5982\nNGA023013  1.5527e-01 -2.6385e-04  6.7792e-02  5.9737e-01         0.5503\nNGA023014  3.8676e-01 -6.7837e-04  7.4278e-02  1.4216e+00         0.1551\nNGA023015  1.3598e-01 -3.9235e-04  1.5139e-01  3.5048e-01         0.7260\nNGA023016  2.3587e-01 -7.2558e-04  1.1151e-01  7.0851e-01         0.4786\nNGA023017  3.4676e-02 -5.9134e-06  9.0947e-04  1.1500e+00         0.2501\nNGA023018  4.1484e-01 -5.8871e-04  5.6335e-02  1.7503e+00         0.0801\nNGA023019  2.9632e-01 -7.7438e-04  9.9042e-02  9.4402e-01         0.3452\nNGA023020  3.2902e-02 -5.2563e-04  5.7563e-02  1.3933e-01         0.8892\nNGA023021 -2.5353e-01 -2.0913e-04  2.2910e-02 -1.6737e+00         0.0942\nNGA024001  1.1974e-01 -6.1086e-05  5.8485e-03  1.5666e+00         0.1172\nNGA024002 -1.8831e-02 -3.4257e-04  4.3834e-02 -8.8308e-02         0.9296\nNGA024003  6.0057e-01 -6.8032e-04  1.0456e-01  1.8594e+00         0.0630\nNGA024004 -6.4115e-02 -5.4320e-05  6.9524e-03 -7.6828e-01         0.4423\nNGA024005  1.1175e+00 -1.1774e-02  8.8892e-01  1.1978e+00         0.2310\nNGA024006  8.1251e-01 -1.7000e-03  3.2670e-01  1.4245e+00         0.1543\nNGA024007 -4.2301e-01 -2.0913e-04  4.0249e-02 -2.1075e+00         0.0351\nNGA024008 -5.6287e-02 -3.5953e-05  6.9207e-03 -6.7618e-01         0.4989\nNGA024009  3.9346e-01 -4.1172e-04  5.2678e-02  1.7161e+00         0.0861\nNGA024010  4.0353e-01 -1.3985e-04  3.5935e-02  2.1295e+00         0.0332\nNGA024011  4.5472e-02 -4.3000e-04  5.5016e-02  1.9570e-01         0.8448\nNGA024012  2.5096e-01 -1.9750e-04  1.8906e-02  1.8266e+00         0.0678\nNGA024013  1.2216e-01 -1.8074e-05  1.3971e-02  1.0337e+00         0.3013\nNGA024014  4.0729e-02 -1.4484e-05  1.5870e-03  1.0227e+00         0.3064\nNGA024015  7.5133e-01 -1.3854e-03  1.5159e-01  1.9333e+00         0.0532\nNGA024016 -1.7406e-01 -1.4867e-03  1.9002e-01 -3.9590e-01         0.6922\nNGA025001 -2.3705e-02 -9.1402e-05  2.3488e-02 -1.5408e-01         0.8775\nNGA025002  4.2262e-01 -7.9938e-04  2.0527e-01  9.3456e-01         0.3500\nNGA025003 -4.3853e-01 -2.4257e-03  2.6514e-01 -8.4694e-01         0.3970\nNGA025004  2.0205e-01 -4.6613e-04  4.4610e-02  9.5883e-01         0.3376\nNGA025005  4.4096e-01 -8.5056e-04  1.0878e-01  1.3396e+00         0.1804\nNGA025006  2.8899e-02 -5.3769e-05  1.3818e-02  2.4630e-01         0.8054\nNGA025007 -7.3315e-02 -9.2120e-05  8.8194e-03 -7.7970e-01         0.4356\nNGA025008  1.3934e-01 -5.4626e-04  5.2275e-02  6.1183e-01         0.5406\nNGA025009  5.8227e-03 -1.1993e-06  4.6293e-04  2.7068e-01         0.7866\nNGA025010 -5.1444e-02 -2.3570e-04  3.6242e-02 -2.6899e-01         0.7879\nNGA025011  1.6656e-01 -5.8871e-04  5.6335e-02  7.0424e-01         0.4813\nNGA025012 -3.1885e-01 -8.0150e-04  8.7749e-02 -1.0737e+00         0.2830\nNGA025013  1.2808e-01 -1.1875e-04  1.3009e-02  1.1240e+00         0.2610\nNGA025014  3.3011e-01 -3.4119e-04  6.5656e-02  1.2896e+00         0.1972\nNGA025015  1.8954e-01 -3.4119e-04  3.2657e-02  1.0507e+00         0.2934\nNGA025016  2.5132e-01 -3.5785e-04  4.5787e-02  1.1762e+00         0.2395\nNGA025017 -2.2973e-01 -5.6729e-04  1.0914e-01 -6.9367e-01         0.4879\nNGA025018  5.5741e-02 -2.4958e-04  3.8375e-02  2.8582e-01         0.7750\nNGA025019  3.2673e-01 -7.0178e-04  1.0786e-01  9.9701e-01         0.3188\nNGA025020  1.2834e-01 -5.3769e-05  5.8911e-03  1.6729e+00         0.0944\nNGA026001 -2.6914e-02 -1.2560e-03  2.4146e-01 -5.2216e-02         0.9584\nNGA026002 -3.6970e-02 -8.3081e-05  7.9542e-03 -4.1359e-01         0.6792\nNGA026003  3.2588e-02 -4.1495e-05  3.9729e-03  5.1767e-01         0.6047\nNGA026004  1.7603e-03 -1.5058e-04  1.4416e-02  1.5915e-02         0.9873\nNGA026005  1.5028e-01 -2.3570e-04  4.5361e-02  7.0669e-01         0.4798\nNGA026006 -5.8586e-03 -1.7757e-05  6.8541e-03 -7.0551e-02         0.9438\nNGA026007 -1.0710e-01 -7.5158e-05  7.1956e-03 -1.2617e+00         0.2071\nNGA026008 -7.6415e-02 -2.2533e-03  1.9109e-01 -1.6965e-01         0.8653\nNGA026009 -3.0015e-03 -4.1979e-05  3.5680e-03 -4.9547e-02         0.9605\nNGA026010  5.6726e-02 -1.8074e-05  3.4792e-03  9.6201e-01         0.3360\nNGA026011 -6.6156e-02 -4.2845e-04  8.2440e-02 -2.2892e-01         0.8189\nNGA026012  1.0030e-03 -4.1632e-08  5.3288e-06  4.3451e-01         0.6639\nNGA026013 -7.5051e-02 -2.6061e-05  4.0080e-03 -1.1851e+00         0.2360\nNGA027001 -3.2295e-02 -2.6445e-05  4.0671e-03 -5.0598e-01         0.6129\nNGA027002  8.3682e-03 -2.3737e-06  6.1002e-04  3.3891e-01         0.7347\nNGA027003  8.9025e-01 -3.9769e-03  1.5290e+00  7.2318e-01         0.4696\nNGA027004 -6.8599e-03 -3.1226e-05  2.6541e-03 -1.3255e-01         0.8945\nNGA027005 -3.9588e-02 -1.8517e-04  2.3697e-02 -2.5596e-01         0.7980\nNGA027006 -1.6596e-01 -2.4958e-04  1.9288e-01 -3.7733e-01         0.7059\nNGA027007  2.5360e-01 -5.0709e-04  7.7950e-02  9.1015e-01         0.3627\nNGA027008  1.5569e-01 -1.9750e-04  2.5274e-02  9.8056e-01         0.3268\nNGA027009  4.9140e-02 -4.7433e-05  5.1970e-03  6.8230e-01         0.4950\nNGA027010 -1.2974e-01 -3.9235e-04  5.0201e-02 -5.7728e-01         0.5637\nNGA027011  7.5913e-02 -7.5158e-05  1.9314e-02  5.4678e-01         0.5845\nNGA027012  3.0650e-02 -2.1711e-05  2.7789e-03  5.8185e-01         0.5607\nNGA027013  1.7168e-02 -1.7324e-04  3.3344e-02  9.4965e-02         0.9243\nNGA027014  2.9907e-02 -4.7433e-05  6.0711e-03  3.8443e-01         0.7007\nNGA027015  3.7780e-04 -2.1711e-05  1.8453e-03  9.3003e-03         0.9926\nNGA027016 -3.0289e-02 -5.0540e-04  4.8367e-02 -1.3543e-01         0.8923\nNGA027017  1.6140e-02 -6.0970e-06  3.5689e-04  8.5467e-01         0.3927\nNGA027018 -9.5097e-03 -4.1495e-05  7.9873e-03 -1.0594e-01         0.9156\nNGA027019 -5.7587e-03 -4.7433e-05  4.0315e-03 -8.9949e-02         0.9283\nNGA027020 -3.9106e-02 -7.5809e-05  1.1658e-02 -3.6148e-01         0.7177\nNGA027021 -1.4027e-03 -5.8324e-08  6.3905e-06 -5.5486e-01         0.5790\nNGA027022 -2.3423e-03 -2.4905e-06  2.7288e-04 -1.4164e-01         0.8874\nNGA027023  6.9604e-02 -2.6385e-04  5.0778e-02  3.1006e-01         0.7565\nNGA027024  8.0421e-02 -3.4119e-04  5.2456e-02  3.5262e-01         0.7244\nNGA027025  1.4580e-02 -1.8074e-05  1.9804e-03  3.2804e-01         0.7429\nNGA028001  3.0166e-01 -7.4978e-04  8.2092e-02  1.0555e+00         0.2912\nNGA028002 -1.1393e-01 -4.1979e-05  1.0788e-02 -1.0965e+00         0.2728\nNGA028003 -1.9405e-01 -8.7896e-04  9.6223e-02 -6.2274e-01         0.5335\nNGA028004  4.4753e-01 -6.1053e-04  9.3841e-02  1.4629e+00         0.1435\nNGA028005  1.6966e-01 -3.0906e-04  4.7519e-02  7.7973e-01         0.4355\nNGA028006  3.9633e-01 -5.2563e-04  8.0799e-02  1.3961e+00         0.1627\nNGA028007  1.4928e-01 -5.4626e-04  4.6406e-02  6.9550e-01         0.4867\nNGA028008  2.9979e-02 -7.2558e-04  6.1628e-02  1.2369e-01         0.9016\nNGA028009  1.9562e-01 -5.4626e-04  5.2275e-02  8.5796e-01         0.3909\nNGA028010  3.9147e-01 -6.5536e-04  1.6832e-01  9.5578e-01         0.3392\nNGA028011  1.1179e-01 -8.3081e-05  1.2777e-02  9.8976e-01         0.3223\nNGA028012  4.0054e-01 -7.0178e-04  1.3500e-01  1.0921e+00         0.2748\nNGA028013  2.5848e-02 -7.9938e-04  1.2284e-01  7.6029e-02         0.9394\nNGA028014  8.1514e-02 -4.4709e-04  8.6026e-02  2.7944e-01         0.7799\nNGA028015  2.9722e-01 -3.5785e-04  3.0405e-02  1.7066e+00         0.0879\nNGA028016  1.3015e-01 -4.8557e-04  5.3178e-02  5.6652e-01         0.5710\nNGA028017  9.7515e-02 -1.7226e-04  1.8871e-02  7.1111e-01         0.4770\nNGA028018  1.2741e-01 -1.2865e-04  1.9784e-02  9.0675e-01         0.3645\nNGA028019  3.7896e-01 -5.6729e-04  8.7198e-02  1.2853e+00         0.1987\nNGA028020  1.2726e-01 -5.0540e-04  6.4658e-02  5.0247e-01         0.6153\nNGA029001  2.0514e-02 -2.1022e-04  2.3029e-02  1.3657e-01         0.8914\nNGA029002  4.9170e-02 -3.5927e-04  6.9133e-02  1.8837e-01         0.8506\nNGA029003 -1.8648e-02 -3.5953e-05  6.9207e-03 -2.2373e-01         0.8230\nNGA029004 -5.0803e-02 -8.5274e-04  1.3104e-01 -1.3799e-01         0.8903\nNGA029005  1.1142e-01 -3.5785e-04  4.5787e-02  5.2239e-01         0.6014\nNGA029006  7.2499e-02 -8.3081e-05  2.1350e-02  4.9674e-01         0.6194\nNGA029007  1.9731e-01 -1.7226e-04  3.3154e-02  1.0846e+00         0.2781\nNGA029008  6.1302e-02 -7.5158e-05  5.7414e-03  8.1002e-01         0.4179\nNGA029009  1.3259e-02 -1.1041e-05  1.2098e-03  3.8152e-01         0.7028\nNGA029010  3.0975e-01 -5.0540e-04  7.7691e-02  1.1131e+00         0.2657\nNGA029011 -1.0388e-02 -1.7757e-05  1.7002e-03 -2.5150e-01         0.8014\nNGA029012  1.9522e-01 -2.9360e-04  3.7569e-02  1.0087e+00         0.3131\nNGA029013  1.3898e-01 -1.4966e-04  1.6396e-02  1.0866e+00         0.2772\nNGA029014  2.5245e-01 -4.2845e-04  8.2440e-02  8.8072e-01         0.3785\nNGA029015  7.7987e-02 -1.8415e-04  3.5443e-02  4.1522e-01         0.6780\nNGA029016  2.6110e-02 -2.1711e-05  2.7789e-03  4.9571e-01         0.6201\nNGA029017  4.7012e-02 -1.4966e-04  1.6396e-02  3.6831e-01         0.7126\nNGA029018 -6.1407e-02 -9.2120e-05  1.0093e-02 -6.1033e-01         0.5416\nNGA030001 -3.9673e-01 -3.1787e-03  2.6932e-01 -7.5834e-01         0.4482\nNGA030002  1.3365e-01 -4.7951e-05  5.2537e-03  1.8446e+00         0.0651\nNGA030003 -9.6672e-02 -1.1875e-04  2.2856e-02 -6.3866e-01         0.5230\nNGA030004  1.1971e-01 -1.5916e-03  1.1022e-01  3.6538e-01         0.7148\nNGA030005  1.7728e-03 -5.8324e-08  8.9701e-06  5.9195e-01         0.5539\nNGA030006  2.9956e-02 -2.2061e-05  2.8237e-03  5.6414e-01         0.5727\nNGA030007  3.8791e-01 -1.3199e-03  2.5374e-01  7.7269e-01         0.4397\nNGA030008  5.7255e-02 -4.0953e-06  4.4871e-04  2.7031e+00         0.0069\nNGA030009  4.3648e-02 -1.1292e-05  9.5975e-04  1.4093e+00         0.1588\nNGA030010 -2.2782e-01 -1.2660e-02  1.3696e+00 -1.8385e-01         0.8541\nNGA030011  1.7196e-02 -1.2828e-06  1.9729e-04  1.2244e+00         0.2208\nNGA030012 -7.7032e-02 -5.3769e-05  1.0350e-02 -7.5666e-01         0.4493\nNGA030013  2.3344e-02 -5.4320e-05  6.9524e-03  2.8062e-01         0.7790\nNGA030014  2.8934e-02 -3.6404e-05  5.5986e-03  3.8718e-01         0.6986\nNGA030015 -6.4342e-02 -2.7853e-04  3.5641e-02 -3.3934e-01         0.7344\nNGA030016 -1.0840e-01 -2.0913e-04  4.0249e-02 -5.3926e-01         0.5897\nNGA030017  7.4650e-02 -3.6404e-05  3.9886e-03  1.1826e+00         0.2370\nNGA030018 -1.0081e-01 -1.0923e-04  2.1025e-02 -6.9447e-01         0.4874\nNGA030019  3.2639e-03 -5.8324e-08  1.1227e-05  9.7411e-01         0.3300\nNGA030020  6.6090e-04 -4.2196e-07  8.1226e-05  7.3377e-02         0.9415\nNGA030021 -2.7093e-02 -5.3769e-05  8.2691e-03 -2.9735e-01         0.7662\nNGA030022 -1.2974e-02 -3.4119e-04  6.5656e-02 -4.9301e-02         0.9607\nNGA030023  8.3393e-03 -4.1979e-05  6.4560e-03  1.0431e-01         0.9169\nNGA030024  1.2884e-01 -3.9384e-04  3.3462e-02  7.0650e-01         0.4799\nNGA030025  1.4176e-01 -9.8781e-04  1.0813e-01  4.3412e-01         0.6642\nNGA030026  8.7435e-02 -1.4484e-05  2.7882e-03  1.6561e+00         0.0977\nNGA030027  1.0652e-02 -6.0970e-06  6.6804e-04  4.1236e-01         0.6801\nNGA030028 -2.7834e-02 -4.3000e-04  3.6533e-02 -1.4337e-01         0.8860\nNGA030029 -3.0115e-02 -2.4958e-04  6.4125e-02 -1.1794e-01         0.9061\nNGA030030  1.3775e-01 -1.0087e-04  1.2910e-02  1.2132e+00         0.2250\nNGA031001 -6.1395e-02 -4.7433e-05  4.5414e-03 -9.1034e-01         0.3626\nNGA031002  1.0258e-02 -1.1292e-05  1.4453e-03  2.7013e-01         0.7871\nNGA031003  1.4602e-01 -6.5536e-04  6.2708e-02  5.8572e-01         0.5581\nNGA031004  4.6560e-02 -1.9644e-04  3.0207e-02  2.6902e-01         0.7879\nNGA031005  2.1696e-01 -4.8557e-04  6.2122e-02  8.7241e-01         0.3830\nNGA031006  8.4002e-03 -4.1495e-05  5.3110e-03  1.1584e-01         0.9078\nNGA031007  1.9674e-01 -4.8557e-04  4.6470e-02  9.1493e-01         0.3602\nNGA031008 -1.5424e-01 -4.3000e-04  5.5016e-02 -6.5575e-01         0.5120\nNGA031009  2.5516e-01 -7.7438e-04  1.1901e-01  7.4190e-01         0.4582\nNGA031010  8.7089e-02 -1.8415e-04  2.8317e-02  5.1862e-01         0.6040\nNGA031011 -1.2504e-01 -1.1002e-04  1.6919e-02 -9.6045e-01         0.3368\nNGA031012  1.8075e-02 -1.3896e-04  2.1369e-02  1.2460e-01         0.9008\nNGA031013 -4.8362e-02 -1.5058e-04  2.3156e-02 -3.1682e-01         0.7514\nNGA031014 -5.7607e-02 -7.5809e-05  6.4431e-03 -7.1673e-01         0.4735\nNGA031015 -6.1322e-03 -6.0501e-05  1.1646e-02 -5.6263e-02         0.9551\nNGA031016 -4.6899e-02 -3.7490e-04  3.5883e-02 -2.4560e-01         0.8060\nNGA031017  3.7694e-02 -1.4966e-04  1.9154e-02  2.7344e-01         0.7845\nNGA031018 -1.6339e-01 -5.4802e-04  7.0106e-02 -6.1500e-01         0.5386\nNGA031019 -1.5526e-02 -5.4320e-05  1.3959e-02 -1.3095e-01         0.8958\nNGA031020 -5.1314e-03 -1.2828e-06  1.4055e-04 -4.3273e-01         0.6652\nNGA031021  6.4673e-02 -6.8032e-04  1.7472e-01  1.5635e-01         0.8758\nNGA031022 -3.0195e-01 -6.5536e-04  1.2607e-01 -8.4857e-01         0.3961\nNGA031023 -2.5763e-03 -4.1632e-08  5.3288e-06 -1.1160e+00         0.2644\nNGA031024 -3.5549e-02 -2.4958e-04  2.7339e-02 -2.1349e-01         0.8309\nNGA031025  3.0152e-01 -4.4709e-04  3.7985e-02  1.5494e+00         0.1213\nNGA031026  2.0236e-01 -5.4626e-04  5.9821e-02  8.2961e-01         0.4068\nNGA031027  1.0694e-01 -3.7490e-04  5.7638e-02  4.4702e-01         0.6549\nNGA031028 -1.6500e-01 -9.3260e-04  8.9211e-02 -5.4929e-01         0.5828\nNGA031029 -4.0382e-01 -7.4978e-04  9.5899e-02 -1.3016e+00         0.1931\nNGA031030 -6.0039e-02 -1.8074e-05  2.7797e-03 -1.1384e+00         0.2549\nNGA031031  3.3464e-02 -2.6061e-05  4.0080e-03  5.2900e-01         0.5968\nNGA031032  3.1286e-04 -3.9450e-06  1.0139e-03  9.9497e-03         0.9921\nNGA031033  3.1865e-02 -2.2061e-05  1.5302e-03  8.1517e-01         0.4150\nNGA032001  1.8765e-02 -3.6404e-05  4.6594e-03  2.7544e-01         0.7830\nNGA032002  2.3545e-02 -2.4905e-06  3.1878e-04  1.3188e+00         0.1872\nNGA032003  3.1319e-02 -6.0970e-06  7.8040e-04  1.1213e+00         0.2622\nNGA032004 -1.8816e-02 -3.9450e-06  5.0495e-04 -8.3717e-01         0.4025\nNGA032005  2.9875e-03 -4.0953e-06  7.8833e-04  1.0655e-01         0.9151\nNGA032006 -1.4255e-02 -1.0012e-04  1.5397e-02 -1.1408e-01         0.9092\nNGA032007  1.1654e-01 -5.4320e-05  5.9514e-03  1.5113e+00         0.1307\nNGA032008  1.0073e+00 -4.0901e-03  7.8412e-01  1.1422e+00         0.2534\nNGA032009  4.8258e-01 -1.6635e-03  1.8196e-01  1.1352e+00         0.2563\nNGA032010 -2.2012e-01 -4.8557e-04  9.3426e-02 -7.1857e-01         0.4724\nNGA032011  2.6956e-01 -7.0376e-04  9.0017e-02  9.0081e-01         0.3677\nNGA032012  3.1190e-01 -2.1022e-04  5.4014e-02  1.3429e+00         0.1793\nNGA032013  5.0661e-01 -5.4802e-04  5.2443e-02  2.2146e+00         0.0268\nNGA032014  2.5603e-01 -3.2628e-04  4.1750e-02  1.2546e+00         0.2096\nNGA032015  2.0068e-02 -2.4905e-06  2.7288e-04  1.2150e+00         0.2244\nNGA032016  1.2087e-01 -3.7635e-04  4.1221e-02  5.9717e-01         0.5504\nNGA032017  1.4515e-03 -4.7203e-07  7.2598e-05  1.7041e-01         0.8647\nNGA033001  3.7107e-01 -3.5785e-04  3.9195e-02  1.8761e+00         0.0606\nNGA033002  4.1609e-01 -6.1053e-04  1.1745e-01  1.2159e+00         0.2240\nNGA033003  4.0196e-01 -6.3275e-04  9.7253e-02  1.2910e+00         0.1967\nNGA033004  4.8189e-01 -6.7837e-04  1.7422e-01  1.1561e+00         0.2476\nNGA033005  5.4039e-01 -7.7438e-04  1.9886e-01  1.2135e+00         0.2249\nNGA033006  3.0073e-01 -2.0913e-04  8.0708e-02  1.0593e+00         0.2895\nNGA033007  5.8404e-01 -8.2477e-04  1.0548e-01  1.8008e+00         0.0717\nNGA033008  2.9681e-01 -6.5536e-04  6.2708e-02  1.1879e+00         0.2349\nNGA033009  3.2392e-01 -8.5056e-04  1.0878e-01  9.8472e-01         0.3248\nNGA033010  2.7675e-01 -7.9938e-04  7.6477e-02  1.0036e+00         0.3156\nNGA033011  2.5869e-01 -7.9938e-04  8.7517e-02  8.7714e-01         0.3804\nNGA033012  6.1574e-01 -8.7674e-04  1.6862e-01  1.5016e+00         0.1332\nNGA033013  1.3290e-01 -2.4958e-04  4.8031e-02  6.0755e-01         0.5435\nNGA033014  3.9904e-01 -3.9235e-04  3.3336e-02  2.1877e+00         0.0287\nNGA033015 -1.0385e-01 -4.7951e-05  5.2537e-03 -1.4321e+00         0.1521\nNGA033016  2.2909e-01 -2.2222e-04  1.8884e-02  1.6687e+00         0.0952\nNGA033017  6.5809e-01 -9.0333e-04  1.3880e-01  1.7688e+00         0.0769\nNGA033018  3.8465e-01 -6.3275e-04  9.7253e-02  1.2355e+00         0.2167\nNGA033019  3.7656e-01 -4.6613e-04  8.9688e-02  1.2589e+00         0.2080\nNGA033020  4.8603e-01 -7.2558e-04  1.3957e-01  1.3029e+00         0.1926\nNGA033021  3.6444e-01 -5.4626e-04  5.2275e-02  1.5963e+00         0.1104\nNGA033022 -2.0426e-01 -2.1022e-04  4.0458e-02 -1.0144e+00         0.3104\nNGA033023  5.9444e-01 -8.5056e-04  1.3070e-01  1.6466e+00         0.0996\nNGA034001  2.2733e-01 -4.4709e-04  6.8731e-02  8.6885e-01         0.3849\nNGA034002  5.6044e-02 -4.7433e-05  7.2948e-03  6.5673e-01         0.5114\nNGA034003  4.1213e-02 -4.1495e-05  4.5464e-03  6.1184e-01         0.5406\nNGA034004  1.0666e-01 -1.1875e-04  2.2856e-02  7.0633e-01         0.4800\nNGA034005  5.6508e-03 -4.2196e-07  5.4010e-05  7.6897e-01         0.4419\nNGA034006  1.6515e-01 -7.0178e-04  8.9763e-02  5.5356e-01         0.5799\nNGA034007  2.2247e-01 -4.6613e-04  8.9688e-02  7.4442e-01         0.4566\nNGA034008  4.5328e-02 -4.1495e-05  1.0664e-02  4.3935e-01         0.6604\nNGA034009  7.3294e-03 -7.5158e-05  9.6193e-03  7.5496e-02         0.9398\nNGA034010  9.0983e-02 -2.0913e-04  2.6763e-02  5.5743e-01         0.5772\nNGA034011 -1.9071e-03 -5.8324e-08  5.5844e-06 -8.0698e-01         0.4197\nNGA034012  1.6854e-02 -8.2788e-06  9.0710e-04  5.5986e-01         0.5756\nNGA034013  2.0308e-01 -2.9360e-04  7.5432e-02  7.4050e-01         0.4590\nNGA034014  6.2960e-02 -6.7631e-05  1.0401e-02  6.1801e-01         0.5366\nNGA034015  1.3009e-01 -1.1875e-04  2.2856e-02  8.6128e-01         0.3891\nNGA034016  1.1133e-01 -1.4966e-04  3.8457e-02  5.6848e-01         0.5697\nNGA034017  1.4078e-01 -7.7438e-04  1.4895e-01  3.6677e-01         0.7138\nNGA034018  1.3099e-02 -8.2788e-06  7.0368e-04  4.9411e-01         0.6212\nNGA034019  1.1660e-01 -2.4958e-04  3.1937e-02  6.5385e-01         0.5132\nNGA034020  4.0804e-02 -1.1875e-04  1.3009e-02  3.5879e-01         0.7198\nNGA034021  8.0298e-02 -6.0501e-05  5.1422e-03  1.1206e+00         0.2624\nNGA034022  4.7261e-02 -6.7631e-05  1.3018e-02  4.1481e-01         0.6783\nNGA034023  1.2515e-01 -3.7490e-04  4.7969e-02  5.7312e-01         0.5666\nNGA035001  1.9126e-01 -3.4257e-04  4.3834e-02  9.1514e-01         0.3601\nNGA035002 -3.1434e-02 -1.8502e-03  1.5697e-01 -7.4669e-02         0.9405\nNGA035003  4.2305e-02 -2.6445e-05  2.5320e-03  8.4125e-01         0.4002\nNGA035004 -1.5476e-03 -2.2061e-05  4.2466e-03 -2.3410e-02         0.9813\nNGA035005  1.4864e-01 -2.6507e-04  3.3920e-02  8.0848e-01         0.4188\nNGA035006 -1.8719e-02 -8.3081e-05  9.1024e-03 -1.9533e-01         0.8451\nNGA035007 -1.2383e-02 -1.1993e-06  3.0822e-04 -7.0529e-01         0.4806\nNGA035008 -1.8221e-02 -1.1041e-05  8.4352e-04 -6.2697e-01         0.5307\nNGA035009  4.2949e-02 -5.4320e-05  8.3538e-03  4.7050e-01         0.6380\nNGA035010 -2.0886e-02 -8.4958e-06  8.1345e-04 -7.3201e-01         0.4642\nNGA035011 -1.1094e-01 -5.6729e-04  2.1885e-01 -2.3594e-01         0.8135\nNGA035012 -1.3066e-02 -9.2120e-05  1.7731e-02 -9.7434e-02         0.9224\nNGA035013  4.9540e-02 -7.5809e-05  1.9481e-02  3.5548e-01         0.7222\nNGA035014 -7.4962e-02 -2.7978e-04  3.0647e-02 -4.2660e-01         0.6697\nNGA035015  1.5524e-01 -5.0709e-04  6.4873e-02  6.1147e-01         0.5409\nNGA035016 -2.5648e-02 -2.7978e-04  1.0796e-01 -7.7205e-02         0.9385\nNGA036001  1.3642e+00 -2.6501e-03  5.0878e-01  1.9162e+00         0.0553\nNGA036002 -2.6751e-02 -1.0087e-04  1.1051e-02 -2.5351e-01         0.7999\nNGA036003  2.4019e-01 -1.8415e-04  2.8317e-02  1.4284e+00         0.1532\nNGA036004  2.1148e-01 -4.8557e-04  4.1252e-02  1.0436e+00         0.2967\nNGA036005  1.0190e-01 -7.5158e-05  8.2344e-03  1.1238e+00         0.2611\nNGA036006  4.7683e-01 -9.0333e-04  1.1552e-01  1.4056e+00         0.1598\nNGA036007  4.3449e-01 -9.0333e-04  9.8888e-02  1.3846e+00         0.1662\nNGA036008  1.0061e-01 -8.5056e-04  9.3116e-02  3.3249e-01         0.7395\nNGA036009 -1.1220e-01 -1.1041e-05  1.0572e-03 -3.4504e+00         0.0006\nNGA036010  7.2654e-01 -2.2334e-04  3.4341e-02  3.9218e+00         0.0001\nNGA036011 -1.5476e+00 -3.0906e-04  4.7519e-02 -7.0983e+00         0.0000\nNGA036012 -9.5321e-02 -2.4958e-04  3.1937e-02 -5.3199e-01         0.5947\nNGA036013  7.5642e+00 -2.2217e-02  3.3410e+00  4.1505e+00         0.0000\nNGA036014  3.9764e-02 -1.1041e-05  2.8376e-03  7.4668e-01         0.4553\nNGA036015  1.7339e-01 -3.4119e-04  4.3657e-02  8.3149e-01         0.4057\nNGA036016  3.2454e-01 -7.4978e-04  1.4422e-01  8.5654e-01         0.3917\nNGA036017 -2.2605e-01 -1.2865e-04  1.9784e-02 -1.6062e+00         0.1082\nNGA037001  8.4247e-04 -5.8324e-08  8.9701e-06  2.8131e-01         0.7785\nNGA037002 -4.8417e-04 -3.9450e-06  5.0495e-04 -2.1371e-02         0.9829\nNGA037003 -9.5248e-02 -7.5158e-05  1.1558e-02 -8.8525e-01         0.3760\nNGA037004  4.6943e-05 -1.1993e-06  1.5351e-04  3.8856e-03         0.9969\nNGA037005 -3.8003e-02 -1.0012e-04  1.9271e-02 -2.7304e-01         0.7848\nNGA037006  2.9222e-02 -9.1402e-05  1.0014e-02  2.9293e-01         0.7696\nNGA037007  6.0156e-02 -3.6404e-05  3.0941e-03  1.0821e+00         0.2792\nNGA037008  4.5537e-03 -4.0953e-06  6.2984e-04  1.8161e-01         0.8559\nNGA037009 -7.4707e-03 -2.3737e-06  2.0175e-04 -5.2579e-01         0.5990\nNGA037010  2.7606e-02 -1.7324e-04  1.4723e-02  2.2894e-01         0.8189\nNGA037011  6.0691e-02 -1.6171e-04  4.1554e-02  2.9852e-01         0.7653\nNGA037012  4.4625e-02 -5.4802e-04  1.0543e-01  1.3912e-01         0.8894\nNGA037013  7.9112e-01 -7.7647e-04  1.9940e-01  1.7734e+00         0.0762\nNGA037014  1.4754e-01 -8.2692e-04  7.9110e-02  5.2751e-01         0.5978\n\n\n\n4.6.1.1 Mapping the local Moran’s I for Functional Waterpoints\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nf_wpt.localMI <- cbind(nga_wp,localMI_f_wpt) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.1.2 Mapping both local Moran’s I values and p-values for Functional Waterpoints\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualization.\n\nf_wpt_localMI.map <- tm_shape(f_wpt.localMI) +\n  tm_fill(col = \"Ii\",\n          breaks=c(-Inf, 0, 5, 10, 15, Inf),\n          title = \"Local Moran's I statistics\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I Statistics For Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\nf_wpt_pvalue.map <- tm_shape(f_wpt.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I P-values For Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\ntmap_arrange(f_wpt_localMI.map, f_wpt_pvalue.map, asp=1, ncol=2)\n\n\n\n\nIi > 0 indicates a grouping of similar values (higher or lower than average). Most areas have positive local moran’s I statistics with 1 region at the central northern side where there is high local moran’s I statistics.\nIi < 0 indicates a combination of dissimilar values (e.g. high values surrounded by low values). Approximate 1/3 of areas have negative local moran’s I statistics.\n\n\n\n4.6.2 Computing local Moran’s I for Non-functional Waterpoints\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of non-functional waterpoints at the county level.\n\nfips <- order(nga_wp$ADM2_CODE)\nlocalMI_nf_wpt <- localmoran(nga_wp$`wpt non-functional`, rswm_q)\nhead(localMI_nf_wpt)\n\n             Ii          E.Ii       Var.Ii         Z.Ii Pr(z != E(Ii))\n1 -0.3293461319 -1.006443e-03 0.1935434145 -0.746335642      0.4554647\n2 -0.0232170719 -2.046812e-05 0.0039399933 -0.369552942      0.7117156\n3  0.1049642343 -1.133492e-03 0.1449200709  0.278703106      0.7804727\n4  0.4133135297 -6.705952e-04 0.0641649070  1.634311750      0.1021934\n5 -0.0138498133 -1.701640e-06 0.0002178059 -0.938330308      0.3480747\n6  0.0004439503 -1.071807e-04 0.0164824028  0.004292839      0.9965748\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local Moran’s I statistics under the randomization hypothesis\nVar.Ii: the variance of local Moran’s I statistics under the randomization hypothesis\nZ.Ii:the standard deviate of local Moran’s I statistics\nPr(): the p-value of local Moran’s I statistics\n\nThe code chunk below list the content of the local Moran’s I statistics matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI_nf_wpt[fips,], \n  row.names=nga_wp$ADM2_CODE[fips]),\n  check.names=FALSE)\n\n                   Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nNGA001001 -3.2935e-01 -1.0064e-03  1.9354e-01 -7.4634e-01         0.4555\nNGA001002 -2.3217e-02 -2.0468e-05  3.9400e-03 -3.6955e-01         0.7117\nNGA001003  1.0496e-01 -1.1335e-03  1.4492e-01  2.7870e-01         0.7805\nNGA001004  4.1331e-01 -6.7060e-04  6.4165e-02  1.6343e+00         0.1022\nNGA001005 -1.3850e-02 -1.7016e-06  2.1781e-04 -9.3833e-01         0.3481\nNGA001006  4.4395e-04 -1.0718e-04  1.6482e-02  4.2928e-03         0.9966\nNGA001007 -2.8291e-02 -7.0727e-05  7.7489e-03 -3.2059e-01         0.7485\nNGA001008  4.2152e-01 -5.2815e-04  8.1186e-02  1.4812e+00         0.1385\nNGA001009 -2.8857e-01 -5.3569e-03  4.0706e-01 -4.4389e-01         0.6571\nNGA001010  2.2956e-01 -4.8444e-04  9.3209e-02  7.5349e-01         0.4512\nNGA001011  3.1481e-02 -4.8444e-04  4.6362e-02  1.4846e-01         0.8820\nNGA001012  4.2847e-02 -5.0881e-05  6.5124e-03  5.3157e-01         0.5950\nNGA001013  7.4725e-02 -2.8384e-04  3.1091e-02  4.2540e-01         0.6705\nNGA001014 -1.7501e-01 -2.2215e-04  2.8428e-02 -1.0367e+00         0.2999\nNGA001015  2.7869e-01 -5.7374e-04  6.2829e-02  1.1141e+00         0.2652\nNGA001016  6.5387e-03 -4.0757e-07  6.2683e-05  8.2594e-01         0.4088\nNGA001017  5.3833e-01 -6.2123e-04  6.8025e-02  2.0664e+00         0.0388\nNGA002001  8.3032e-01 -1.5599e-03  1.4913e-01  2.1542e+00         0.0312\nNGA002002  1.1277e+00 -1.6376e-03  2.0927e-01  2.4687e+00         0.0136\nNGA002003  5.2544e-01 -1.4102e-03  2.7109e-01  1.0119e+00         0.3116\nNGA002004  7.3618e-01 -6.7060e-04  1.2900e-01  2.0516e+00         0.0402\nNGA002005  1.0774e+00 -1.4102e-03  2.1659e-01  2.3182e+00         0.0204\nNGA002006  4.9426e-01 -1.0690e-03  1.3669e-01  1.3398e+00         0.1803\nNGA002007  1.0254e+00 -1.4841e-03  1.8969e-01  2.3577e+00         0.0184\nNGA002008  1.0591e+00 -1.2681e-03  3.2548e-01  1.8586e+00         0.0631\nNGA002009 -3.8550e-01 -1.4841e-03  2.2792e-01 -8.0436e-01         0.4212\nNGA002010  1.1732e+00 -1.6376e-03  3.1472e-01  2.0942e+00         0.0362\nNGA002011  1.0825e+00 -1.3382e-03  2.0554e-01  2.3906e+00         0.0168\nNGA002012  2.7510e-01 -1.4102e-03  1.1970e-01  7.9924e-01         0.4242\nNGA002013  1.0324e+00 -1.2681e-03  3.2548e-01  1.8118e+00         0.0700\nNGA002014  1.0995e+00 -1.4841e-03  2.2792e-01  2.3062e+00         0.0211\nNGA002015  1.1732e+00 -1.6376e-03  6.3108e-01  1.4789e+00         0.1392\nNGA002016  6.7194e-01 -1.4841e-03  2.2792e-01  1.4106e+00         0.1584\nNGA002017  9.8999e-01 -1.3382e-03  1.4643e-01  2.5906e+00         0.0096\nNGA002018  9.4720e-01 -1.1335e-03  1.2406e-01  2.6925e+00         0.0071\nNGA002019 -2.5699e-01 -1.5599e-03  4.0028e-01 -4.0373e-01         0.6864\nNGA002020  1.0537e+00 -1.2681e-03  1.9478e-01  2.3905e+00         0.0168\nNGA002021  1.0331e+00 -1.3382e-03  5.1586e-01  1.4403e+00         0.1498\nNGA003001  2.1255e-02 -2.0274e-04  2.5945e-02  1.3322e-01         0.8940\nNGA003002  1.3631e-01 -4.0269e-04  6.1908e-02  5.4944e-01         0.5827\nNGA003003  3.9264e-02 -1.0718e-04  1.6482e-02  3.0667e-01         0.7591\nNGA003004 -4.8331e-02 -2.2215e-04  2.8428e-02 -2.8533e-01         0.7754\nNGA003005 -7.1403e-03 -2.5916e-06  2.8396e-04 -4.2358e-01         0.6719\nNGA003006  9.2446e-03 -5.5331e-05  8.5093e-03  1.0082e-01         0.9197\nNGA003007 -3.0356e-02 -2.0274e-04  2.5945e-02 -1.8720e-01         0.8515\nNGA003008  1.6112e-01 -8.3003e-04  1.2755e-01  4.5347e-01         0.6502\nNGA003009 -2.3577e-02 -2.6184e-04  4.0260e-02 -1.1620e-01         0.9075\nNGA003010  1.5489e-02 -1.2824e-04  1.6412e-02  1.2191e-01         0.9030\nNGA003011 -9.9791e-03 -4.0757e-07  7.8456e-05 -1.1266e+00         0.2599\nNGA003012  3.3325e-02 -3.0202e-05  3.3091e-03  5.7984e-01         0.5620\nNGA003013  3.4856e-02 -3.0202e-05  4.6448e-03  5.1188e-01         0.6087\nNGA003014  6.9688e-03 -8.8010e-05  2.2616e-02  4.6924e-02         0.9626\nNGA003015  2.5381e-01 -7.7500e-04  9.9121e-02  8.0864e-01         0.4187\nNGA003016  2.5188e-02 -1.0545e-05  2.0299e-03  5.5930e-01         0.5760\nNGA003017  2.3144e-02 -2.6184e-04  5.0390e-02  1.0427e-01         0.9170\nNGA003018 -1.2506e-01 -8.6885e-04  1.1111e-01 -3.7256e-01         0.7095\nNGA003019 -4.4731e-03 -8.2374e-05  1.5855e-02 -3.4870e-02         0.9722\nNGA003020  3.7429e-02 -1.2824e-04  2.4683e-02  2.3905e-01         0.8111\nNGA003021 -1.9949e-02 -6.5684e-05  6.2887e-03 -2.5073e-01         0.8020\nNGA003022  1.0124e-02 -1.7798e-05  1.9501e-03  2.2967e-01         0.8183\nNGA003023  4.7687e-02 -5.0881e-05  5.5747e-03  6.3936e-01         0.5226\nNGA003024  2.0891e-02 -2.0468e-05  2.6198e-03  4.0855e-01         0.6829\nNGA003025 -3.8847e-01 -1.0690e-03  2.0557e-01 -8.5445e-01         0.3929\nNGA003026 -1.2279e-02 -3.7966e-05  4.8594e-03 -1.7560e-01         0.8606\nNGA003027  7.3522e-02 -7.0727e-05  1.8175e-02  5.4588e-01         0.5852\nNGA003028  6.4062e-02 -7.0727e-05  9.0523e-03  6.7406e-01         0.5003\nNGA003029 -1.1682e-02 -2.5916e-06  3.3172e-04 -6.4127e-01         0.5213\nNGA003030 -8.1119e-02 -2.2215e-04  3.4158e-02 -4.3771e-01         0.6616\nNGA003031 -1.4235e-02 -2.6938e-05  2.0580e-03 -3.1320e-01         0.7541\nNGA004001  8.1951e-01 -1.1335e-03  1.7413e-01  1.9666e+00         0.0492\nNGA004002  4.7303e-01 -4.8444e-04  6.1978e-02  1.9020e+00         0.0572\nNGA004003  5.7490e-01 -7.2185e-04  6.9066e-02  2.1903e+00         0.0285\nNGA004004  6.7029e-01 -6.7060e-04  7.3427e-02  2.4761e+00         0.0133\nNGA004005  7.9004e-01 -1.6376e-03  1.5654e-01  2.0009e+00         0.0454\nNGA004006  7.4367e-01 -1.0064e-03  1.5463e-01  1.8937e+00         0.0583\nNGA004007  5.3906e-01 -4.8444e-04  7.4470e-02  1.9771e+00         0.0480\nNGA004008  4.9284e-01 -4.8444e-04  7.4470e-02  1.8078e+00         0.0706\nNGA004009  8.4650e-01 -1.4102e-03  2.1659e-01  1.8219e+00         0.0685\nNGA004010  7.9795e-01 -1.3382e-03  1.4643e-01  2.0888e+00         0.0367\nNGA004011  9.1553e-01 -1.3382e-03  1.4643e-01  2.3960e+00         0.0166\nNGA004012  2.2497e-01 -1.2824e-04  1.6412e-02  1.7571e+00         0.0789\nNGA004013  6.6856e-01 -8.3003e-04  9.0870e-02  2.2206e+00         0.0264\nNGA004014  8.9156e-01 -9.4575e-04  2.4283e-01  1.8112e+00         0.0701\nNGA004015  9.1824e-01 -1.4841e-03  1.4189e-01  2.4416e+00         0.0146\nNGA004016  5.2843e-01 -8.3003e-04  6.3359e-02  2.1026e+00         0.0355\nNGA004017  8.4859e-01 -1.4841e-03  1.6237e-01  2.1096e+00         0.0349\nNGA004018  9.7718e-01 -1.5599e-03  4.0028e-01  1.5470e+00         0.1219\nNGA004019  6.5374e-01 -8.3003e-04  1.2755e-01  1.8328e+00         0.0668\nNGA004020  6.0526e-01 -7.7500e-04  9.9121e-02  1.9249e+00         0.0542\nNGA004021  4.1581e-01 -2.9422e-04  3.7649e-02  2.1445e+00         0.0320\nNGA005001 -3.5289e-01 -1.7602e-04  1.6850e-02 -2.7172e+00         0.0066\nNGA005002  9.8900e-02 -8.8010e-05  1.3535e-02  8.5087e-01         0.3948\nNGA005003 -4.0563e-01 -3.2849e-04  6.3213e-02 -1.6121e+00         0.1070\nNGA005004 -2.3561e-02 -1.2622e-05  1.6156e-03 -5.8586e-01         0.5580\nNGA005005  8.1410e-03 -1.0545e-05  1.1554e-03  2.3981e-01         0.8105\nNGA005006  2.1718e-01 -4.8444e-04  1.8690e-01  5.0347e-01         0.6146\nNGA005007 -7.0877e-01 -1.0274e-02  1.3016e+00 -6.1225e-01         0.5404\nNGA005008  1.5190e-02 -6.7060e-04  6.4165e-02  6.2616e-02         0.9501\nNGA005009  1.9074e-03 -2.6184e-04  5.0390e-02  9.6636e-03         0.9923\nNGA005010 -2.4560e-02 -1.2622e-05  1.2085e-03 -7.0612e-01         0.4801\nNGA005011 -3.7532e-02 -2.6184e-04  5.0390e-02 -1.6603e-01         0.8681\nNGA005012  1.2075e-02 -1.7016e-06  1.8645e-04  8.8443e-01         0.3765\nNGA005013 -7.4983e-02 -1.2622e-05  1.9412e-03 -1.7016e+00         0.0888\nNGA005014 -1.9622e-02 -1.0545e-05  1.6218e-03 -4.8698e-01         0.6263\nNGA005015 -9.8222e-02 -5.7374e-04  5.4903e-02 -4.1674e-01         0.6769\nNGA005016 -1.7273e-01 -3.5308e-04  5.4284e-02 -7.3984e-01         0.4594\nNGA005017 -8.9226e-02 -1.5118e-04  1.2848e-02 -7.8583e-01         0.4320\nNGA005018  5.1312e-02 -1.7602e-04  1.3445e-02  4.4405e-01         0.6570\nNGA005019  1.2080e-01 -4.1823e-05  8.0505e-03  1.3468e+00         0.1780\nNGA005020  2.8626e-02 -5.1798e-06  5.6754e-04  1.2018e+00         0.2294\nNGA006001  3.4874e-01 -3.2849e-04  5.0505e-02  1.5533e+00         0.1204\nNGA006002  2.1354e-01 -1.5118e-04  2.9098e-02  1.2527e+00         0.2103\nNGA006003  4.1440e-01 -1.5599e-03  4.0028e-01  6.5746e-01         0.5109\nNGA006004  3.6120e-01 -6.2123e-04  1.5955e-01  9.0582e-01         0.3650\nNGA006005  4.3451e-01 -4.8444e-04  6.1978e-02  1.7473e+00         0.0806\nNGA006006 -2.3687e-02 -1.7016e-06  1.4464e-04 -1.9694e+00         0.0489\nNGA006007  2.5241e-01 -2.6184e-04  2.8682e-02  1.4920e+00         0.1357\nNGA006008  4.8209e-01 -6.7060e-04  8.5777e-02  1.6484e+00         0.0993\nNGA007001 -1.3939e-02 -1.2622e-05  1.0728e-03 -4.2519e-01         0.6707\nNGA007002 -1.8498e-02 -1.4377e-04  2.2108e-02 -1.2344e-01         0.9018\nNGA007003  8.3064e-02 -2.9422e-04  4.5237e-02  3.9192e-01         0.6951\nNGA007004  4.4595e-01 -1.2464e-03  1.5934e-01  1.1203e+00         0.2626\nNGA007005  7.2823e-01 -8.6885e-04  1.3351e-01  1.9954e+00         0.0460\nNGA007006  1.8573e-01 -3.1751e-04  2.6979e-02  1.1327e+00         0.2574\nNGA007007  1.3062e-01 -1.3874e-03  1.1776e-01  3.8469e-01         0.7005\nNGA007008 -8.5829e-02 -8.8694e-04  1.1343e-01 -2.5221e-01         0.8009\nNGA007009  2.0526e-01 -6.5684e-05  7.1964e-03  2.4204e+00         0.0155\nNGA007010  1.0871e+00 -2.0267e-03  2.2162e-01  2.3136e+00         0.0207\nNGA007011  7.5043e-01 -7.5809e-04  9.6960e-02  2.4124e+00         0.0158\nNGA007012  7.7282e-03 -1.1091e-07  1.7057e-05  1.8712e+00         0.0613\nNGA007013 -1.9564e-02 -1.2622e-05  2.4297e-03 -3.9665e-01         0.6916\nNGA007014 -1.4901e-02 -1.2622e-05  2.4297e-03 -3.0205e-01         0.7626\nNGA007015  1.5800e-01 -8.8010e-05  1.3535e-02  1.3589e+00         0.1742\nNGA007016  4.6837e-02 -4.1823e-05  8.0505e-03  5.2248e-01         0.6013\nNGA007017 -3.9058e-02 -6.6631e-06  8.5285e-04 -1.3372e+00         0.1812\nNGA007018  8.1162e-02 -1.7602e-04  2.2526e-02  5.4194e-01         0.5879\nNGA007019  2.8369e-02 -8.8010e-05  8.4260e-03  3.1001e-01         0.7566\nNGA007020 -5.9707e-02 -6.6631e-06  1.2826e-03 -1.6670e+00         0.0955\nNGA007021  5.9672e-01 -6.5487e-04  1.2598e-01  1.6831e+00         0.0924\nNGA007022  9.5129e-01 -2.0267e-03  2.5889e-01  1.8736e+00         0.0610\nNGA007023  5.9105e-01 -3.5308e-04  5.4284e-02  2.5384e+00         0.0111\nNGA008001  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008002  9.8868e-01 -1.1335e-03  1.0841e-01  3.0062e+00         0.0026\nNGA008003  1.2642e+00 -1.6376e-03  2.5145e-01  2.5244e+00         0.0116\nNGA008004  1.8145e-01 -4.0269e-04  6.1908e-02  7.3089e-01         0.4648\nNGA008005  1.0895e+00 -1.5599e-03  1.4913e-01  2.8253e+00         0.0047\nNGA008006  9.5606e-01 -1.0690e-03  2.7444e-01  1.8270e+00         0.0677\nNGA008007  1.2035e+00 -1.6376e-03  1.5654e-01  3.0461e+00         0.0023\nNGA008008  1.2642e+00 -1.6376e-03  2.0927e-01  2.7672e+00         0.0057\nNGA008009  1.2521e+00 -1.6376e-03  2.5145e-01  2.5002e+00         0.0124\nNGA008010  1.2642e+00 -1.6376e-03  2.0927e-01  2.7672e+00         0.0057\nNGA008011  1.2642e+00 -1.6376e-03  3.1472e-01  2.2565e+00         0.0240\nNGA008012  1.0673e+00 -1.4841e-03  1.6237e-01  2.6524e+00         0.0080\nNGA008013  3.8214e-01 -1.7602e-04  3.3877e-02  2.0772e+00         0.0378\nNGA008014  1.2339e+00 -1.6376e-03  2.5145e-01  2.4639e+00         0.0137\nNGA008015  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008016  1.1337e+00 -1.6376e-03  1.2491e-01  3.2126e+00         0.0013\nNGA008017  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008018  1.0518e+00 -1.6376e-03  3.1472e-01  1.8778e+00         0.0604\nNGA008019  1.1428e+00 -1.6376e-03  1.7914e-01  2.7040e+00         0.0069\nNGA008020  1.1705e+00 -1.4841e-03  1.6237e-01  2.9085e+00         0.0036\nNGA008021  5.7742e-01 -7.7500e-04  2.9892e-01  1.0575e+00         0.2903\nNGA008022  1.2642e+00 -1.6376e-03  3.1472e-01  2.2565e+00         0.0240\nNGA008023  1.2642e+00 -1.6376e-03  2.5145e-01  2.5244e+00         0.0116\nNGA008024  1.2642e+00 -1.6376e-03  2.5145e-01  2.5244e+00         0.0116\nNGA008025  1.2642e+00 -1.6376e-03  4.2017e-01  1.9529e+00         0.0508\nNGA008026  1.1342e+00 -1.6376e-03  1.7914e-01  2.6836e+00         0.0073\nNGA008027 -5.4859e-03 -1.3382e-03  1.4643e-01 -1.0839e-02         0.9914\nNGA009001  3.4495e-01 -1.2142e-04  1.8671e-02  2.5253e+00         0.0116\nNGA009002  9.7874e-02 -5.1798e-06  5.6754e-04  4.1086e+00         0.0000\nNGA009003  6.9581e-01 -8.0471e-03  1.5366e+00  5.6782e-01         0.5702\nNGA009005  1.1040e+00 -8.6885e-04  1.3351e-01  3.0239e+00         0.0025\nNGA009006  1.7709e-01 -2.2215e-04  2.1265e-02  1.2159e+00         0.2240\nNGA009007  2.2586e+00 -3.7864e-03  5.8014e-01  2.9703e+00         0.0030\nNGA009008 -3.3074e-01 -8.8010e-05  2.2616e-02 -2.1987e+00         0.0279\nNGA009009 -2.1071e-02 -4.0757e-07  1.0474e-04 -2.0588e+00         0.0395\nNGA009010  1.1785e+00 -1.9402e-03  4.9766e-01  1.6733e+00         0.0943\nNGA009011  1.5063e+00 -1.6130e-03  2.0613e-01  3.3212e+00         0.0009\nNGA009012  1.3605e+00 -1.3160e-03  3.3776e-01  2.3433e+00         0.0191\nNGA009013  1.9463e+00 -3.7864e-03  4.8282e-01  2.8065e+00         0.0050\nNGA009014  1.7077e+00 -3.2122e-03  4.0984e-01  2.6725e+00         0.0075\nNGA009015  9.4023e-02 -2.2976e-03  1.5900e-01  2.4156e-01         0.8091\nNGA009016  2.3319e+00 -3.6678e-03  5.6203e-01  3.1154e+00         0.0018\nNGA009017  1.2470e+00 -8.3994e-03  1.2810e+00  1.1092e+00         0.2673\nNGA009018  1.5848e+00 -3.7864e-03  3.6117e-01  2.6434e+00         0.0082\nNGA010001  9.1888e-01 -1.2681e-03  2.4380e-01  1.8636e+00         0.0624\nNGA010002  7.3525e-01 -1.3382e-03  1.4643e-01  1.9249e+00         0.0542\nNGA010003  6.0993e-01 -1.4102e-03  2.1659e-01  1.3136e+00         0.1890\nNGA010004  8.0003e-01 -1.4102e-03  2.7109e-01  1.5393e+00         0.1237\nNGA010005  2.3992e-01 -7.2185e-04  1.3885e-01  6.4579e-01         0.5184\nNGA010006  2.6689e-01 -5.7374e-04  8.8190e-02  9.0064e-01         0.3678\nNGA010007  6.7548e-01 -1.6376e-03  2.5145e-01  1.3503e+00         0.1769\nNGA010008  4.3345e-01 -8.8694e-04  1.7058e-01  1.0516e+00         0.2930\nNGA010009  1.7289e-01 -2.3134e-04  4.4523e-02  8.2048e-01         0.4119\nNGA010010  2.3883e-01 -5.2815e-04  8.1186e-02  8.4005e-01         0.4009\nNGA010011 -2.1676e-02 -1.7016e-06  1.6293e-04 -1.6980e+00         0.0895\nNGA010012  1.3304e-01 -1.7602e-04  1.9283e-02  9.5936e-01         0.3374\nNGA010013  5.4022e-01 -1.2681e-03  1.3877e-01  1.4536e+00         0.1461\nNGA010014  8.1873e-01 -1.2681e-03  1.9478e-01  1.8580e+00         0.0632\nNGA010015  6.5004e-01 -8.3003e-04  9.0870e-02  2.1592e+00         0.0308\nNGA010016  5.1794e-01 -9.4575e-04  1.4532e-01  1.3612e+00         0.1735\nNGA010017  5.3906e-01 -1.0064e-03  1.9354e-01  1.2276e+00         0.2196\nNGA010018  7.7187e-01 -1.4102e-03  2.7109e-01  1.4852e+00         0.1375\nNGA010019  3.5311e-01 -5.7374e-04  4.3808e-02  1.6898e+00         0.0911\nNGA010020  6.7306e-01 -6.7060e-04  7.3427e-02  2.4863e+00         0.0129\nNGA010021  1.5281e-02 -2.5916e-06  4.9888e-04  6.8428e-01         0.4938\nNGA010022  7.0336e-01 -1.1335e-03  1.7413e-01  1.6883e+00         0.0914\nNGA010023  1.5899e-01 -2.6184e-04  2.2250e-02  1.0676e+00         0.2857\nNGA010024  2.9960e-01 -1.5118e-04  1.9348e-02  2.1550e+00         0.0312\nNGA010025  6.9249e-01 -1.1998e-03  1.8431e-01  1.6158e+00         0.1061\nNGA011001  6.9618e-01 -2.6852e-03  2.9343e-01  1.2902e+00         0.1970\nNGA011002  5.2273e-01 -1.2464e-03  1.9146e-01  1.1975e+00         0.2311\nNGA011003  9.3140e-03 -8.8010e-05  1.1264e-02  8.8588e-02         0.9294\nNGA011004  4.9109e-02 -1.2142e-04  1.8671e-02  3.6029e-01         0.7186\nNGA011005 -4.2011e-01 -2.0274e-04  2.5945e-02 -2.6069e+00         0.0091\nNGA011006  4.3098e-01 -5.1421e-04  9.8933e-02  1.3718e+00         0.1701\nNGA011007 -6.2389e-02 -2.5916e-06  3.3172e-04 -3.4253e+00         0.0006\nNGA011008  2.4465e-01 -4.5377e-03  5.7818e-01  3.2772e-01         0.7431\nNGA011009  3.6921e-01 -7.2185e-04  9.2329e-02  1.2175e+00         0.2234\nNGA011010 -3.4861e-01 -3.6465e-04  5.6062e-02 -1.4708e+00         0.1413\nNGA011011 -2.3044e-02 -2.8384e-04  3.6320e-02 -1.1943e-01         0.9049\nNGA011012  1.6293e-01 -1.9413e-04  3.7363e-02  8.4393e-01         0.3987\nNGA011013  6.3718e-01 -3.9069e-03  3.7262e-01  1.0502e+00         0.2936\nNGA012001  4.0136e-03 -1.1091e-07  7.6928e-06  1.4471e+00         0.1479\nNGA012002  8.5977e-02 -1.5118e-04  3.8848e-02  4.3698e-01         0.6621\nNGA012003  3.0226e-01 -4.4262e-04  8.5167e-02  1.0372e+00         0.2996\nNGA012004  2.7859e-01 -4.4262e-04  6.8045e-02  1.0697e+00         0.2848\nNGA012005  3.3645e-01 -4.4262e-04  3.7605e-02  1.7373e+00         0.0823\nNGA012006  2.2437e-01 -5.7374e-04  7.3396e-02  8.3032e-01         0.4064\nNGA012007  2.0350e-01 -2.0274e-04  3.1174e-02  1.1537e+00         0.2486\nNGA012008  1.1616e-01 -3.2849e-04  2.7912e-02  6.9726e-01         0.4856\nNGA012009  2.0692e-01 -2.9422e-04  3.2228e-02  1.1543e+00         0.2484\nNGA012010  1.1979e-01 -1.5118e-04  1.9348e-02  8.6226e-01         0.3885\nNGA012011  2.5350e-02 -1.2622e-05  1.3830e-03  6.8200e-01         0.4952\nNGA012012  9.2443e-02 -2.0274e-04  5.2092e-02  4.0592e-01         0.6848\nNGA012013 -2.2624e-01 -2.2215e-04  1.4103e-02 -1.9033e+00         0.0570\nNGA012014 -3.1961e-02 -8.8010e-05  6.7232e-03 -3.8872e-01         0.6975\nNGA012015 -2.6129e-02 -7.0727e-05  1.0877e-02 -2.4986e-01         0.8027\nNGA012016 -6.3085e-03 -1.2824e-04  1.9720e-02 -4.4010e-02         0.9649\nNGA012017 -4.1438e-03 -5.5331e-05  8.5093e-03 -4.4322e-02         0.9646\nNGA012018  1.9069e-02 -1.2622e-05  1.6156e-03  4.7475e-01         0.6350\nNGA013001  5.4637e-02 -7.0554e-04  1.0843e-01  1.6807e-01         0.8665\nNGA013002  2.3176e-01 -2.8384e-04  2.7169e-02  1.4078e+00         0.1592\nNGA013003 -5.7363e-01 -2.9422e-04  5.6620e-02 -2.4095e+00         0.0160\nNGA013004 -1.0684e+00 -1.3382e-03  2.0554e-01 -2.3536e+00         0.0186\nNGA013005  5.5315e-01 -1.0491e-03  1.1483e-01  1.6354e+00         0.1020\nNGA013006  7.2281e-01 -1.5359e-03  1.4683e-01  1.8903e+00         0.0587\nNGA013007 -7.2534e-01 -4.8444e-04  7.4470e-02 -2.6562e+00         0.0079\nNGA013008 -3.8704e-01 -1.4102e-03  2.1659e-01 -8.2862e-01         0.4073\nNGA013009 -6.2999e-02 -3.3233e-03  5.0942e-01 -8.3610e-02         0.9334\nNGA013010  9.8400e-02 -1.4377e-04  2.2108e-02  6.6275e-01         0.5075\nNGA013011  3.0268e-01 -6.5487e-04  7.1707e-02  1.1328e+00         0.2573\nNGA013012 -2.8330e-01 -3.2849e-04  6.3213e-02 -1.1255e+00         0.2604\nNGA013013 -1.5432e-01 -7.0727e-05  6.7715e-03 -1.8745e+00         0.0609\nNGA013014 -3.4585e-01 -1.5599e-03  1.9936e-01 -7.7109e-01         0.4407\nNGA013015  1.1326e-01 -3.7966e-05  4.8594e-03  1.6252e+00         0.1041\nNGA013016  2.0211e-01 -8.6885e-04  1.3351e-01  5.5551e-01         0.5785\nNGA014001  6.2085e-01 -1.6376e-03  2.5145e-01  1.2414e+00         0.2145\nNGA014002  6.9451e-01 -1.0690e-03  1.3669e-01  1.8814e+00         0.0599\nNGA014003  7.3133e-01 -1.3382e-03  2.0554e-01  1.6161e+00         0.1061\nNGA014004  9.0214e-01 -1.5599e-03  2.3954e-01  1.8464e+00         0.0648\nNGA014005  8.4883e-01 -1.5599e-03  2.9982e-01  1.5531e+00         0.1204\nNGA014006  7.5780e-01 -9.4575e-04  1.4532e-01  1.9904e+00         0.0465\nNGA014007  6.0621e-01 -8.3003e-04  1.2755e-01  1.6997e+00         0.0892\nNGA014008  6.8879e-01 -1.4102e-03  2.1659e-01  1.4831e+00         0.1381\nNGA014009  8.0266e-01 -1.3382e-03  2.0554e-01  1.7734e+00         0.0762\nNGA014010 -1.4230e-02 -1.7016e-06  1.4464e-04 -1.1831e+00         0.2368\nNGA014011  1.2270e-01 -1.0064e-03  7.6813e-02  4.4635e-01         0.6553\nNGA014012  2.5228e-01 -8.8010e-05  1.3535e-02  2.1692e+00         0.0301\nNGA014013  6.3422e-01 -1.0064e-03  1.2869e-01  1.7707e+00         0.0766\nNGA014014  6.6615e-01 -7.7500e-04  7.4147e-02  2.4492e+00         0.0143\nNGA014015  6.9480e-01 -1.5599e-03  2.3954e-01  1.4228e+00         0.1548\nNGA014016  7.4806e-01 -9.4575e-04  8.0311e-02  2.6430e+00         0.0082\nNGA014017  7.4128e-01 -1.4841e-03  1.4189e-01  1.9718e+00         0.0486\nNGA015001 -2.3253e-04 -4.0757e-07  4.4657e-05 -3.4736e-02         0.9723\nNGA015002  1.8339e-01 -2.9958e-03  2.8598e-01  3.4854e-01         0.7274\nNGA015003  3.3534e-01 -1.9413e-04  3.7363e-02  1.7359e+00         0.0826\nNGA015004  1.3386e-02 -5.1798e-06  6.6300e-04  5.2008e-01         0.6030\nNGA015005  2.2909e-01 -3.1751e-04  4.8818e-02  1.0383e+00         0.2991\nNGA015006  1.2326e-01 -6.0610e-04  1.5567e-01  3.1395e-01         0.7536\nNGA016001  3.7148e+00 -1.2994e-02  1.0901e+00  3.5704e+00         0.0004\nNGA016002  1.5757e+00 -5.2157e-03  4.9678e-01  2.2430e+00         0.0249\nNGA016003  2.4817e+00 -4.4078e-03  8.4475e-01  2.7049e+00         0.0068\nNGA016004  1.9724e+00 -5.0763e-03  5.5338e-01  2.6583e+00         0.0079\nNGA016005  9.4456e-01 -4.1536e-03  6.3615e-01  1.1895e+00         0.2343\nNGA016006 -1.0907e-01 -2.5916e-06  1.0004e-03 -3.4485e+00         0.0006\nNGA016007  1.7981e+00 -8.6885e-04  1.6711e-01  4.4009e+00         0.0000\nNGA016008  2.4232e+00 -3.7864e-03  4.8282e-01  3.4928e+00         0.0005\nNGA016009  7.4284e-01 -1.3874e-03  2.6670e-01  1.4411e+00         0.1496\nNGA016010  1.8062e+00 -4.0293e-03  6.1720e-01  2.3043e+00         0.0212\nNGA016011  1.9014e+00 -9.5018e-03  1.2047e+00  1.7410e+00         0.0817\nNGA017001  1.8550e-01 -2.0274e-04  2.2209e-02  1.2461e+00         0.2127\nNGA017002  1.3528e-01 -8.8010e-05  9.6424e-03  1.3786e+00         0.1680\nNGA017003  3.1088e-01 -4.0269e-04  6.1908e-02  1.2511e+00         0.2109\nNGA017004  1.5955e-01 -5.2815e-04  8.1186e-02  5.6181e-01         0.5742\nNGA017005  8.9936e-01 -1.3382e-03  1.2796e-01  2.5179e+00         0.0118\nNGA017006  7.7406e-01 -1.1335e-03  1.7413e-01  1.8577e+00         0.0632\nNGA017007  3.5611e-01 -7.7500e-04  1.1910e-01  1.0341e+00         0.3011\nNGA017008  2.7921e-01 -7.2185e-04  1.1094e-01  8.4045e-01         0.4007\nNGA017009  1.3067e-01 -4.1823e-05  4.5823e-03  1.9310e+00         0.0535\nNGA017010  6.4882e-01 -1.4841e-03  2.2792e-01  1.3622e+00         0.1731\nNGA017011  3.6233e-01 -6.7060e-04  6.4165e-02  1.4331e+00         0.1518\nNGA017012  3.4910e-01 -8.3003e-04  7.9407e-02  1.2418e+00         0.2143\nNGA017013  7.5891e-01 -1.1335e-03  1.7413e-01  1.8214e+00         0.0685\nNGA017014  4.9147e-01 -4.0269e-04  6.1908e-02  1.9769e+00         0.0481\nNGA017015  4.9046e-01 -5.2815e-04  8.1186e-02  1.7232e+00         0.0849\nNGA017016  1.6098e-01 -1.5118e-04  2.3248e-02  1.0568e+00         0.2906\nNGA017017 -2.9442e-01 -3.1751e-04  3.0392e-02 -1.6870e+00         0.0916\nNGA017018 -2.1746e-02 -1.7016e-06  1.8645e-04 -1.5925e+00         0.1113\nNGA017019  3.7025e-01 -2.9422e-04  2.8163e-02  2.2080e+00         0.0272\nNGA017020  7.2939e-01 -8.8694e-04  1.1343e-01  2.1684e+00         0.0301\nNGA017021  8.0505e-01 -1.1998e-03  1.5339e-01  2.0586e+00         0.0395\nNGA017022  5.6681e-01 -1.0064e-03  1.2869e-01  1.5828e+00         0.1135\nNGA017023  3.7779e-01 -1.0690e-03  2.0557e-01  8.3561e-01         0.4034\nNGA017024  2.1648e-01 -1.2824e-04  1.6412e-02  1.6908e+00         0.0909\nNGA017025  1.5651e-01 -2.0274e-04  2.5945e-02  9.7295e-01         0.3306\nNGA017026  3.8013e-01 -1.4841e-03  5.7203e-01  5.0457e-01         0.6139\nNGA017027  6.9579e-01 -1.5599e-03  1.9936e-01  1.5618e+00         0.1183\nNGA018001 -3.0725e-01 -3.2122e-03  3.5083e-01 -5.1331e-01         0.6077\nNGA018002  3.1371e+00 -7.3650e-03  1.1244e+00  2.9655e+00         0.0030\nNGA018003 -3.2289e-01 -5.7920e-03  7.3707e-01 -3.6934e-01         0.7119\nNGA018004  7.0178e-03 -5.2815e-04  5.0543e-02  3.3565e-02         0.9732\nNGA018005  3.3445e-02 -2.0468e-05  3.1479e-03  5.9646e-01         0.5509\nNGA018006 -2.3381e-01 -1.4841e-03  1.4189e-01 -6.1677e-01         0.5374\nNGA018007  5.3497e-02 -5.1798e-06  6.6300e-04  2.0778e+00         0.0377\nNGA018008  3.0500e-01 -2.1151e-03  2.0209e-01  6.8316e-01         0.4945\nNGA018009  7.8043e-01 -6.3986e-03  1.6339e+00  6.1556e-01         0.5382\nNGA018010 -1.7446e-01 -4.4262e-04  4.8477e-02 -7.9036e-01         0.4293\nNGA018011  1.1734e-01 -5.7374e-04  5.4903e-02  5.0323e-01         0.6148\nNGA018012  1.3489e-01 -2.8384e-04  3.6320e-02  7.0929e-01         0.4781\nNGA018013 -3.6231e-02 -2.5916e-06  6.6604e-04 -1.4038e+00         0.1604\nNGA018014  4.0683e-02 -2.0468e-05  2.6198e-03  7.9523e-01         0.4265\nNGA018015 -2.8375e-01 -1.3382e-03  1.7106e-01 -6.8282e-01         0.4947\nNGA018016 -4.6525e-02 -4.1823e-05  4.0043e-03 -7.3457e-01         0.4626\nNGA018017  1.4007e+00 -3.5511e-03  3.8771e-01  2.2553e+00         0.0241\nNGA018018  5.7517e-01 -2.1151e-03  2.7016e-01  1.1107e+00         0.2667\nNGA018019 -7.6980e-01 -2.2054e-03  3.3844e-01 -1.3194e+00         0.1870\nNGA018020 -1.9731e-02 -2.5916e-06  3.9858e-04 -9.8816e-01         0.3231\nNGA018021 -4.0087e-01 -2.3134e-04  3.5572e-02 -2.1242e+00         0.0337\nNGA018022 -2.1243e-01 -1.4102e-03  2.1659e-01 -4.5343e-01         0.6502\nNGA018023  4.3393e-02 -1.0064e-03  1.2869e-01  1.2376e-01         0.9015\nNGA018024  9.0606e-02 -1.9402e-03  2.9782e-01  1.6958e-01         0.8653\nNGA018025  1.3597e+00 -1.3874e-03  1.7734e-01  3.2322e+00         0.0012\nNGA018026 -1.1337e-01 -7.5809e-04  9.6960e-02 -3.6166e-01         0.7176\nNGA018027  6.1232e-02 -1.0545e-05  1.6218e-03  1.5207e+00         0.1283\nNGA019001  1.4569e+00 -5.3569e-03  4.0706e-01  2.2919e+00         0.0219\nNGA019002 -9.4602e-01 -1.1335e-03  1.0841e-01 -2.8698e+00         0.0041\nNGA019003  3.8377e+00 -8.7593e-03  7.3800e-01  4.4774e+00         0.0000\nNGA019004  4.6873e+00 -3.0692e-02  2.5287e+00  2.9670e+00         0.0030\nNGA019005 -3.7441e-01 -5.7374e-04  7.3396e-02 -1.3799e+00         0.1676\nNGA019006  9.9921e-01 -5.5921e-04  8.5957e-02  3.4101e+00         0.0006\nNGA019007  1.4954e+00 -1.0472e-02  1.1354e+00  1.4133e+00         0.1576\nNGA019008  6.0268e-01 -3.5511e-03  3.8771e-01  9.7361e-01         0.3302\nNGA019009  5.6332e-01 -3.9053e-04  1.0033e-01  1.7797e+00         0.0751\nNGA019010 -1.2764e+00 -9.4575e-04  2.4283e-01 -2.5883e+00         0.0096\nNGA019011  5.6723e-01 -7.1992e-03  7.8314e-01  6.4911e-01         0.5163\nNGA019012 -1.0176e+00 -9.4575e-04  8.0311e-02 -3.5873e+00         0.0003\nNGA019013  2.5878e-01 -1.0095e-04  1.9431e-02  1.8572e+00         0.0633\nNGA019014  2.7535e-01 -1.0095e-04  1.5524e-02  2.2108e+00         0.0271\nNGA019015 -3.3029e-01 -4.8444e-04  6.1978e-02 -1.3248e+00         0.1853\nNGA019016  1.8787e+00 -2.2054e-03  2.8167e-01  3.5440e+00         0.0004\nNGA019017 -2.4071e-01 -7.5809e-04  1.1650e-01 -7.0299e-01         0.4821\nNGA019018 -1.2234e+00 -1.4841e-03  2.8527e-01 -2.2877e+00         0.0222\nNGA019019  9.1054e+00 -1.8061e-02  3.4139e+00  4.9378e+00         0.0000\nNGA019020  7.3853e-01 -9.2706e-04  1.0148e-01  2.3212e+00         0.0203\nNGA019021  3.6949e+00 -1.2774e-02  1.2074e+00  3.3742e+00         0.0007\nNGA019022  1.6054e-01 -5.0881e-05  6.5124e-03  1.9899e+00         0.0466\nNGA019023  9.7112e+00 -9.5018e-03  1.8117e+00  7.2220e+00         0.0000\nNGA020001  7.5743e-02 -2.0468e-05  2.6198e-03  1.4802e+00         0.1388\nNGA020002 -5.0220e-01 -3.6678e-03  5.6203e-01 -6.6499e-01         0.5061\nNGA020003 -7.0329e-02 -1.7798e-05  1.9501e-03 -1.5922e+00         0.1113\nNGA020004 -2.9818e-03 -7.7500e-04  1.1910e-01 -6.3944e-03         0.9949\nNGA020005 -6.2501e-02 -2.6938e-05  4.1430e-03 -9.7061e-01         0.3317\nNGA020006  2.0961e-02 -3.0202e-05  3.3091e-03  3.6490e-01         0.7152\nNGA020007 -6.4829e-01 -2.2054e-03  4.2361e-01 -9.9267e-01         0.3209\nNGA020008  4.2758e-01 -5.1421e-04  7.9043e-02  1.5227e+00         0.1278\nNGA020009 -1.1388e-01 -4.2987e-04  5.4999e-02 -4.8375e-01         0.6286\nNGA020010  3.3488e-01 -1.0690e-03  1.3669e-01  9.0868e-01         0.3635\nNGA020011  2.7376e-05 -4.0757e-07  6.2683e-05  3.5093e-03         0.9972\nNGA020012  6.5213e-02 -1.4841e-03  2.2792e-01  1.3971e-01         0.8889\nNGA020013 -1.1914e-01 -1.3382e-03  1.7106e-01 -2.8483e-01         0.7758\nNGA020014 -5.2136e-01 -8.8694e-04  9.7096e-02 -1.6703e+00         0.0949\nNGA020015  1.6730e-02 -2.5916e-06  3.9858e-04  8.3811e-01         0.4020\nNGA020016 -7.9532e-02 -1.0064e-03  1.9354e-01 -1.7849e-01         0.8583\nNGA020017 -4.3364e-01 -1.6920e-03  2.5978e-01 -8.4747e-01         0.3967\nNGA020018  1.5853e-01 -2.9422e-04  3.7649e-02  8.1855e-01         0.4130\nNGA020019  3.9618e-01 -1.0690e-03  1.3669e-01  1.0745e+00         0.2826\nNGA020020  3.2428e-01 -1.4102e-03  1.5430e-01  8.2912e-01         0.4070\nNGA020021  7.0268e-01 -1.0690e-03  2.7444e-01  1.3434e+00         0.1792\nNGA020022 -3.6308e-02 -3.7966e-05  5.8389e-03 -4.7466e-01         0.6350\nNGA020023  1.6405e-02 -1.2622e-05  2.4297e-03  3.3307e-01         0.7391\nNGA020024 -4.1423e-02 -8.2374e-05  9.0249e-03 -4.3517e-01         0.6634\nNGA020025  3.6538e-01 -1.0064e-03  7.6813e-02  1.3220e+00         0.1862\nNGA020026  7.9160e-02 -3.2849e-04  4.2032e-02  3.8771e-01         0.6982\nNGA020027 -3.6612e-03 -1.7798e-05  3.4261e-03 -6.2246e-02         0.9504\nNGA020028  2.1584e-01 -3.2849e-04  2.7912e-02  1.2939e+00         0.1957\nNGA020029 -1.4299e-01 -9.4575e-04  1.0353e-01 -4.4147e-01         0.6589\nNGA020030 -1.2134e-01 -1.4841e-03  1.6237e-01 -2.9745e-01         0.7661\nNGA020031  1.0263e-01 -6.2123e-04  7.9466e-02  3.6627e-01         0.7142\nNGA020032  2.1930e-02 -4.0269e-04  6.1908e-02  8.9756e-02         0.9285\nNGA020033  6.0953e-01 -1.2681e-03  1.6211e-01  1.5170e+00         0.1293\nNGA020034 -8.1234e-02 -8.1252e-04  8.8955e-02 -2.6964e-01         0.7874\nNGA020035  1.4874e-01 -1.2824e-04  1.4049e-02  1.2560e+00         0.2091\nNGA020036  1.6232e-01 -8.6885e-04  1.6711e-01  3.9920e-01         0.6897\nNGA020037 -1.6488e-01 -2.5855e-03  3.3008e-01 -2.8249e-01         0.7776\nNGA020038  4.3704e-01 -1.1998e-03  1.5339e-01  1.1189e+00         0.2632\nNGA020039  4.7162e-01 -1.4841e-03  1.8969e-01  1.0863e+00         0.2774\nNGA020040  4.7832e-03 -4.0757e-07  5.2168e-05  6.6230e-01         0.5078\nNGA020041 -2.7468e-01 -9.8716e-04  7.5342e-02 -9.9710e-01         0.3187\nNGA020042 -2.1594e-01 -3.5308e-04  3.0000e-02 -1.2447e+00         0.2132\nNGA020043 -5.7769e-02 -1.6801e-04  1.8405e-02 -4.2458e-01         0.6711\nNGA020044 -1.1342e-02 -2.0468e-05  2.2426e-03 -2.3907e-01         0.8111\nNGA021001  1.1136e-01 -2.9422e-04  3.7649e-02  5.7546e-01         0.5650\nNGA021002 -3.9737e-02 -1.2622e-05  1.3830e-03 -1.0682e+00         0.2854\nNGA021003  1.1809e-02 -6.5684e-05  1.0101e-02  1.1814e-01         0.9060\nNGA021004  1.8885e+00 -5.0763e-03  7.7676e-01  2.1485e+00         0.0317\nNGA021005 -2.4254e-02 -6.5684e-05  8.4068e-03 -2.6381e-01         0.7919\nNGA021006  1.9100e-02 -1.0545e-05  1.3498e-03  5.2017e-01         0.6029\nNGA021007  2.5087e-01 -1.1998e-03  1.3131e-01  6.9562e-01         0.4867\nNGA021008 -9.2772e-02 -2.0468e-05  3.9400e-03 -1.4777e+00         0.1395\nNGA021009 -3.3625e-01 -4.0269e-04  5.1523e-02 -1.4796e+00         0.1390\nNGA021010  4.5459e-01 -1.6130e-03  3.1000e-01  8.1937e-01         0.4126\nNGA021011 -1.9108e-01 -3.6465e-04  4.6657e-02 -8.8294e-01         0.3773\nNGA021012 -5.5450e-02 -2.5205e-04  3.2254e-02 -3.0735e-01         0.7586\nNGA021013  9.5763e-03 -1.3874e-03  1.3266e-01  3.0102e-02         0.9760\nNGA021014 -2.2260e-01 -2.6184e-04  4.0260e-02 -1.1081e+00         0.2678\nNGA021015 -2.6543e-02 -2.0274e-04  2.2209e-02 -1.7675e-01         0.8597\nNGA021016 -1.3468e-01 -8.8010e-05  1.3535e-02 -1.1569e+00         0.2473\nNGA021017  4.5984e-02 -3.0202e-05  3.8656e-03  7.4008e-01         0.4593\nNGA021018  3.8968e-01 -2.7869e-03  3.5572e-01  6.5804e-01         0.5105\nNGA021019  1.2239e-01 -2.6184e-04  2.8682e-02  7.2424e-01         0.4689\nNGA021020  2.5290e-03 -4.0757e-07  3.9024e-05  4.0490e-01         0.6855\nNGA021021  2.1265e-01 -4.2987e-04  1.1043e-01  6.4121e-01         0.5214\nNGA021022  2.9638e-02 -5.1421e-04  7.9043e-02  1.0725e-01         0.9146\nNGA021023  1.4806e-01 -1.4102e-03  2.1659e-01  3.2117e-01         0.7481\nNGA021024  4.8290e-01 -4.2797e-03  8.2031e-01  5.3790e-01         0.5906\nNGA021025  4.0330e-01 -8.8694e-04  1.3629e-01  1.0949e+00         0.2736\nNGA021026  1.5888e-01 -5.1421e-04  6.5784e-02  6.2148e-01         0.5343\nNGA021027  5.9132e-01 -5.5921e-04  8.5957e-02  2.0188e+00         0.0435\nNGA021028  1.7727e-02 -6.6631e-06  1.2826e-03  4.9516e-01         0.6205\nNGA021029  2.2814e-01 -2.6184e-04  2.8682e-02  1.3487e+00         0.1774\nNGA021030  4.1749e-02 -1.0545e-05  1.6218e-03  1.0369e+00         0.2998\nNGA021031 -3.2382e-01 -7.0727e-05  1.3614e-02 -2.7747e+00         0.0055\nNGA021032 -1.3455e-01 -1.2824e-04  1.6412e-02 -1.0492e+00         0.2941\nNGA021033 -2.0093e-03 -2.3134e-04  2.9605e-02 -1.0334e-02         0.9918\nNGA021034 -3.5337e-01 -2.0274e-04  3.9019e-02 -1.7879e+00         0.0738\nNGA022001  9.0860e-02 -2.6938e-05  5.1855e-03  1.2621e+00         0.2069\nNGA022002 -2.2579e-01 -1.5118e-04  1.6563e-02 -1.7532e+00         0.0796\nNGA022003  1.3510e-01 -7.5809e-04  1.1650e-01  3.9803e-01         0.6906\nNGA022004  1.6500e-02 -1.2824e-04  1.4049e-02  1.4029e-01         0.8884\nNGA022005  8.5960e-02 -6.5684e-05  1.0101e-02  8.5593e-01         0.3920\nNGA022006  2.0254e-01 -1.2142e-04  1.5539e-02  1.6257e+00         0.1040\nNGA022007  6.6541e-01 -1.1788e-03  2.2665e-01  1.4002e+00         0.1615\nNGA022008  3.0105e-01 -5.6451e-03  1.0805e+00  2.9504e-01         0.7680\nNGA022009 -2.8467e-01 -9.4575e-04  1.0353e-01 -8.8179e-01         0.3779\nNGA022010  3.7176e-01 -1.6130e-03  3.1000e-01  6.7060e-01         0.5025\nNGA022011  1.1498e-01 -1.2464e-03  1.5934e-01  2.9118e-01         0.7709\nNGA022012  1.7056e-01 -2.2054e-03  2.8167e-01  3.2553e-01         0.7448\nNGA022013 -1.9158e-01 -1.1130e-03  1.2182e-01 -5.4572e-01         0.5853\nNGA022014 -4.5072e-01 -9.4575e-04  1.4532e-01 -1.1799e+00         0.2380\nNGA022015  9.9367e-02 -1.9413e-04  2.4844e-02  6.3165e-01         0.5276\nNGA022016  2.8983e-01 -5.5921e-04  1.0759e-01  8.8533e-01         0.3760\nNGA022017  2.4329e-01 -1.3160e-03  2.0213e-01  5.4408e-01         0.5864\nNGA022018 -2.0175e-01 -8.8010e-05  1.1264e-02 -1.9001e+00         0.0574\nNGA022019 -1.2776e-01 -6.5487e-04  7.1707e-02 -4.7467e-01         0.6350\nNGA022020 -1.4782e-01 -2.0274e-04  2.5945e-02 -9.1644e-01         0.3594\nNGA022021 -1.4110e-01 -4.4262e-04  6.8045e-02 -5.3922e-01         0.5897\nNGA023001  1.3680e-03 -4.0757e-07  6.2683e-05  1.7283e-01         0.8628\nNGA023002 -9.8267e-04 -5.5331e-05  7.0819e-03 -1.1020e-02         0.9912\nNGA023003 -3.0917e-02 -2.6938e-05  2.9515e-03 -5.6858e-01         0.5696\nNGA023004  4.1013e-02 -1.1788e-03  1.1273e-01  1.2566e-01         0.9000\nNGA023005  5.8700e-02 -7.5809e-04  1.4582e-01  1.5571e-01         0.8763\nNGA023006  2.5193e-01 -2.3134e-04  2.5342e-02  1.5840e+00         0.1132\nNGA023007  2.1735e-01 -3.2849e-04  8.4394e-02  7.4930e-01         0.4537\nNGA023008  2.6744e-01 -1.7602e-04  1.4958e-02  2.1881e+00         0.0287\nNGA023009  4.1519e-01 -7.0554e-04  6.7506e-02  1.6007e+00         0.1094\nNGA023010 -3.4662e-02 -1.2622e-05  1.6156e-03 -8.6206e-01         0.3887\nNGA023011 -6.1370e-04 -1.1091e-07  1.7057e-05 -1.4857e-01         0.8819\nNGA023012 -1.6155e-01 -6.2123e-04  4.7431e-02 -7.3894e-01         0.4599\nNGA023013  9.8943e-02 -3.9053e-04  1.0033e-01  3.1361e-01         0.7538\nNGA023014 -1.7185e-02 -3.6465e-04  3.9940e-02 -8.4163e-02         0.9329\nNGA023015 -1.8619e-01 -2.6184e-04  1.0104e-01 -5.8491e-01         0.5586\nNGA023016  3.8827e-03 -1.2824e-04  1.9720e-02  2.8562e-02         0.9772\nNGA023017 -1.9137e-01 -8.6885e-04  1.3351e-01 -5.2137e-01         0.6021\nNGA023018  2.5256e-01 -4.0269e-04  3.8541e-02  1.2885e+00         0.1976\nNGA023019 -1.2671e-01 -8.8010e-05  1.1264e-02 -1.1930e+00         0.2329\nNGA023020 -5.0014e-02 -1.2622e-05  1.3830e-03 -1.3446e+00         0.1788\nNGA023021  1.5834e+00 -7.0554e-04  7.7250e-02  5.6993e+00         0.0000\nNGA024001 -6.2138e-02 -2.5916e-06  2.4814e-04 -3.9445e+00         0.0001\nNGA024002  1.5607e-02 -2.6938e-05  3.4480e-03  2.6624e-01         0.7901\nNGA024003  4.6946e+00 -7.3650e-03  1.1244e+00  4.4343e+00         0.0000\nNGA024004  1.4306e+00 -6.8733e-03  8.7372e-01  1.5379e+00         0.1241\nNGA024005  8.3167e+00 -4.6653e-02  3.3979e+00  4.5371e+00         0.0000\nNGA024006  1.6707e+00 -1.5359e-03  2.9520e-01  3.0777e+00         0.0021\nNGA024007 -5.2521e-01 -1.2824e-04  2.4683e-02 -3.3422e+00         0.0008\nNGA024008 -1.4271e-01 -1.7602e-04  3.3877e-02 -7.7438e-01         0.4387\nNGA024009  6.7970e+00 -1.3441e-02  1.6973e+00  5.2276e+00         0.0000\nNGA024010  1.5203e+00 -2.2215e-04  5.7079e-02  6.3643e+00         0.0000\nNGA024011  8.8452e-02 -1.5359e-03  1.9629e-01  2.0311e-01         0.8390\nNGA024012  1.0465e+00 -8.6885e-04  8.3118e-02  3.6331e+00         0.0003\nNGA024013  5.9227e+00 -3.2122e-03  2.4751e+00  3.7667e+00         0.0002\nNGA024014  3.2411e+00 -4.1536e-03  4.5321e-01  4.8205e+00         0.0000\nNGA024015  7.8805e+00 -1.8323e-02  1.9709e+00  5.6265e+00         0.0000\nNGA024016  8.3210e-01 -4.8032e-03  6.1185e-01  1.0699e+00         0.2847\nNGA025001  3.1981e-01 -1.3382e-03  3.4346e-01  5.4798e-01         0.5837\nNGA025002  1.0858e+00 -1.5599e-03  4.0028e-01  1.7187e+00         0.0857\nNGA025003 -2.6618e-01 -9.2706e-04  1.0148e-01 -8.3266e-01         0.4050\nNGA025004  6.7625e-01 -1.1998e-03  1.1474e-01  1.9999e+00         0.0455\nNGA025005  1.0512e+00 -1.4102e-03  1.8025e-01  2.4792e+00         0.0132\nNGA025006  1.0352e+00 -2.4877e-03  6.3773e-01  1.2994e+00         0.1938\nNGA025007 -2.4193e-01 -1.6130e-03  1.5419e-01 -6.1199e-01         0.5405\nNGA025008  4.3344e-01 -1.6376e-03  1.5654e-01  1.0997e+00         0.2715\nNGA025009 -3.8279e-04 -1.0545e-05  4.0704e-03 -5.8346e-03         0.9953\nNGA025010 -1.3725e-01 -6.2123e-04  9.5484e-02 -4.4217e-01         0.6584\nNGA025011  7.8218e-01 -1.5599e-03  1.4913e-01  2.0295e+00         0.0424\nNGA025012 -2.2568e-01 -4.2987e-04  4.7080e-02 -1.0381e+00         0.2992\nNGA025013  7.5186e-01 -1.1998e-03  1.3131e-01  2.0782e+00         0.0377\nNGA025014  8.6898e-01 -8.8694e-04  1.7058e-01  2.1061e+00         0.0352\nNGA025015  8.5323e-01 -1.4841e-03  1.4189e-01  2.2690e+00         0.0233\nNGA025016  1.0085e+00 -1.1998e-03  1.5339e-01  2.5781e+00         0.0099\nNGA025017 -3.0546e-01 -1.0718e-04  2.0630e-02 -2.1260e+00         0.0335\nNGA025018  7.0582e-01 -1.6376e-03  2.5145e-01  1.4108e+00         0.1583\nNGA025019  1.0822e+00 -1.4841e-03  2.2792e-01  2.2699e+00         0.0232\nNGA025020  1.0079e+00 -1.1998e-03  1.3131e-01  2.7848e+00         0.0054\nNGA026001  6.3592e-02 -8.2374e-05  1.5855e-02  5.0568e-01         0.6131\nNGA026002  8.2027e-03 -1.1091e-07  1.0619e-05  2.5172e+00         0.0118\nNGA026003  3.1886e-02 -1.0545e-05  1.0097e-03  1.0038e+00         0.3155\nNGA026004  5.4417e-01 -3.9053e-04  3.7378e-02  2.8167e+00         0.0049\nNGA026005 -8.1541e-02 -1.5118e-04  2.9098e-02 -4.7713e-01         0.6333\nNGA026006 -6.0049e-02 -5.7374e-04  2.2134e-01 -1.2642e-01         0.8994\nNGA026007 -3.3673e-01 -1.7602e-04  1.6850e-02 -2.5927e+00         0.0095\nNGA026008  7.1316e-01 -3.7864e-03  3.2062e-01  1.2662e+00         0.2055\nNGA026009  6.1052e-01 -1.8556e-03  1.5743e-01  1.5434e+00         0.1227\nNGA026010  2.2302e-01 -4.2987e-04  8.2713e-02  7.7693e-01         0.4372\nNGA026011  1.3213e-01 -1.6801e-04  3.2336e-02  7.3573e-01         0.4619\nNGA026012  4.3825e-02 -5.1798e-06  6.6300e-04  1.7022e+00         0.0887\nNGA026013 -3.2528e-02 -2.5916e-06  3.9858e-04 -1.6292e+00         0.1033\nNGA027001 -1.2109e-01 -1.6801e-04  2.5835e-02 -7.5234e-01         0.4518\nNGA027002 -2.2020e-02 -2.6938e-05  6.9230e-03 -2.6433e-01         0.7915\nNGA027003 -3.7659e-01 -1.2824e-04  4.9494e-02 -1.6922e+00         0.0906\nNGA027004 -8.9107e-02 -2.6184e-04  2.2250e-02 -5.9562e-01         0.5514\nNGA027005 -1.9897e-02 -1.2824e-04  1.6412e-02 -1.5431e-01         0.8774\nNGA027006  2.2566e-02 -6.6631e-06  5.1505e-03  3.1453e-01         0.7531\nNGA027007  8.1164e-02 -3.1031e-03  4.7576e-01  1.2217e-01         0.9028\nNGA027008  1.9050e-01 -9.2706e-04  1.1855e-01  5.5597e-01         0.5782\nNGA027009  3.6070e-03 -4.4262e-04  4.8477e-02  1.8393e-02         0.9853\nNGA027010 -3.2106e-01 -6.2123e-04  7.9466e-02 -1.1367e+00         0.2557\nNGA027011 -3.1130e-02 -1.0718e-04  2.7542e-02 -1.8693e-01         0.8517\nNGA027012  1.0037e-01 -5.2815e-04  6.7566e-02  3.8818e-01         0.6979\nNGA027013  3.8135e-02 -5.1798e-06  9.9709e-04  1.2079e+00         0.2271\nNGA027014  1.5447e-02 -1.0545e-05  1.3498e-03  4.2074e-01         0.6739\nNGA027015  2.2136e-01 -3.1751e-04  2.6979e-02  1.3496e+00         0.1771\nNGA027016 -3.0554e-02 -8.8010e-05  8.4260e-03 -3.3190e-01         0.7400\nNGA027017  2.1345e-01 -1.6801e-04  9.8328e-03  2.1543e+00         0.0312\nNGA027018  5.8513e-04 -1.1091e-07  2.1350e-05  1.2666e-01         0.8992\nNGA027019 -3.3560e-03 -4.0757e-07  3.4642e-05 -5.7012e-01         0.5686\nNGA027020 -5.1004e-02 -1.2622e-05  1.9412e-03 -1.1573e+00         0.2471\nNGA027021  1.9566e-01 -1.6920e-03  1.8507e-01  4.5875e-01         0.6464\nNGA027022 -9.2575e-02 -2.6184e-04  2.8682e-02 -5.4508e-01         0.5857\nNGA027023 -7.6568e-03 -8.8694e-04  1.7058e-01 -1.6391e-02         0.9869\nNGA027024 -5.4924e-01 -1.1998e-03  1.8431e-01 -1.2765e+00         0.2018\nNGA027025  1.5928e-02 -7.5809e-04  8.3000e-02  5.7919e-02         0.9538\nNGA028001  3.6854e-01 -1.2681e-03  1.3877e-01  9.9274e-01         0.3208\nNGA028002 -2.1839e-02 -1.7016e-06  4.3732e-04 -1.0442e+00         0.2964\nNGA028003 -4.2032e-01 -1.1490e-02  1.2445e+00 -3.6648e-01         0.7140\nNGA028004  4.4661e-01 -3.2849e-04  5.0505e-02  1.9887e+00         0.0467\nNGA028005 -1.0814e-01 -1.4841e-03  2.2792e-01 -2.2340e-01         0.8232\nNGA028006  6.3646e-01 -8.3003e-04  1.2755e-01  1.7844e+00         0.0744\nNGA028007  9.6919e-02 -6.7060e-04  5.6961e-02  4.0890e-01         0.6826\nNGA028008 -1.0214e+00 -1.3382e-03  1.1359e-01 -3.0267e+00         0.0025\nNGA028009  1.8056e-03 -2.0468e-05  1.9597e-03  4.1250e-02         0.9671\nNGA028010  2.9113e-01 -6.7060e-04  1.7223e-01  7.0312e-01         0.4820\nNGA028011  1.8308e-02 -6.6631e-06  1.0248e-03  5.7211e-01         0.5672\nNGA028012  2.9197e-01 -1.0690e-03  2.0557e-01  6.4632e-01         0.5181\nNGA028013 -2.1677e-01 -1.6376e-03  2.5145e-01 -4.2903e-01         0.6679\nNGA028014 -3.1361e-01 -2.6184e-04  5.0390e-02 -1.3959e+00         0.1627\nNGA028015  3.3836e-01 -6.2123e-04  5.2770e-02  1.4756e+00         0.1400\nNGA028016  3.5674e-02 -2.0468e-05  2.2426e-03  7.5374e-01         0.4510\nNGA028017 -3.9689e-02 -3.6465e-04  3.9940e-02 -1.9677e-01         0.8440\nNGA028018 -9.3400e-02 -5.5331e-05  8.5093e-03 -1.0119e+00         0.3116\nNGA028019  3.7729e-01 -4.8444e-04  7.4470e-02  1.3843e+00         0.1663\nNGA028020 -1.0607e-01 -3.9053e-04  4.9967e-02 -4.7278e-01         0.6364\nNGA029001  2.6378e+00 -5.3569e-03  5.8381e-01  3.4593e+00         0.0005\nNGA029002  1.9105e+00 -1.5303e-02  2.9007e+00  1.1307e+00         0.2582\nNGA029003  3.0464e+00 -4.2797e-03  8.2031e-01  3.3682e+00         0.0008\nNGA029004  3.8554e+00 -1.3441e-02  2.0394e+00  2.7091e+00         0.0067\nNGA029005 -7.0783e-02 -1.5118e-04  1.9348e-02 -5.0779e-01         0.6116\nNGA029006 -3.6503e-01 -1.0064e-03  2.5839e-01 -7.1613e-01         0.4739\nNGA029007 -1.1321e-01 -5.1421e-04  9.8933e-02 -3.5830e-01         0.7201\nNGA029008  1.7802e-01 -1.2142e-04  9.2747e-03  1.8498e+00         0.0643\nNGA029009  6.8193e-01 -2.1151e-03  2.3126e-01  1.4224e+00         0.1549\nNGA029010 -4.7190e-02 -1.7602e-04  2.7066e-02 -2.8577e-01         0.7751\nNGA029011  2.1829e+00 -4.4078e-03  4.2017e-01  3.3744e+00         0.0007\nNGA029012  1.5895e-01 -1.4377e-04  1.8399e-02  1.1729e+00         0.2409\nNGA029013  7.1452e-01 -6.2441e-03  6.7989e-01  8.7412e-01         0.3821\nNGA029014  1.6269e-01 -1.4377e-04  2.7671e-02  9.7891e-01         0.3276\nNGA029015  9.0717e-01 -4.2987e-04  8.2713e-02  3.1558e+00         0.0016\nNGA029016  1.8803e+00 -4.9388e-03  6.2904e-01  2.3770e+00         0.0175\nNGA029017  1.1459e+00 -2.6852e-03  2.9343e-01  2.1203e+00         0.0340\nNGA029018  4.9508e-01 -2.2054e-03  2.4112e-01  1.0127e+00         0.3112\nNGA030001  8.7445e-01 -1.8061e-02  1.5074e+00  7.2693e-01         0.4673\nNGA030002  3.0745e-01 -1.6801e-04  1.8405e-02  2.2675e+00         0.0234\nNGA030003 -6.8023e-02 -2.5916e-06  4.9888e-04 -3.0454e+00         0.0023\nNGA030004  2.0509e+00 -1.0274e-02  7.0532e-01  2.4542e+00         0.0141\nNGA030005  5.2081e-01 -2.5205e-04  3.8755e-02  2.6469e+00         0.0081\nNGA030006  9.9468e-01 -1.5359e-03  1.9629e-01  2.2485e+00         0.0245\nNGA030007  3.2230e-01 -1.4377e-04  2.7671e-02  1.9384e+00         0.0526\nNGA030008 -1.2207e-01 -6.6631e-06  7.3006e-04 -4.5175e+00         0.0000\nNGA030009  1.1403e-01 -3.7966e-05  3.2269e-03  2.0080e+00         0.0446\nNGA030010 -2.4155e-01 -8.3994e-03  9.1259e-01 -2.4406e-01         0.8072\nNGA030011  3.0222e+00 -4.9388e-03  7.5583e-01  3.4819e+00         0.0005\nNGA030012  1.5670e-01 -1.0545e-05  2.0299e-03  3.4782e+00         0.0005\nNGA030013  1.5055e+00 -1.7728e-03  2.2652e-01  3.1669e+00         0.0015\nNGA030014  1.5872e+00 -1.3160e-03  2.0213e-01  3.5334e+00         0.0004\nNGA030015 -2.6194e-01 -4.1823e-05  5.3530e-03 -3.5797e+00         0.0003\nNGA030016  5.6715e-01 -4.7109e-04  9.0642e-02  1.8854e+00         0.0594\nNGA030017  1.4555e+00 -9.8716e-04  1.0806e-01  4.4308e+00         0.0000\nNGA030018 -1.9821e-01 -3.0202e-05  5.8136e-03 -2.5992e+00         0.0093\nNGA030019  1.1610e+00 -9.2706e-04  1.7829e-01  2.7517e+00         0.0059\nNGA030020  2.2905e-01 -7.5809e-04  1.4582e-01  6.0181e-01         0.5473\nNGA030021  1.8611e-01 -8.2374e-05  1.2668e-02  1.6543e+00         0.0981\nNGA030022 -3.0285e-01 -1.5118e-04  2.9098e-02 -1.7745e+00         0.0760\nNGA030023 -6.4504e-03 -2.5916e-06  3.9858e-04 -3.2296e-01         0.7467\nNGA030024  1.2795e+00 -2.0267e-03  1.7192e-01  3.0909e+00         0.0020\nNGA030025  2.3456e+00 -5.6451e-03  6.1504e-01  2.9982e+00         0.0027\nNGA030026 -5.3079e-01 -7.2185e-04  1.3885e-01 -1.4225e+00         0.1549\nNGA030027  1.3646e-01 -2.6938e-05  2.9515e-03  2.5122e+00         0.0120\nNGA030028  1.1433e+00 -3.2122e-03  2.7216e-01  2.1977e+00         0.0280\nNGA030029 -4.5188e-02 -6.6631e-06  1.7124e-03 -1.0918e+00         0.2749\nNGA030030  9.2290e-01 -1.1788e-03  1.5070e-01  2.3804e+00         0.0173\nNGA031001 -2.8573e-03 -4.0757e-07  3.9024e-05 -4.5732e-01         0.6474\nNGA031002  1.4947e-02 -8.6885e-04  1.1111e-01  4.7447e-02         0.9622\nNGA031003  1.1773e-01 -1.1998e-03  1.1474e-01  3.5111e-01         0.7255\nNGA031004 -3.0738e-02 -6.5684e-05  1.0101e-02 -3.0518e-01         0.7602\nNGA031005  5.7946e-02 -1.7602e-04  2.2526e-02  3.8726e-01         0.6986\nNGA031006 -8.5732e-03 -1.2824e-04  1.6412e-02 -6.5920e-02         0.9474\nNGA031007  2.7991e-01 -7.7500e-04  7.4147e-02  1.0308e+00         0.3026\nNGA031008 -4.7970e-02 -2.6938e-05  3.4480e-03 -8.1647e-01         0.4142\nNGA031009  4.8154e-01 -1.5599e-03  2.3954e-01  9.8707e-01         0.3236\nNGA031010  3.3515e-01 -5.7374e-04  8.8190e-02  1.1305e+00         0.2583\nNGA031011 -1.8975e-01 -4.7109e-04  7.2419e-02 -7.0335e-01         0.4818\nNGA031012 -1.5426e-02 -3.0202e-05  4.6448e-03 -2.2590e-01         0.8213\nNGA031013 -7.6424e-02 -8.6885e-04  1.3351e-01 -2.0678e-01         0.8362\nNGA031014 -7.9257e-03 -1.7016e-06  1.4464e-04 -6.5888e-01         0.5100\nNGA031015 -2.1562e-02 -1.2622e-05  2.4297e-03 -4.3719e-01         0.6620\nNGA031016 -1.5004e-01 -8.8694e-04  8.4848e-02 -5.1205e-01         0.6086\nNGA031017 -2.1280e-02 -1.1335e-03  1.4492e-01 -5.2923e-02         0.9578\nNGA031018 -2.5580e-01 -1.3874e-03  1.7734e-01 -6.0413e-01         0.5458\nNGA031019 -8.7394e-02 -1.6801e-04  4.3170e-02 -4.1981e-01         0.6746\nNGA031020 -3.0697e-03 -1.2142e-04  1.3302e-02 -2.5563e-02         0.9796\nNGA031021  2.6458e-01 -1.9402e-03  4.9766e-01  3.7781e-01         0.7056\nNGA031022 -6.7674e-01 -9.4575e-04  1.8188e-01 -1.5846e+00         0.1131\nNGA031023  1.8863e-01 -2.5205e-04  3.2254e-02  1.0517e+00         0.2929\nNGA031024 -5.2574e-02 -1.0718e-04  1.1742e-02 -4.8418e-01         0.6283\nNGA031025  3.7948e-01 -8.8694e-04  7.5321e-02  1.3859e+00         0.1658\nNGA031026 -2.0464e-03 -6.6631e-06  7.3006e-04 -7.5491e-02         0.9398\nNGA031027  1.6759e-02 -6.6631e-06  1.0248e-03  5.2373e-01         0.6005\nNGA031028 -2.2708e-02 -3.9053e-04  3.7378e-02 -1.1543e-01         0.9081\nNGA031029 -3.8192e-01 -8.3003e-04  1.0615e-01 -1.1696e+00         0.2421\nNGA031030 -2.1698e-01 -1.2142e-04  1.8671e-02 -1.5870e+00         0.1125\nNGA031031 -3.7734e-03 -1.7016e-06  2.6171e-04 -2.3315e-01         0.8156\nNGA031032  1.9499e-02 -2.6938e-05  6.9230e-03  2.3468e-01         0.8145\nNGA031033  7.0872e-01 -1.1788e-03  8.1666e-02  2.4841e+00         0.0130\nNGA032001  1.5646e+00 -3.5511e-03  4.5292e-01  2.3301e+00         0.0198\nNGA032002  9.3004e-02 -1.0095e-04  1.2920e-02  8.1910e-01         0.4127\nNGA032003  3.2111e-01 -8.2374e-05  1.0543e-02  3.1281e+00         0.0018\nNGA032004  1.5435e-01 -8.2374e-05  1.0543e-02  1.5040e+00         0.1326\nNGA032005 -2.0990e-02 -6.6631e-06  1.2826e-03 -5.8590e-01         0.5579\nNGA032006  7.3299e-01 -1.3160e-03  2.0213e-01  1.6333e+00         0.1024\nNGA032007  2.7256e-01 -7.5809e-04  8.3000e-02  9.4871e-01         0.3428\nNGA032008  9.8229e-01 -1.6920e-03  3.2515e-01  1.7256e+00         0.0844\nNGA032009  1.5094e+00 -2.9958e-03  3.2726e-01  2.6437e+00         0.0082\nNGA032010 -1.4049e-02 -4.0757e-07  7.8456e-05 -1.5860e+00         0.1127\nNGA032011  1.5391e+00 -4.1536e-03  5.2944e-01  2.1209e+00         0.0339\nNGA032012  2.1618e+00 -2.1151e-03  5.4244e-01  2.9380e+00         0.0033\nNGA032013  1.7527e+00 -3.5511e-03  3.3880e-01  3.0172e+00         0.0026\nNGA032014  2.0518e+00 -3.6678e-03  4.6775e-01  3.0055e+00         0.0027\nNGA032015  1.3159e+00 -2.9958e-03  3.2726e-01  2.3054e+00         0.0211\nNGA032016  1.5330e+00 -4.6695e-03  5.0925e-01  2.1548e+00         0.0312\nNGA032017  1.1757e-01 -6.5684e-05  1.0101e-02  1.1704e+00         0.2418\nNGA033001  6.8181e-01 -7.7500e-04  8.4850e-02  2.3433e+00         0.0191\nNGA033002  8.0507e-01 -9.4575e-04  1.8188e-01  1.8899e+00         0.0588\nNGA033003  8.3936e-01 -1.6376e-03  2.5145e-01  1.6771e+00         0.0935\nNGA033004  7.2356e-01 -1.1335e-03  2.9098e-01  1.3435e+00         0.1791\nNGA033005  7.6856e-01 -9.4575e-04  2.4283e-01  1.5616e+00         0.1184\nNGA033006  1.0302e+00 -1.1998e-03  4.6258e-01  1.5165e+00         0.1294\nNGA033007  1.0923e+00 -1.6376e-03  2.0927e-01  2.3913e+00         0.0168\nNGA033008  8.7396e-01 -1.4102e-03  1.3484e-01  2.3839e+00         0.0171\nNGA033009  9.5064e-01 -1.6376e-03  2.0927e-01  2.0817e+00         0.0374\nNGA033010  7.3405e-01 -1.5599e-03  1.4913e-01  1.9049e+00         0.0568\nNGA033011  2.6788e-01 -4.0269e-04  4.4105e-02  1.2775e+00         0.2014\nNGA033012  1.0784e+00 -1.5599e-03  2.9982e-01  1.9723e+00         0.0486\nNGA033013  4.0902e-01 -1.4841e-03  2.8527e-01  7.6859e-01         0.4421\nNGA033014  4.3451e-01 -4.8444e-04  4.1157e-02  2.1442e+00         0.0320\nNGA033015 -8.7186e-02 -1.0545e-05  1.1554e-03 -2.5646e+00         0.0103\nNGA033016  3.4312e-01 -7.7500e-04  6.5822e-02  1.3404e+00         0.1801\nNGA033017  1.2400e+00 -1.6376e-03  2.5145e-01  2.4760e+00         0.0133\nNGA033018  1.1450e+00 -1.5599e-03  2.3954e-01  2.3427e+00         0.0191\nNGA033019  3.7426e-01 -1.1998e-03  2.3069e-01  7.8172e-01         0.4344\nNGA033020  5.2363e-01 -1.1998e-03  2.3069e-01  1.0927e+00         0.2745\nNGA033021  3.5124e-01 -1.4841e-03  1.4189e-01  9.3639e-01         0.3491\nNGA033022  6.3538e-01 -8.3003e-04  1.5965e-01  1.5923e+00         0.1113\nNGA033023  1.0764e+00 -1.4841e-03  2.2792e-01  2.2578e+00         0.0240\nNGA034001 -2.2621e-03 -1.1091e-07  1.7057e-05 -5.4768e-01         0.5839\nNGA034002  1.5842e-03 -3.7966e-05  5.8389e-03  2.1228e-02         0.9831\nNGA034003  5.4458e-02 -4.1823e-05  4.5823e-03  8.0511e-01         0.4208\nNGA034004 -1.3558e-01 -4.4262e-04  8.5167e-02 -4.6305e-01         0.6433\nNGA034005 -3.9963e-02 -3.1751e-04  4.0628e-02 -1.9669e-01         0.8441\nNGA034006  1.4818e-01 -2.3134e-04  2.9605e-02  8.6255e-01         0.3884\nNGA034007  5.0261e-02 -2.9422e-04  5.6620e-02  2.1246e-01         0.8317\nNGA034008  2.9726e-02 -5.5921e-04  1.4364e-01  7.9909e-02         0.9363\nNGA034009  2.0162e-01 -7.7500e-04  9.9121e-02  6.4286e-01         0.5203\nNGA034010  1.2658e-02 -1.2824e-04  1.6412e-02  9.9810e-02         0.9205\nNGA034011 -4.0837e-02 -1.7798e-05  1.7041e-03 -9.8881e-01         0.3228\nNGA034012  4.5498e-01 -1.1998e-03  1.3131e-01  1.2589e+00         0.2081\nNGA034013 -1.1764e-01 -5.0881e-05  1.3076e-02 -1.0283e+00         0.3038\nNGA034014 -6.2210e-02 -4.4262e-04  6.8045e-02 -2.3679e-01         0.8128\nNGA034015  1.1805e-02 -5.7374e-04  1.1038e-01  3.7260e-02         0.9703\nNGA034016  2.6148e-01 -1.0064e-03  2.5839e-01  5.1638e-01         0.6056\nNGA034017  2.3751e-01 -1.3382e-03  2.5726e-01  4.7090e-01         0.6377\nNGA034018  1.9013e-02 -1.7798e-05  1.5128e-03  4.8930e-01         0.6246\nNGA034019  3.0448e-02 -6.5684e-05  8.4068e-03  3.3279e-01         0.7393\nNGA034020 -2.5456e-01 -4.2987e-04  4.7080e-02 -1.1712e+00         0.2415\nNGA034021 -2.0512e-03 -1.1091e-07  9.4270e-06 -6.6803e-01         0.5041\nNGA034022  9.2069e-02 -2.9422e-04  5.6620e-02  3.8816e-01         0.6979\nNGA034023 -4.7554e-02 -6.5684e-05  8.4068e-03 -5.1792e-01         0.6045\nNGA035001  5.9407e-01 -6.0610e-04  7.7532e-02  2.1357e+00         0.0327\nNGA035002  3.0483e-01 -1.6130e-03  1.3688e-01  8.2828e-01         0.4075\nNGA035003  1.5071e+00 -2.3917e-03  2.2845e-01  3.1582e+00         0.0016\nNGA035004  1.1637e-01 -5.1421e-04  9.8933e-02  3.7161e-01         0.7102\nNGA035005  1.4765e+00 -3.6678e-03  4.6775e-01  2.1643e+00         0.0304\nNGA035006 -4.3443e-01 -2.9422e-04  3.2228e-02 -2.4183e+00         0.0156\nNGA035007  2.6999e-01 -2.5205e-04  6.4760e-02  1.0619e+00         0.2883\nNGA035008  5.0496e-01 -8.6885e-04  6.6320e-02  1.9642e+00         0.0495\nNGA035009  8.0951e-01 -1.5359e-03  2.3586e-01  1.6700e+00         0.0949\nNGA035010 -2.5509e-01 -1.1788e-03  1.1273e-01 -7.5625e-01         0.4495\nNGA035011 -3.1683e-01 -1.7602e-04  6.7930e-02 -1.2149e+00         0.2244\nNGA035012  1.0863e+00 -2.2054e-03  4.2361e-01  1.6724e+00         0.0944\nNGA035013  1.2270e+00 -1.2464e-03  3.1993e-01  2.1715e+00         0.0299\nNGA035014  9.5481e-01 -4.0293e-03  4.3971e-01  1.4460e+00         0.1482\nNGA035015  9.0992e-02 -5.0881e-05  6.5124e-03  1.1282e+00         0.2592\nNGA035016 -2.5486e-01 -4.7109e-04  1.8176e-01 -5.9670e-01         0.5507\nNGA036001 -1.1163e-01 -3.7966e-05  7.3081e-03 -1.3053e+00         0.1918\nNGA036002  4.3127e-01 -4.0269e-04  4.4105e-02  2.0555e+00         0.0398\nNGA036003  1.0324e+00 -1.4102e-03  2.1659e-01  2.2213e+00         0.0263\nNGA036004  1.8372e-01 -1.2681e-03  1.0765e-01  5.6382e-01         0.5729\nNGA036005  5.9978e-01 -5.2815e-04  5.7839e-02  2.4961e+00         0.0126\nNGA036006  1.1226e+00 -1.6376e-03  2.0927e-01  2.4576e+00         0.0140\nNGA036007  1.1428e+00 -1.6376e-03  1.7914e-01  2.7040e+00         0.0069\nNGA036008 -3.8252e-01 -1.5599e-03  1.7065e-01 -9.2219e-01         0.3564\nNGA036009  3.3105e-02 -8.3003e-04  7.9407e-02  1.2042e-01         0.9041\nNGA036010  2.5611e-01 -5.7374e-04  8.8190e-02  8.6435e-01         0.3874\nNGA036011 -1.7530e-01 -1.1335e-03  1.7413e-01 -4.1737e-01         0.6764\nNGA036012  7.4123e-02 -4.8444e-04  6.1978e-02  2.9968e-01         0.7644\nNGA036013  1.3662e-02 -6.6631e-06  1.0248e-03  4.2698e-01         0.6694\nNGA036014  7.5876e-01 -1.3382e-03  3.4346e-01  1.2970e+00         0.1946\nNGA036015  8.6324e-01 -1.2681e-03  1.6211e-01  2.1472e+00         0.0318\nNGA036016  1.0366e+00 -1.6376e-03  3.1472e-01  1.8507e+00         0.0642\nNGA036017  5.9140e-01 -1.0064e-03  1.5463e-01  1.5065e+00         0.1319\nNGA037001  5.8811e-03 -2.9422e-04  4.5237e-02  2.9034e-02         0.9768\nNGA037002  1.3691e-01 -1.3382e-03  1.7106e-01  3.3427e-01         0.7382\nNGA037003  2.4969e-01 -6.7060e-04  1.0307e-01  7.7986e-01         0.4355\nNGA037004  2.2133e-02 -2.6184e-04  3.3506e-02  1.2234e-01         0.9026\nNGA037005  2.2257e-01 -6.2123e-04  1.1951e-01  6.4562e-01         0.5185\nNGA037006  6.3638e-02 -4.0269e-04  4.4105e-02  3.0494e-01         0.7604\nNGA037007  6.8300e-03 -3.0202e-05  2.5670e-03  1.3540e-01         0.8923\nNGA037008  2.0893e-01 -4.8444e-04  7.4470e-02  7.6737e-01         0.4429\nNGA037009  1.8881e-01 -4.0269e-04  3.4214e-02  1.0229e+00         0.3063\nNGA037010  6.8573e-03 -1.7016e-06  1.4464e-04  5.7033e-01         0.5685\nNGA037011  7.1420e-02 -7.0727e-05  1.8175e-02  5.3028e-01         0.5959\nNGA037012 -3.9884e-01 -8.1252e-04  1.5628e-01 -1.0068e+00         0.3140\nNGA037013 -1.0343e-02 -6.6631e-06  1.7124e-03 -2.4978e-01         0.8028\nNGA037014 -1.7361e-01 -2.2215e-04  2.1265e-02 -1.1890e+00         0.2344\n\n\n\n4.6.2.1 Mapping the local Moran’s I for Non-functional Waterpoints\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nnf_wpt.localMI <- cbind(nga_wp,localMI_nf_wpt) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.2.2 Mapping both local Moran’s I values and p-values for Functional Waterpoints\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualization.\n\nnf_wpt_localMI.map <- tm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"Ii\", \n          breaks=c(-Inf, 0, 3, 6, 9, Inf),\n          title = \"Local Moran's I statistics\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I Statistics for Non-Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.7,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\nnf_wpt_pvalue.map <- tm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local Moran's I P-values for Non-Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.7,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\ntmap_arrange(nf_wpt_localMI.map, nf_wpt_pvalue.map, asp=1, ncol=2)\n\n\n\n\nIi > 0 indicates a grouping of similar values (higher or lower than average). Most areas have positive local moran’s I statistics with 2 regions at the central area where there is high local moran’s I statistics.\nIi < 0 indicates a combination of dissimilar values (e.g. high values surrounded by low values). Approximately 1/3 of areas have negative local moran’s I statistics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.7 Creating a LISA Cluster Map",
    "text": "4.7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n4.7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of functional waterpoints by using moran.plot() of spdep.\n\nnci_f_wpt <- moran.plot(nga_wp$`wpt functional`, rswm_q,\n                  labels=as.character(nga_wp$ADM2_CODE), \n                  xlab=\"Functional_Waterpoints\", \n                  ylab=\"Spatially Lag functional_waterpoints\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high numbers of functional waterpoints and are surrounded by other areas that are higher than the average number of functional waterpoints. This are the high-high locations.\nMost of the LGAs have low number of functional waterpoints is surrounded by other LGAs with lower than average number of functional waterpoints (low-low locations).\nThe code chunk below plots the Moran scatterplot of non-functional waterpoints by using moran.plot() of spdep.\n\nnci_nf_wpt <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,\n                  labels=as.character(nga_wp$ADM2_CODE), \n                  xlab=\"Non-functional_Waterpoints\", \n                  ylab=\"Spatially Lag Non-functional_Waterpoints\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high numbers of non-functional waterpoints and are surrounded by other areas that are higher than the average number of non-functional waterpoints. This are the high-high locations.\nA good portion of LGA has low number of non-functionalwaterpoints is surrounded by other LGAs with lower than average number of non-functionalwaterpoints (low-low locations). Another good portion of LGA has low number of non-functional waterpoints is surrounded by other LGAs with higher than average number of non-functional waterpoints (high-low locations).\n\n\n4.7.2 Plotting Moran scatterplot with standardized variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe code chunk below does it for functional waterpoints\n\nnga_wp$Z.f_wpt <- scale(nga_wp$`wpt functional`) %>% \n  as.vector\n\nThe code chunk below does it for non-functional waterpoints\n\nnga_wp$Z.nf_wpt <- scale(nga_wp$`wpt non-functional`) %>% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nMoran scatterplot is plotted again by using the code chunks below for functional waterpoints\n\nnci2.f_wpt <- moran.plot(nga_wp$Z.f_wpt, rswm_q,\n                   labels=as.character(nga_wp$ADM2_CODE),\n                   xlab=\"z-functional_Waterpoints\", \n                   ylab=\"Spatially Lag z-functional_Waterpoints\")\n\n\n\n\nMoran scatterplot is plotted again by using the code chunks below for non-functional waterpoints\n\nnci2.nf_wpt <- moran.plot(nga_wp$Z.nf_wpt, rswm_q,\n                   labels=as.character(nga_wp$ADM2_CODE),\n                   xlab=\"z-Non-functional_Waterpoints\", \n                   ylab=\"Spatially Lag z-Non-functional_Waterpoints\")\n\n\n\n\n\n\n4.7.3 Preparing LISA map classes for Functional Waterpoints\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant_f_wpt <- vector(mode=\"numeric\",length=nrow(localMI_f_wpt))\n\nNext, derives the spatially lagged variable of interest (i.e. functional_waterpoints) and centers the spatially lagged variable around its mean.\n\nnga_wp$lag_f_wpt <- lag.listw(rswm_q, nga_wp$`wpt functional`)\nDV_f_wpt <- nga_wp$lag_f_wpt - mean(nga_wp$lag_f_wpt)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_f_wpt <- localMI_f_wpt[,1] - mean(localMI_f_wpt[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif_wpt <- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant_f_wpt[DV_f_wpt <0 & LM_I_f_wpt>0] <- 1\nquadrant_f_wpt[DV_f_wpt >0 & LM_I_f_wpt<0] <- 2\nquadrant_f_wpt[DV_f_wpt <0 & LM_I_f_wpt<0] <- 3  \nquadrant_f_wpt[DV_f_wpt >0 & LM_I_f_wpt>0] <- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant_f_wpt[localMI_f_wpt[,5] > signif_wpt] <- 0\n\n\n\n4.7.4 Plotting LISA map for Functional Waterpoints\nNow, we can build the LISA map by using the code chunks below.\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its functional waterpoints thematic map next to each other.\nThe code chunk below will be used to create such visualization for functional waterpoints\n\nf_wpt_plot <- wP_functional # previous plotted in Thematic Mapping\n\nf_wpt.localMI$quadrant <- quadrant_f_wpt\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(f_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_f_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_f_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\nLISAmap_f_wpt <- tm_shape(f_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_f_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_f_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(f_wpt_plot, LISAmap_f_wpt, \n             asp=1, ncol=2)\n\n\n\n\nIn central northern regions of Nigeria, we can find high number of functional waterpoints surrounded by areas with higher than average number of functional waterpoints (red colored areas).\n\n\n4.7.5 Preparing LISA map classes for Non-functional Waterpoints\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant_nf_wpt <- vector(mode=\"numeric\",length=nrow(localMI_nf_wpt))\n\nNext, derives the spatially lagged variable of interest (i.e. non-functional_waterpoints) and centers the spatially lagged variable around its mean.\n\nnga_wp$lag_nf_wpt <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)\nDV_nf_wpt <- nga_wp$lag_nf_wpt - mean(nga_wp$lag_nf_wpt)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_nf_wpt <- localMI_nf_wpt[,1] - mean(localMI_nf_wpt[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif_wpt <- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant_nf_wpt[DV_nf_wpt <0 & LM_I_nf_wpt>0] <- 1\nquadrant_nf_wpt[DV_nf_wpt >0 & LM_I_nf_wpt<0] <- 2\nquadrant_nf_wpt[DV_nf_wpt <0 & LM_I_nf_wpt<0] <- 3  \nquadrant_nf_wpt[DV_nf_wpt >0 & LM_I_nf_wpt>0] <- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant_nf_wpt[localMI_nf_wpt[,5] > signif_wpt] <- 0\n\n\n\n4.7.6 Plotting LISA map for Non-functional Waterpoints\nNow, we can build the LISA map by using the code chunks below.\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its functional waterpoints thematic map next to each other.\nThe code chunk below will be used to create such visualization for functional waterpoints\n\nnf_wpt_plot <- wp_nonfunctional # previous plotted in Thematic Mapping\n\nnf_wpt.localMI$quadrant <- quadrant_nf_wpt\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_nf_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_nf_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\nLISAmap_nf_wpt <- tm_shape(nf_wpt.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_nf_wpt)))+1], \n          labels = clusters[c(sort(unique(quadrant_nf_wpt)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(nf_wpt_plot, LISAmap_nf_wpt, \n             asp=1, ncol=2)\n\n\n\n\nIn several areas of Nigeria, we can find high number of non-functional waterpoints surrounded by areas with higher than average number of non-functional waterpoints (red colored areas)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.8 Hot Spot and Cold Spot Area Analysis",
    "text": "4.8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbors within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighborhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbors based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\nFixed distance is chosen as there is a large variation in polygon size (very large polygons at the edge of the study area and very small polygons at the center of the study area.\n\n4.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation.\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid. A fresh read is required as nga_wp geometry has been changed prior.\n\nnga_wp_ll <- read_rds(\"geodata/nga_wp.rds\")\nlongitude <- map_dbl(nga_wp_ll$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(nga_wp_ll$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n\n4.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbors of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbors list of class nb with a list of integer vectors containing neighbor region number ids by using knn2nb().\nReturn the length of neighbor relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.001  12.555  20.575  22.026  28.240  71.769 \n\n\nThe summary report shows that the largest first nearest neighbor distance is approximate 72km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.\n\n\n4.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)\nwm_d72\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 18114 \nPercentage nonzero weights: 3.031485 \nAverage number of links: 23.43338 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm72_lw <- nb2listw(wm_d72, style = 'B')\nsummary(wm72_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 18114 \nPercentage nonzero weights: 3.031485 \nAverage number of links: 23.43338 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  9  9 21 35 32 27 37 31 37 28 23 16 22 16 14 12 13 15 11 18 12 13 10  9 10 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n 9 11 15 12  9  9  7 11  9  9 10 22 12  9  7  4  3  4  9  9  9  8  3  5  4  3 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 3  4  2  4  8  4  5  1  6  7 10  4  3  3  1  1 \n5 least connected regions:\n330 650 652 723 739 with 1 link\n1 most connected region:\n296 with 70 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 773 597529 18114 36228 2612720\n\n\nThe output spatial weights object is called wm72_lw."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#computing-gi-statistics",
    "href": "Take-home_Ex/Take-home_Ex1.html#computing-gi-statistics",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "4.9 Computing Gi statistics",
    "text": "4.9 Computing Gi statistics\n\n4.9.1 Gi statistics using fixed distance for Functional Waterpoints\nThe code chunk below computes the Gi values for each of the LGAs for functional waterpoints\n\nfips <- order(nga_wp$ADM2_CODE)\ngi.fixed_f_wpt <- localG(nga_wp$`wpt functional`, wm72_lw)\ngi.fixed_f_wpt\n\n  [1] -4.750582213 -4.789996205 -3.094343509 -3.940665875 -4.946297098\n  [6] -4.994109267 -5.161614443 -4.585178373 -4.899383530 -2.492946546\n [11] -4.952309828 -4.692020397 -4.702100403 -4.413394795 -4.716816106\n [16] -4.903542830 -5.036796333 -1.528197524 -1.373655804 -1.693416190\n [21] -0.359385370 -1.799110510  0.057370265 -1.246508854 -0.404826205\n [26] -1.602987076 -1.899220105 -1.939768862 -1.987376117 -4.735520646\n [31] -3.631927429 -3.310652630 -4.788836949 -4.690707384 -4.287458270\n [36] -4.071608558 -4.212960290 -4.638349032 -4.491091455 -4.139506358\n [41] -4.409938277 -3.892951435 -4.013625871 -4.336728864 -3.676026899\n [46] -4.351967735 -3.777967763 -4.734373503 -3.338818450 -3.942224683\n [51] -4.539317983 -4.582938294 -3.732073649 -3.113413567 -4.269980522\n [56] -5.416104677 -5.003059009 -4.368895638 -5.407668336 -5.152580265\n [61] -5.401678897 -4.475430591 -5.220793054 -5.104971738 -5.044816957\n [66] -5.013860170 -5.095364504 -5.178861491 -5.166227958 -5.264228373\n [71] -4.936949849 -5.019066959 -4.911776681 -5.394480727 -5.210952184\n [76] -5.163353411  0.819374681  1.276549321  2.657886345  0.615253960\n [81] -0.096353825  1.565484308  6.153384482  1.600311882  2.236625541\n [86]  7.175247104  6.772073365  3.555857489  0.228230786  0.667379023\n [91]  3.837739793  3.936323187  2.308169422  1.059507496  1.988089979\n [96]  8.288901899 -2.990677159 -2.139859789 -2.780468609 -3.176729409\n[101] -2.780215052 -1.018333188 -1.424664661 -1.815854212  0.001213686\n[106]  0.079156264 -0.913061984  0.197605136 -1.179450650 -0.179793493\n[111]  0.722373990 -0.162919146 -1.128562735 -0.024620869 -2.269762025\n[116] -1.521923515  0.180329699 -1.180653115 -0.571188185 -0.288965794\n[121]  0.247076213  0.310823525  0.780670529 -2.048143086 -0.260170354\n[126] -1.397010822 -1.271086403 -1.328041445 -1.874231705 -1.631868234\n[131] -2.049388353 -1.148112598 -1.266496257 -1.624501877 -1.228045636\n[136] -0.442556162 -1.440923008 -0.963815505 -1.470559708 -1.874231705\n[141] -1.426772381 -0.557195553 -0.321376527  1.405402088 -1.616657954\n[146] -2.775499293  1.208529656  0.895296894  0.510794150  1.477884833\n[151] -0.485722059  1.527121586 -3.988689167 -4.194373563 -2.981775911\n[156] -3.190886193 -2.873888105 -3.529277866 -3.262844362 -3.030185038\n[161] -3.024181276 -4.284787202 -3.859724744 -3.104308178 -4.462010251\n[166] -4.915996759 -3.065243124 -2.691019747 -3.109521498 -3.068410377\n[171] -3.201550526 -3.530506194 -3.148092586 -2.727576804  1.415896006\n[176] -1.209536023 -2.135658344  0.598776062 -0.400534890 -0.815433370\n[181]  0.550672534 -1.549322147 -3.442394550  1.539787824 -1.878853487\n[186] -0.075522999 -1.565758940 -1.340110745 -2.014690528 -2.884619772\n[191] -2.767775806 -3.412199421 -2.570937668 -2.727514608 -2.348860142\n[196] -2.343602213 -2.671317065 -2.477253956 -2.004610097 -3.060484829\n[201] -1.647536998 -1.578816764 -1.489378520 -1.385086991 -2.497382474\n[206] -0.350604132  0.142642755 -0.910717473 -0.155914232 -0.066656524\n[211] -0.831263609 -0.687235094  0.072630725  0.026141008 -0.292902796\n[216] -0.562783781  0.438652992  0.068989533 -0.636354277  0.434924501\n[221] -0.423817237 -2.948974556 -4.171285703 -2.282620131 -2.680148257\n[226] -2.964302382 -4.655127497 -3.013618690 -2.943553639 -3.094866910\n[231] -1.764708091 -1.817236278 -3.024435090 -2.883029518 -4.969917008\n[236] -2.434018042 -3.808237038 -3.646956512 -0.542415932 -0.097208470\n[241] -0.514589683  0.774094789  0.748747025  1.323047897  0.084034218\n[246] -0.156375639  0.367008575  0.764479262  1.092925304  0.731337451\n[251]  1.297932517  0.036291887  1.501761361  0.979913532  0.054432975\n[256] -0.331696277  0.470218461 -0.100474782 -0.482522232 -0.742933973\n[261] -0.775481286 -0.746979603 -0.735027415 -0.452019825 -0.670878887\n[266] -0.469003629  0.962806708 -0.432948611  1.303971624 -0.446590084\n[271] -0.945237094  1.042761800  0.281399895 -0.130771664 -0.920927551\n[276]  0.923128842  0.431154180 -5.141731166 -5.520721087 -5.391201055\n[281] -5.292587557 -5.330005797 -5.362446847 -5.183778231 -5.188994137\n[286] -5.611327575 -5.276151826 -5.300731053 -4.950811458 -5.288409826\n[291] -5.266867665 -5.354919069 -5.266482059 -4.919774235 -4.774560638\n[296] -5.270270404 -5.310996110 -5.205685031 -5.161836887 -5.076247688\n[301] -4.910792746 -4.886011187 -4.760967349 -5.430378809 11.319403364\n[306]  8.043432051  9.734143520  6.472766456  5.706619086  7.792966184\n[311] 11.967225251  9.875448259 11.179193640  8.990135780  2.327198665\n[316]  5.218063891 11.707693497 10.724669787 11.359839185 11.850730003\n[321]  6.207272354 10.629933542 11.166691079 12.553437249  9.782258312\n[326]  5.853623244 12.860971158  5.854303368  7.243930735 -0.748249041\n[331]  0.213240111  3.086284616  3.251222234  2.230608115  3.168057135\n[336]  2.165190357  1.602123638  1.666931798  0.999546079  0.139933806\n[341]  1.761432565  3.312192353  2.230370837  3.073454011  3.474431797\n[346]  3.456756827  2.609948055  0.743520752  2.199928479  1.500122040\n[351]  2.113798652  0.853822791  7.224866263  5.883789415  3.897355622\n[356]  3.883302188  4.760121400  4.892035436  4.398205530  7.512252563\n[361]  5.270109627  4.457572874  2.180331206  4.804785797  8.430932147\n[366]  4.397631029  3.543102241  7.231975017  6.552747435  4.369573831\n[371]  3.335984339  3.779158704  4.347775527  3.101776880  4.002022274\n[376]  2.720337230  4.306071465  5.703354476  4.355924568  3.524323283\n[381]  6.067589572  6.660526734  5.210089990  4.255445580  3.768549810\n[386]  3.185561124  3.888510989  3.580379327  5.078429066  4.294227319\n[391]  3.798679745  4.212357513  4.025935480  6.287772903  5.627926205\n[396]  4.949753290  1.963494691  2.975971025  2.637818272  3.448632870\n[401]  3.278205222  3.510382493  2.830353241  3.465127721  3.674848897\n[406]  3.860020883  2.467985303  1.274032571  2.745093714  4.159173518\n[411]  3.343864227  2.787939663  3.322013925  2.802551873  2.967397902\n[416]  4.127209951  3.338946501  3.670228939  3.113027070  3.389466555\n[421]  3.194684279  2.502268174  5.241402400  2.206462371 -0.444923262\n[426] -0.371226848 -0.849390372 -0.377626573 -0.372811937 -1.115657555\n[431] -0.382705778 -0.539665712 -0.309505450 -1.027824869 -0.461844167\n[436] -0.600996375  0.032241259 -0.552624780 -0.587912374 -0.133162481\n[441] -0.435139616  0.025455536 -0.970608357 -1.783757748 -2.386282769\n[446] -1.278485118 -1.834507591 -3.145407944 -2.327942301 -2.747216429\n[451] -0.854931148 -1.007516672 -0.523276713 -1.002032903 -0.170329736\n[456] -2.306573863 -1.079460259 -0.854390164 -1.292616741 -2.760832446\n[461] -1.060712768 -0.004484768  0.362348829  1.888648155  2.220068949\n[466] -0.052500005  0.581286740  1.961108379  1.480190268  1.552209716\n[471]  0.927503979  0.852623578 -0.462245767  1.554321489  1.821012182\n[476]  0.359029132  1.446274111  0.401187280 -2.132999567 -1.721731798\n[481] -2.228524356 -1.717186566 -2.104868904 -1.904520066 -1.801698008\n[486] -1.897223701 -1.923450649  0.603752409  0.226510704 -0.448909513\n[491] -0.036296291 -0.054075177  0.378928199  0.628671841  0.085886228\n[496] -0.812465892  0.596892310  0.188341680 -0.515577897  1.119872472\n[501]  0.718222773 -0.561983830  0.910489707  0.486245380  0.018511389\n[506]  1.231386917  0.851025735 -0.601707015  0.826578847 -0.546778482\n[511] -0.565820785  0.955127894 -0.507681257 -0.113298412 -0.039845702\n[516]  0.991595260 -0.491310238 -0.631966176  0.051253766 -0.465671538\n[521] -0.234456337 -0.363574047 -0.345879383  0.811550161 -1.448597057\n[526] -1.656520604 -2.134861478 -1.791566794 -2.089512317 -2.172580828\n[531] -1.411977149 -1.022034143 -1.423120457 -1.831345546 -2.500886283\n[536] -2.388923443 -1.946408609 -2.461968520 -1.864587723 -2.306855001\n[541] -1.182558029 -1.237595314 -0.929993564 -0.930944961 -0.469809339\n[546] -0.455945085 -1.471738811 -1.004670341 -0.466039697  0.294465929\n[551] -1.313452916 -1.123547037 -1.252375698 -0.456116369 -0.366007351\n[556] -1.044505939 -0.771492514 -0.275254997  0.549448026  0.543139712\n[561]  0.586520007  0.778809601  0.666758793  0.892617994  0.805264047\n[566]  1.312906710  0.450118739  0.678414495  0.881719276  0.045667652\n[571]  0.073789458  0.809605641  0.979140398  1.463264645 -0.936560885\n[576] -1.187593129 -0.648250074 -0.586771417 -0.013329118 -0.404224802\n[581] -0.377439324 -0.472663697 -0.181050929  1.020001404  1.226588530\n[586]  1.331970746  0.310766696 -1.228945930 -0.527166502 -0.061249155\n[591]  0.278574682  0.326283694 -0.004919455 -0.444615667  1.417431259\n[596]  0.436117119  2.445597591  1.302981795  1.473195148  1.288699227\n[601]  1.771438623  1.669031175  2.315170190  1.162215511  0.942028703\n[606]  1.214430513  1.684256206  2.059071711  0.921872460  1.864346630\n[611]  0.597167696  0.565086805 -2.552455490 -2.800572929 -2.396073313\n[616] -3.389494956 -3.711661880 -3.406294276 -4.617889548 -3.756800320\n[621] -4.035687834 -4.048370015 -3.807653880 -4.039673152 -3.548415800\n[626] -3.611962658 -4.640764455 -4.217696610 -3.825815937 -3.873561723\n[631] -1.062207022 -1.051500217 -1.079349214 -0.855900564 -1.186091270\n[636] -0.780839775 -0.715147027 -1.311579170 -0.927020028 -0.972704667\n[641] -1.126238959 -1.280353911 -1.204906118 -0.394223811 -0.538746657\n[646] -1.152904648 -1.002829125 -0.904515480  0.471464592  0.454041795\n[651]  0.590206584  1.195099579  0.068563401  0.350807406  0.682558590\n[656]  0.493890144 -0.582779888 -0.487138000 -0.865188236  3.136350653\n[661] -0.344731722 -1.214805754 -0.809452866 -1.043337498 -0.576960157\n[666] -0.980810830 -0.841100101  4.129664495  3.755366219  0.542123830\n[671]  5.599818790 -0.795107133 -0.589175356  0.564210620  0.020420637\n[676]  1.643364454  0.112656382  0.578065313 -0.640323810  0.978469895\n[681]  0.881745300  0.562195830  0.123966383  0.043797890 -0.242895813\n[686]  1.355142507  0.527511956 -2.832250501 -0.516543547 -0.922309172\n[691] -0.856002211 -1.031304143 -0.734739628 -0.465091869  1.739318565\n[696]  2.817906449  2.800053376  3.033899273  5.044847379  7.021195169\n[701] 10.077716841 12.034369708  8.977858183  3.458353616 -0.394715192\n[706] -1.183056797 -1.183056797 -1.675272061 -1.868682153 -1.449884535\n[711] -1.449884535 -2.155494456 -1.859039840 -1.867410525 -1.884494242\n[716] -1.783413513 -0.007314641 -1.756243155 -1.108821641 -0.111678605\n[721] -0.532860620 -0.091176295 -0.042579268 -0.075496483 -0.740013948\n[726] -0.024311391 -1.449884535 -1.569862767 -1.402448006 -1.876104925\n[731] -1.735089882 -1.524609945 -1.507202355 -1.648082547 -1.273282907\n[736] -0.519970261 -0.464826729 -1.023200952  0.129599432  0.272478507\n[741]  0.015736384 -0.233820138  0.246487321  0.144706589  0.078913531\n[746]  0.699753166 -0.665396418 -3.425646062 -2.290498647 -1.699406265\n[751] -1.210539582 -3.328969635 -3.335819398 -3.638624952 -2.812134049\n[756] -3.027903114 -2.686757956 -3.119429989 -3.948929803 -3.086263890\n[761] -2.577374828 -1.869581016 -2.126395053 -2.234660472 -2.720768726\n[766] -2.506549475 -2.067024434 -1.191055146 -2.076795743 -1.838914080\n[771] -1.821752789 -1.830183203 -2.450750900\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [31] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [46] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [76] Low  High High High Low  Low  High High High Low  High High High Low  High\n [91] High High High High High High Low  Low  Low  Low  Low  Low  Low  Low  High\n[106] High Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  High\n[121] Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low \n[136] Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High High\n[151] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[166] Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High High High\n[181] Low  High Low  Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[196] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  High\n[211] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[226] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[241] Low  Low  High Low  Low  Low  High High High High High High Low  High Low \n[256] High Low  Low  Low  Low  High Low  Low  Low  High High High High High Low \n[271] High Low  High Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[286] Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[301] Low  Low  Low  Low  High High High High High High High High High High High\n[316] High Low  High High High High High High High High High High High High Low \n[331] Low  High High High High Low  High High High Low  High High High High High\n[346] High High High High High High High High High High High High High High High\n[361] High High Low  Low  High High High High High High Low  Low  Low  Low  High\n[376] High Low  High High High High High Low  High High High High High High Low \n[391] High High High High High High High High High High High Low  Low  Low  Low \n[406] Low  High High High High High High High High High High High High High High\n[421] Low  Low  Low  High Low  High Low  High Low  Low  High High Low  Low  Low \n[436] Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[451] High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High\n[466] High High High Low  Low  High High High High High High High High Low  Low \n[481] High Low  Low  Low  Low  Low  Low  High Low  Low  High Low  Low  Low  High\n[496] High High Low  Low  Low  High Low  High High Low  High High Low  Low  Low \n[511] Low  High Low  Low  Low  High Low  Low  High High High Low  Low  High Low \n[526] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[541] High High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[556] Low  High High High Low  High High High High High High High High Low  High\n[571] High Low  Low  High High Low  High High Low  Low  Low  High High High Low \n[586] Low  Low  Low  Low  Low  High Low  High Low  High High High High Low  High\n[601] Low  High High High Low  High High High High High High High Low  Low  Low \n[616] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low \n[631] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[646] Low  Low  Low  High High High High Low  Low  Low  High High High High High\n[661] High Low  Low  Low  Low  Low  Low  Low  High Low  High Low  Low  High Low \n[676] Low  Low  Low  Low  High High Low  High High High High High Low  High High\n[691] Low  Low  Low  Low  High Low  Low  High High High High High Low  Low  Low \n[706] Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[721] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[736] Low  Low  High Low  High High High Low  High High Low  Low  Low  High Low \n[751] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[766] Low  Low  Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt functional`, listw = wm72_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding nga_wp sf data frame by using the code chunk below.\n\nf_wpt.gi <- cbind(nga_wp, as.matrix(gi.fixed_f_wpt)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed_f_wpt.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed_f_wpt) into r matrix object by using as.matrix(). Next, cbind() is used to join nga_wp@data and gi.fixed_f_wpt matrix to produce a new SpatialPolygonDataFrame called f_wpt.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n4.9.2 Gi statistics using fixed distance for Non-functional Waterpoints\nThe code chunk below computes the Gi values for each of the LGAs for non-functional waterpoints\n\nfips <- order(nga_wp$ADM2_CODE)\ngi.fixed_nf_wpt <- localG(nga_wp$`wpt non-functional`, wm72_lw)\ngi.fixed_nf_wpt\n\n  [1] -3.380059734 -3.470321267 -0.682027168 -2.580765996 -2.733360867\n  [6] -3.796521918 -3.682181842 -4.550525968 -3.341095288 -0.589163130\n [11] -3.864641280 -3.447120859 -2.951498982 -3.318339711 -4.923572348\n [16] -3.664229904 -3.467518021 -2.030191048 -2.477226117 -2.534453096\n [21] -0.455056239 -2.738821858  0.711944774 -1.546479002 -0.749567933\n [26] -2.507241912 -2.843287484 -2.958714306 -2.949330818 -1.514519229\n [31] -0.299815824 -0.318320495 -1.957359094 -2.207022949 -1.050091650\n [36] -0.267306984 -0.623252204 -2.456978938 -1.186343601 -1.967901316\n [41] -1.454809938 -0.896390925 -0.138217485 -1.539332060 -0.006785383\n [46] -0.696185182 -0.191412548 -2.022511966 -0.047336693 -0.877739729\n [51] -2.020477626 -2.096620225  0.225975931 -0.027973960 -0.511112218\n [56] -6.035899720 -5.934326141 -4.873460968 -6.042176829 -6.181294594\n [61] -6.320924011 -5.352115731 -5.922624093 -5.616857560 -5.606515866\n [66] -5.656617664 -5.566625845 -5.999050186 -5.733991934 -5.863726164\n [71] -5.423127731 -5.454532436 -5.324939045 -6.215157511 -5.641714440\n [76] -5.854748681  2.426681285 -0.959722330  2.493788959 -0.225572817\n [81]  0.333177760 -0.059436166 -0.070895494 -0.605148892 -0.281358014\n [86]  0.848729139 -0.493350695  0.018694041  1.535986180 -0.394928823\n [91]  0.665897757 -0.371767020  1.500497500 -0.367395062 -1.133626267\n [96]  0.776089334 -3.258918043 -2.486056540 -3.390133272 -3.588397390\n[101] -3.367989091 -1.223587621 -0.223901586 -0.332962011  1.840525408\n[106]  1.803376151  0.314646875  0.150053586  0.273001326  2.277126976\n[111]  2.771821229  1.568736862  0.252092572  0.572443402 -2.093851548\n[116] -1.168987747  1.910374182 -1.188727918 -0.075440830  1.453423490\n[121]  1.922261349  2.404524083  4.118764935 -2.891216152  0.460860472\n[126] -2.457419080 -2.106534234 -2.053597249 -2.524445633 -2.229413652\n[131] -2.767196134 -2.447588786 -2.338972745 -2.463923536 -2.313859840\n[136] -0.086828121 -2.570884252 -2.027851790 -2.159361219 -2.524445633\n[141] -2.550397321 -0.600126323  0.840595475  3.629433235  0.692245750\n[146]  0.183875131  3.763447742  2.876134560  3.600916366  3.523982777\n[151]  1.304253205  2.709432530 -4.092361040 -4.340853743 -2.996332559\n[156] -2.853730557 -2.502466181 -3.411680085 -3.018068766 -2.780015909\n[161] -3.012773189 -4.698901812 -4.169508256 -2.821579124 -4.860304152\n[166] -5.371236456 -3.390914936 -2.420156345 -2.793877263 -2.842514483\n[171] -3.120846868 -3.695611894 -2.630106568 -2.688653001  2.673399426\n[176] -0.013749451 -0.776426342  1.273886794  0.604645839  0.254261737\n[181]  2.338829188 -1.592825991 -2.827698492  2.700427411 -1.000191906\n[186] -0.147803067 -0.760424707  1.863245525 -0.919295798 -2.582141306\n[191] -2.117886340 -3.592259128 -1.810752342 -1.872209194 -0.901918210\n[196] -0.425930912 -2.482611983 -2.230920679 -1.028653755 -2.794518876\n[201]  0.115323963  0.517483163  1.368832219  1.118640883 -1.587844887\n[206]  4.338792936  5.434208074  3.662909209  4.471689000  5.094259006\n[211]  3.071628696  3.875821728  5.263701786  4.681312813  4.243581887\n[216]  4.164599199  5.998649324  5.399847857  3.872781317  5.535715328\n[221]  4.233612675 -2.686582188 -4.368315084 -2.655463714 -3.137119046\n[226] -3.368181299 -5.552454931 -3.273064832 -2.619183872 -2.656629537\n[231] -2.205173635 -1.747239463 -3.435484399 -2.866582804 -5.563496731\n[236] -2.226870754 -4.397480861 -3.990758755 -0.182047437  1.198020805\n[241]  0.121192051  5.980410682  5.707401115  5.307333137  1.940665281\n[246]  1.558222263  2.651562748  5.378512525  4.654192358  3.638525311\n[251]  5.346818355  4.955656841  5.433018688  5.478298292  0.553586621\n[256]  0.511538911  0.420324321  1.315717117  0.336684068  0.082571826\n[261] -0.128179740  0.037218303  0.116206915  0.131265055 -0.154502935\n[266]  0.455621216  2.988978651 -0.202329062  3.201622016  1.845572357\n[271]  1.221434980  4.808362173  2.671525155  3.200126075  0.939693664\n[276]  3.027921348  2.354106111 -4.035450001 -4.647306805 -4.949882616\n[281] -4.019322320 -5.650406496 -5.539476982 -4.278231758 -4.670828979\n[286] -5.388600395 -5.462052410 -5.174283834 -4.154507197 -5.498949556\n[291] -5.517020926 -5.626782019 -3.950074837 -5.387739941 -4.794223406\n[296] -5.358110942 -5.747121700 -5.580992844 -5.357132821 -5.338282965\n[301] -4.274996333 -4.059771272 -4.263094657 -5.521587631  0.789151659\n[306]  1.870952430  0.210333884  0.159472405 -0.203471219  0.416951824\n[311]  1.409357156  1.330197417  1.345270142  1.473032500 -0.582681618\n[316]  1.608854312  0.704505162  0.517509062  1.360908262  1.426954121\n[321]  1.330600399  0.666167796  0.912682834  1.169032282  0.921113297\n[326]  0.759290043  0.856143371  1.770460310 -0.534199682 -0.231506219\n[331]  1.845332667  3.614850921  0.405467331  4.279739391  1.655668322\n[336]  2.864359824  2.092505811  1.599640064  3.549452838  1.769789101\n[341]  2.864644749  2.277504564  0.278639449  3.235680339 -0.439020953\n[346]  1.862884359  3.155217694  3.009916882  3.776987397  2.681555163\n[351]  3.562263557  4.120735903 -0.149161781 -0.281603859 -1.770381649\n[356] -0.761831452 -1.299551089 -1.097118454 -1.896418666 -0.046380170\n[361] -1.426084465 -1.178438011 -0.050433088 -1.530236274  0.099357126\n[366] -0.542169146 -1.534618097 -0.080283202 -1.160436527 -1.911847815\n[371] -2.260505313 -2.081799688 -2.071365630 -2.099702038 -0.679590974\n[376] -1.085350813 -2.075566823 -0.441161273 -1.653779076 -1.937209587\n[381] -0.006869681 -0.108246678 -1.360219878 -0.827835772 -1.863842732\n[386]  0.969115212 -1.820800384 -0.193739396  0.092546469 -2.062968306\n[391] -1.659964924 -1.406567763 -0.135560618 -1.153186211 -1.383888765\n[396] -1.290907714  0.802204033  0.560275954  0.360616912  1.006238243\n[401]  0.320487229 -0.369585464  2.291755296  2.405032809  1.595099700\n[406]  1.825270133 -0.789478339 -0.535960654  2.374748761  1.298894415\n[411]  0.732594952 -1.242374156 -0.425441245  1.390596619 -0.162600929\n[416] -0.181942635 -0.839382911  1.447930044 -0.848581834 -1.304730059\n[421]  1.212438644  2.405229960  2.155603308 -0.234832047  1.005441188\n[426]  0.877687116 -0.288788456  1.231966351  1.199286883  0.128575814\n[431]  0.626022336  1.280209158  1.563773636 -0.162012136  1.674070429\n[436]  0.892745658  0.885331118  0.556597921  1.825573061  0.131688356\n[441]  1.128703743  0.263977913  2.034232668 -0.284061321 -1.556689520\n[446] -0.064312063 -0.963706349 -3.212588185 -1.632482484 -2.559948477\n[451]  2.632036110  1.264552890  0.265816090  0.083616838  3.310008007\n[456] -1.378450386  2.167501842  2.075628907  1.242741468 -2.041712645\n[461]  0.858839647  3.742458698  3.992446750  5.162047444  3.912326416\n[466]  4.139026709  4.480476711  5.977391682  5.127787367  5.173225442\n[471]  5.377063969  5.868493775 -0.271414777  3.211881308  5.781290483\n[476]  4.897475043  4.893076188  1.093264759 -2.590641453 -2.092258214\n[481] -2.730459737 -2.102110538 -2.646649406 -2.258759895 -2.155402745\n[486] -2.372651733 -2.197394091  2.370667004  2.377883445  1.139956984\n[491]  1.653640545  0.944614999  1.633785682  2.078326842  1.179845891\n[496] -0.114720760  1.684508300  1.483929353  1.260296800  3.812315771\n[501]  0.525818938  0.287232673  1.596388703 -0.013204782 -0.180275076\n[506]  0.973020939  0.479882760  0.945407246  0.721357121  0.186931470\n[511]  0.071846400  1.205057029 -0.008262037  0.262149990 -0.078112931\n[516]  2.309302118 -0.778436587 -0.960561704 -0.035778858  0.356315110\n[521] -0.633759790  1.299643292  1.338474683 -0.218532750 -1.048812552\n[526] -2.034368549 -3.154440536 -2.192713811 -2.518652921 -2.681517141\n[531]  1.117166311  0.196304228 -0.383926777 -1.641513991 -3.453101399\n[536] -3.066610795 -1.616833398 -3.417677873 -2.039377800 -3.169579875\n[541]  2.396092740  2.286834627  1.966569902  2.352146819  4.069411869\n[546]  4.145265397  0.195081136  2.938690985  3.913171862  4.578048306\n[551]  1.218125246  1.482570687  1.326479354  3.877161778  3.821585648\n[556]  1.505866203  2.630150063  1.863210564  3.106801675  4.635068034\n[561]  4.736980037  5.356940930  4.847477765  5.646212959  4.872211599\n[566]  5.391293528  3.402557732  5.175462647  5.062847217  3.420181488\n[571]  4.089345736  6.558693333  4.339589859  6.645652219 -1.022100095\n[576] -1.140391112 -0.497909427 -0.038811603  0.407471426 -0.036279962\n[581] -0.034723234 -0.236166200  1.367049636  3.229361854  3.555426425\n[586]  4.161547167  0.688935932 -0.166134426  0.297890984 -0.253702431\n[591]  1.859595925  1.550400661 -0.139146006 -0.432926043  4.194597931\n[596]  2.367111477  1.394873069  3.748646949  1.386168494  2.088354340\n[601]  2.231543735  0.688294833  1.976952184  2.296260892  2.541595822\n[606]  2.663986832  3.154429791  3.311141357  2.995481393  2.676270856\n[611]  2.154786925  1.775896776 -3.548107907 -3.436825623 -3.097465228\n[616] -4.018960161 -3.005997609 -4.114722870 -3.859176211 -2.773576756\n[621] -3.969474772 -2.277620255 -3.665526423 -4.145710585 -2.792817627\n[626] -3.218378003 -3.712623756 -2.710004032 -3.369988973 -2.813675620\n[631] -0.391207359 -0.608716494 -1.194744177 -1.035281064 -0.929349982\n[636] -0.577210144  0.252632276 -0.884035195 -1.110147792 -0.361312214\n[641] -0.185167432 -0.689466945 -0.676658432  0.370039028 -1.135353658\n[646] -1.033842403 -0.691531349 -0.203942258  1.353522051  1.684431850\n[651]  2.579147641  1.119409668  1.828340042  0.908076472  1.926861943\n[656]  0.685835744  0.716681697 -0.179463075 -0.991321668 -1.457180348\n[661] -1.734939369 -1.944970846 -0.197837042 -1.946351402 -1.547116200\n[666] -2.188840636 -0.131148912  0.236844073 -0.973228817 -0.264187258\n[671]  0.009530063 -0.587336899 -1.687777413  0.176602608 -0.151643129\n[676] -0.504510898  0.187037819 -0.509937179 -0.796321878 -0.560208054\n[681] -0.540601233 -0.908930374 -0.444907208 -0.596787747 -1.221890911\n[686] -1.026238884 -1.189032325  0.248233055 -0.077201579  1.181293794\n[691] -0.374645495 -0.707571781  0.200496682 -1.007988832  1.294413953\n[696]  1.238938711  1.532617709  1.721868272  2.534827972  1.832244931\n[701]  1.794980215  1.760082818  0.722605370 -0.329166832 -1.192355910\n[706] -1.593486311 -1.593486311 -2.256462329 -2.524445633 -1.952882705\n[711] -1.952882705 -2.730980900 -2.135150856 -2.221614678 -2.156490462\n[716] -2.116467448  0.323516674 -2.447094275 -0.876537600  0.440694582\n[721] -0.293656157 -0.075992761  0.143553425 -0.642860616  0.621176122\n[726]  1.292247029 -1.952882705 -2.188840636 -2.067121588 -2.644650260\n[731] -2.567801215 -2.282357247 -2.107098386 -2.490771564 -1.892914538\n[736] -1.047352029 -0.294526927 -1.035745192  0.629224825  1.657733172\n[741]  2.129349181  1.816508812  2.906157378  3.162041211  3.440088285\n[746]  2.912953868  3.015563648  0.037965862 -3.024430382 -2.365289762\n[751]  1.356178252 -2.197862792 -3.071445074 -1.959758858  0.323577337\n[756]  0.256373490  0.351782030 -0.016193068 -1.936577211 -3.876929808\n[761] -3.905415966 -2.469058329 -1.953514136 -2.395895189 -2.734970804\n[766] -2.608842400 -1.624818339  0.985477818 -3.092673470 -2.372515183\n[771] -2.030508432 -2.982181949 -0.133373018\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  High Low  Low  Low  High Low  Low  High High High Low \n [16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [31] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High High\n [46] Low  High High High Low  High Low  Low  High High Low  Low  Low  Low  Low \n [61] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [76] Low  Low  Low  Low  Low  High Low  High Low  Low  Low  Low  High Low  High\n [91] Low  High Low  Low  Low  High Low  Low  Low  High Low  Low  High Low  High\n[106] High High High Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[121] High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[136] Low  Low  Low  Low  Low  Low  Low  High High High Low  High High High High\n[151] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low \n[166] Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High Low  High\n[181] Low  High Low  Low  High High High High Low  Low  Low  Low  Low  Low  Low \n[196] Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low  High High\n[211] Low  High Low  High High High Low  Low  Low  High High Low  Low  Low  Low \n[226] Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High\n[241] High Low  High High High Low  Low  High High Low  High High Low  High Low \n[256] High Low  Low  Low  Low  High Low  Low  High High High High High High High\n[271] High Low  High High High High High Low  Low  Low  Low  Low  Low  Low  Low \n[286] Low  Low  Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low \n[301] Low  Low  Low  Low  High High High Low  Low  Low  High High High Low  Low \n[316] High Low  Low  Low  Low  High High Low  Low  Low  High High High High High\n[331] Low  High Low  High Low  High High High High High High High Low  High High\n[346] Low  High High High High High Low  Low  High High Low  High Low  High High\n[361] High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High Low \n[376] High Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High High Low \n[391] Low  Low  High High High Low  Low  Low  High High High Low  Low  Low  High\n[406] Low  High High Low  Low  Low  Low  Low  High High Low  Low  High Low  Low \n[421] High Low  Low  Low  High High Low  High High Low  High High High High Low \n[436] High High High Low  High Low  Low  Low  Low  High High High Low  Low  Low \n[451] High Low  High Low  High Low  Low  Low  High Low  Low  Low  High Low  High\n[466] High High High Low  Low  High High High High High High High High Low  Low \n[481] High Low  Low  Low  Low  Low  Low  High High High High Low  Low  Low  High\n[496] High High High High Low  High High Low  Low  Low  High High Low  Low  Low \n[511] Low  High High High Low  High High Low  Low  High Low  Low  Low  High Low \n[526] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High\n[541] High High High High Low  Low  High High High High High High High High High\n[556] High High High High Low  High High High High Low  High High High High High\n[571] High Low  High High High Low  High High Low  Low  Low  High High High Low \n[586] High Low  Low  Low  Low  High Low  High High High High High High High Low \n[601] High High High High Low  High High High High High High High Low  Low  Low \n[616] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[631] High High Low  Low  High High Low  High Low  Low  Low  Low  Low  High High\n[646] High Low  High High High High High Low  High High High High High High High\n[661] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[676] Low  Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  High High\n[691] Low  High Low  High High Low  High High Low  High High Low  Low  Low  Low \n[706] Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High Low  Low  Low \n[721] High High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[736] Low  Low  High Low  High High High High High High High High High High Low \n[751] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[766] Low  Low  Low  High Low  Low  High High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non-functional`, listw = wm72_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding nga_wp sf data frame by using the code chunk below.\n\nnf_wpt.gi <- cbind(nga_wp, as.matrix(gi.fixed_nf_wpt)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed_nf_wpt.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join nga_wp@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nf_wpt.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n4.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix for functional waterpoint.\n\nf_wpt_plot <- wP_functional # plotted prior\n\nGimap <-tm_shape(f_wpt.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"equal\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(f_wpt_plot, Gimap, asp=1, ncol=2)\n\n\n\n\n\nf_wpt_plot <- wP_functional # plotted prior\n\nGimap <-tm_shape(f_wpt.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"equal\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n        tm_layout(main.title = \"Local GI for Functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n\ntmap_arrange(f_wpt_plot, Gimap, asp=1, ncol=2)\n\n\n\n\nThe hot spots for functional waterpoints are in the northern central region of Nigeria. significant and positive if location i is associated with relatively high values in the surrounding locations.\nThe cold spots for functional waterpoints are in the southern central region of Nigeria. significant and negative if location i is associated with relatively low values in surrounding locations.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix for non-functional waterpoint.\n\nnf_wpt_plot <- wp_nonfunctional # plotted prior\n\nGimap <-tm_shape(nf_wpt.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"equal\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Local GI for Non-functional Waterpoints\",\n              main.title.position = \"center\",\n              main.title.size = 0.8,\n              legend.height = 0.4,\n              legend.width = 0.3)\n    \n\ntmap_arrange(nf_wpt_plot, Gimap, asp=1, ncol=2)\n\n\n\n\nThe hot spots for non-functional waterpoints are in the central eastern and central region of Nigeria. significant and positive if location i is associated with relatively high values in the surrounding locations.\nThe cold spots for non-functional waterpoints are in the southern central region of Nigeria. significant and negative if location i is associated with relatively low values in surrounding locations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "",
    "text": "The process of creating regions is called regionalization. A regionlization is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location. In this sense, regionalization embeds the same logic as standard clustering techniques, but also applies a series of geographical constraints. Often, these constraints relate to connectivity: two candidates can only be grouped together in the same region if there exists a path from one member to another member that never leaves the region. These paths often model the spatial relationships in the data, such as contiguity or proximity. However, connectivity does not always need to hold for all regions, and in certain contexts it makes sense to relax connectivity or to impose different types of geographic constraints.\n\n\n\n\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set. We will rename this file to “geo_export”.\n\n\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries. We will use the file “nga_polnda_adm2_1m_salb”."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex2.html#objectives",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.2 Objectives",
    "text": "1.2 Objectives\nIn this take-home exercise you are required to regionalize Nigeria by using, but not limited to the following measures:\n\nTotal number of functional water points in LGA\nTotal number of nonfunctional water points in LGA\nPercentage of functional water points\n\nequates to “number of functional water points in LGA / Total number of functional water points in LGA”\n\nPercentage of non-functional water points\n\nequates to “number of nonfunctional water points in LGA” / “Total number of nonfunctional water points in LGA”\n\nPercentage of main water point technology (i.e. Hand Pump)\n\nequates to “number of water points in LGA using Hand Pump” / “Total number of functional water points in LGA”\n\nPercentage of usage capacity (i.e. < 1000, >=1000)\n\nPercentage of usage capacity (< 1000) equates to “number of water points in LGA with usage capacity < 1000” / “Total number of functional water points in LGA”\nPercentage of usage capacity (>= 1000) equates to “number of water points in LGA with usage capacity >= 1000” / “Total number of functional water points in LGA”\n\nPercentage of rural water points\n\n“Percentage of is_urban == False in LGA” / “Total number of functional water points in LGA”\n\n\nThe areas within a region must be geographically connected (the spatial contiguity constraint).\n\n1.2.1 Installing and loading R packages\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2, GGally,and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, heatmaply, palmerpenguins, and patchwork\n\nCluster analysis\n\ncluster\nClustGeo\n\nRapid Exploratory Data Analysis\n\nfunModeling\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(sf, spdep, tmap, tidyverse, tmap, funModeling, rgdal, ClustGeo,\n               ggpubr, cluster, factoextra, NbClust, heatmaply,\n               corrplot, psych, GGally, palmerpenguins, patchwork)\n\nNote: With tidyverse, we do not have to install readr, ggplot2 and dplyr packages separately. In fact, tidyverse also installs other very useful R packages such as tidyr."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex2.html#importing-geospatial-data",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.3 Importing Geospatial Data",
    "text": "1.3 Importing Geospatial Data\nIn this in-class data, two geospatial data sets will be used as mentioned in 1.1.1, they are:\n\ngeo_export\nnga_polnda_adm2_1m_salb\n\n\n1.3.1 Importing water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp = st_read(dsn = 'geodata',\n             layer = 'geo_export',\n             crs = 4326) %>%\n    filter(clean_coun == 'Nigeria')\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\ncrs is set to 4326 which will be the same for nga in 1.3.2\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga = write_rds(wp, 'geodata/wp_nga_ex2.rds')\n\n\nst_crs(wp_nga)\n\n\n\n1.3.2 Importing Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga = st_read(dsn = 'geodata',\n              layer = 'nga_polnda_adm2_1m_salb',\n              crs = 4326)\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_polnda_adm2_1m_salb shapefile into R environment and save the imported geospatial data into simple feature data table.\ncrs is set to 4326 which is the same for wp_nga\n\n\nst_crs(nga)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex2.html#data-wrangling",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.4 Data Wrangling",
    "text": "1.4 Data Wrangling\n\n1.4.1 Sorting and comparing number of observations\nThis section involves sorting Nigeria LGA observation by column ADM2_CODE before comparing numbers of unique observations.\nThe code chunk below sort the dataset according to field ADM2_CODE\n\nnga <- (nga[order(nga$ADM2_CODE), ])\n\nThe code chunk below extract the unique rows with reference to field ADM2_CODE\n\nuniq_nga <- unique(nga, by=nga$ADM2_CODE)\n\nAfter comparison, nga has 773 observations of 13 variables which is the same as as uniq_nga. Hence, we can conclude that there is no duplicate observations.\n\n\n1.4.2 Re-coding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown so that we can so not need to omit rows with NA in the selected fields (status_cle and X_water_tec) and remove the need to create another subset of data solely comprising of “completed” data (rows without NA).\n\nwp_nga <- read_rds(\"geodata/wp_nga_ex2.rds\") %>%\n    mutate(status_cle = replace_na(status_cle, \"Unknown\")) %>%\n    mutate(X_water_tec = replace_na(X_water_tec, \"Unknown\"))\n\n\n\n1.4.3 EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga quickly.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\nfreq(data=wp_nga, \n     input = 'X_water_tec')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex2.html#extracting-water-point-data",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "1.5 Extracting Water Point Data",
    "text": "1.5 Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\n1.5.1 Extracting functional water points\nIn the code chunk below, filter() of dplyr is used to select functional water points. You will be able to understand what are considered as functional wpt in this take-home exercise.\n\nwpt_func <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_func, \n     input = 'status_cle')\n\n\n\n1.5.2 Extracting non-functional water points\nIn the code chunk below, filter() of dplyr is used to select non-functional water points. You will be able to understand what are considered as nonfunctional wpt in this take-home exercise.\n\nwpt_nonfunc <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunc, \n     input = 'status_cle')\n\n\n\n1.5.3 Extracting water points with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n1.5.4 Extracting water points using Hand Pump\nWe extract the rows with “Hand Pump” under the field X_water_tec\n\nwpt_handpump <- wp_nga %>%\n  filter(X_water_tec == \"Hand Pump\")\n\n\n\n1.5.5 Extracting Rural water points\nWe extract the rows with “False” under the field is_urban\n\nwpt_rural <- wp_nga %>%\n  filter(is_urban == \"False\")\n\n\n\n1.5.6 Extracting water points Usage Capacity < 1000\nWe first set the field usage_cap to integer. Subsequently, we extract rows where usage cap < 1000.\n\nwp_nga$usage_cap <- as.integer(wp_nga$usage_cap)  \nwpt_usecapless1k <- wp_nga %>%\n  filter(usage_cap < 1000)\n\n\n\n1.5.7 Extracting water points Usage Capacity >= 1000\nAs the field usage_cap is already in integer, we can proceed to extract rows where usage cap >= 1000.\n\nwpt_usecapequalormore1k <- wp_nga %>%\n  filter(usage_cap >= 1000)\n\n\n\n1.5.8 Performing Point-in-Polygon Count\nst_intersects() return a list where the list contains the indexes of the point geometry that is found inside the polygon geometry.\nlengths() returns the number of element inside the list which represent the number of water point within the polygon\n\nnga_wp <- nga %>% \n    mutate(`total wpt` = lengths(\n        st_intersects(nga, wp_nga))) %>%\n    mutate(`wpt functional` = lengths(\n        st_intersects(nga, wpt_func))) %>%\n    mutate(`wpt non-functional` = lengths(\n        st_intersects(nga, wpt_nonfunc))) %>%\n    mutate(`wpt unknown` = lengths(\n        st_intersects(nga, wpt_unknown))) %>%\n    mutate(`wpt unknown` = lengths(\n        st_intersects(nga, wpt_unknown))) %>%\n    mutate(`wpt cap < 1000` = lengths(\n        st_intersects(nga, wpt_usecapless1k))) %>%\n    mutate(`wpt cap >= 1000` = lengths(\n        st_intersects(nga, wpt_usecapequalormore1k))) %>%\n    mutate(`wpt rural` = lengths(\n        st_intersects(nga, wpt_rural))) %>%\n    mutate(`wpt hand pump` = lengths(\n        st_intersects(nga, wpt_handpump)))\n\n\n\n1.5.9 Derive new variables using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of total wpt. In general, the LGAs with relatively higher total number of water points will also have higher number of wpt functional, wpt rural, wpt hand pump and etc.\nIn order to overcome this problem, we will derive the percentage of each variable by using the code chunk below. The definitions are listed below:\n\nPercentage of functional water points pct functional equates to “number of functional water points in LGA / Total number of functional water points in LGA”\nPercentage of non-functional water points pct non-functional equates to “number of nonfunctional water points in LGA” / “Total number of nonfunctional water points in LGA”\nPercentage of main water point technology (i.e. Hand Pump) pct hand pump equates to “number of water points in LGA using Hand Pump” / “Total number of functional water points in LGA”\nPercentage of usage capacity (< 1000) pct cap < 1000 equates to “number of water points in LGA with usage capacity < 1000” / “Total number of functional water points in LGA”\nPercentage of usage capacity (>= 1000) pct cap >= 1000 equates to “number of water points in LGA with usage capacity >= 1000” / “Total number of functional water points in LGA”\nPercentage of rural water points pct rural “number of is_urban == False in LGA” / “Total number of functional water points in LGA”\n\n\nnga_wp <- nga_wp %>%\n    mutate(`pct functional` = `wpt functional`/`total wpt`) %>%\n    mutate(`pct non-functional` = `wpt non-functional`/`total wpt`) %>%\n    mutate(`pct rural` = `wpt rural`/`total wpt`) %>%\n    mutate(`pct cap < 1000` = `wpt cap < 1000`/`total wpt`) %>%\n    mutate(`pct cap >= 1000` = `wpt cap >= 1000`/`total wpt`) %>%\n    mutate(`pct hand pump` = `wpt hand pump`/`total wpt`)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/wp_nga_ex2.rds\")\n\nBefore you end this section, please remember to delete away all the raw data. Notice that the only data file left is wp_nga_ex2.rds and it’s file size is around 2.1MB.\n\nnga_wp <- read_rds(\"geodata/wp_nga_ex2.rds\")\n\nThe code chunk below selects the required fields and assign them to nga_wp_Ex2\n\nnga_wp_Ex2 <- select(nga_wp, -c(`wpt rural`,`wpt cap < 1000`,`wpt hand pump`,`CNTRY_CODE`,`CNTRY_NAME`,`ADM1_NAME`,`ADM1_CODE`,`ADM2_NAME`,`HRname`,`HRpcode`,`HRparent`,`Shape_Leng`,`ADM2_New`,`Shape_Area`,`wpt unknown`,`wpt cap >= 1000`))\n\nAll NA in data is replaced with 0 as to prevent instances where division by 0 occurs.\n\nnga_wp_Ex2[is.na(nga_wp_Ex2)] = 0\n\n\nsummary(nga_wp_Ex2)\n\n  ADM2_CODE           total wpt     wpt functional   wpt non-functional\n Length:773         Min.   :  0.0   Min.   :  0.00   Min.   :  0.00    \n Class :character   1st Qu.: 44.0   1st Qu.: 16.00   1st Qu.: 12.00    \n Mode  :character   Median : 92.0   Median : 45.00   Median : 33.00    \n                    Mean   :122.9   Mean   : 67.46   Mean   : 41.66    \n                    3rd Qu.:169.0   3rd Qu.: 87.00   3rd Qu.: 60.00    \n                    Max.   :846.0   Max.   :716.00   Max.   :264.00    \n pct functional   pct non-functional   pct rural      pct cap < 1000  \n Min.   :0.0000   Min.   :0.0000     Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.3226   1st Qu.:0.2115     1st Qu.:0.5826   1st Qu.:0.4118  \n Median :0.4746   Median :0.3514     Median :0.8614   Median :0.6800  \n Mean   :0.4983   Mean   :0.3600     Mean   :0.7288   Mean   :0.6138  \n 3rd Qu.:0.6802   3rd Qu.:0.5000     3rd Qu.:1.0000   3rd Qu.:0.8750  \n Max.   :1.0000   Max.   :1.0000     Max.   :1.0000   Max.   :1.0000  \n pct cap >= 1000  pct hand pump             geometry  \n Min.   :0.0000   Min.   :0.0000   MULTIPOLYGON :773  \n 1st Qu.:0.1198   1st Qu.:0.1875   epsg:4326    :  0  \n Median :0.3077   Median :0.5147   +proj=long...:  0  \n Mean   :0.3694   Mean   :0.4943                      \n 3rd Qu.:0.5614   3rd Qu.:0.7805                      \n Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex2.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "2.1 Exploratory Data Analysis (EDA)",
    "text": "2.1 Exploratory Data Analysis (EDA)\n\n2.1.1 EDA using statistical graphics\nThe following code chunk sets the theme for aesthetic purposes\n\ntheme_set(theme_bw(16))\n\nWe can plot the distribution of the variables by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution).\nWe will proceed to find the distribution of wpt functional, wpt non-functional, pct functional, pct non-functional, pct rural, pct handpump, pct cap < 1000, pct cap >= 1000 using the code chunks below.\n\nwpt_func_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`wpt functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\nwpt functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\nWe also use shapiro.test to test for normality in the code chunk below. Should the p-value is greater than 0.05, the data is normal. If it is below 0.05, the data deviate from a normal distribution.\n\nshapiro.test(nga_wp_Ex2$`wpt functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`wpt functional`\nW = 0.70314, p-value < 2.2e-16\n\n\n\nwpt_nonfunc_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`wpt non-functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\nwpt non-functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nshapiro.test(nga_wp_Ex2$`wpt non-functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`wpt non-functional`\nW = 0.88598, p-value < 2.2e-16\n\n\n\nwpt_pctfunc_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`pct functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nshapiro.test(nga_wp_Ex2$`pct functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`pct functional`\nW = 0.98358, p-value = 1.276e-07\n\n\n\nwpt_pctnonfunc_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`pct non-functional`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct non-functional\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nshapiro.test(nga_wp_Ex2$`pct non-functional`)\n\n\n    Shapiro-Wilk normality test\n\ndata:  nga_wp_Ex2$`pct non-functional`\nW = 0.98492, p-value = 3.83e-07\n\n\n\nwpt_pctrural_hist <-ggplot(data=nga_wp_Ex2,\n                       aes(x=`pct rural`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct rural\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nwpt_handpump_hist <-ggplot(data=nga_wp_Ex2,\n                                      aes(x=`pct hand pump`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct hand pump\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nwpt_usecapless1k_hist <-ggplot(data=nga_wp_Ex2,\n                                      aes(x=`pct cap < 1000`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct usecap < 1000\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n\nwpt_usecapequalormore1k_hist <-ggplot(data=nga_wp_Ex2,\n                                      aes(x=`pct cap >= 1000`)) +\n    geom_histogram(bins=20,\n                   color=\"black\",\n                   fill=\"light blue\") +\n    labs(title = \"Distribution of\\npct usecap >= 1000\") +\n    theme(plot.title=element_text(hjust=0.5))\n\nThe distribution of the variables are displayed visually using the code chunks below.\n\nwpt_func_hist + wpt_nonfunc_hist\n\n\n\n\n\nwpt_pctfunc_hist + wpt_pctnonfunc_hist\n\n\n\n\n\nwpt_pctrural_hist + wpt_handpump_hist\n\n\n\n\n\nwpt_usecapless1k_hist + wpt_usecapequalormore1k_hist\n\n\n\n\nAs observed, not all variables have a normal distribution. Hence we are unable to to use z-standardization for these variables. We will proceed to use Min-Max scaling.\n\n\n2.2.1 EDA using choropleth map\n\n2.2.1.1 Preparing a choropleth map\nTo have a quick look at the distribution of total water points in Nigeria vs percentage of water points using Hand pump at Local Government Area level, a choropleth map will be prepared.\nThe code chunks below are used to create an interactive choropleth by using codes in tmap package.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntotal_wpt_plot <- tm_shape(nga_wp_Ex2) +\n    tm_fill(\"total wpt\",\n            style=\"jenks\",\n            title = \"total wpt\") +\n    tm_legend(legend.position = c(\"right\", \"bottom\")) +\n    tm_borders(\"black\", lwd = 0.3, alpha = 0.3) +\n    tm_layout(outer.margins=0, asp=0) +\n    tm_view(set.zoom.limits = c(5,10))\n\npct_handpump_plot <- tm_shape(nga_wp_Ex2) +\n    tm_fill(\"pct hand pump\",\n            style=\"jenks\",\n            title = \"pct hand pump\") +\n    tm_legend(legend.position = c(\"right\", \"bottom\")) +\n    tm_borders(\"black\", lwd = 0.3, alpha = 0.3) +\n    tm_layout(outer.margins=0, asp=0) +\n    tm_view(set.zoom.limits = c(5,10))\n\ntmap_arrange (total_wpt_plot, pct_handpump_plot, asp = 1, ncol = 2, sync = TRUE)\n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode is set back to “plot” mode.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#correlation-analysis",
    "href": "Take-home_Ex/Take-home_Ex2.html#correlation-analysis",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "3.1 Correlation Analysis",
    "text": "3.1 Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables. We need to remove the geometry column so that we can use cor(). The geometry column can be removed by using st_set_geometry(NULL) as shown in the code chunk below.\n\nnga_wp_Ex2_DG = nga_wp_Ex2 %>%\n    st_set_geometry(NULL)\n\n\ncluster_vars.cor = cor(nga_wp_Ex2_DG[,(3:10)])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nThe correlation plot above shows that “pct cap < 1000” and “pct cap >= 1000” are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both. For this take-home exercise, “pct cap < 1000” is chosen. We will omit “pct cap >= 1000” in the next section.\nSelected clustering variables are as follows:\n\nwpt functional\nwpt non-functional\npct functional\npct non-functional\npct rural\npct cap < 1000\npct hand pump"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#hierarchy-cluster-analysis",
    "href": "Take-home_Ex/Take-home_Ex2.html#hierarchy-cluster-analysis",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "4.1 Hierarchy Cluster Analysis",
    "text": "4.1 Hierarchy Cluster Analysis\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n4.1.1 Extracting clustering variables\nThe code chunk below will be used to extract the selected clustering variables from the nga_wp_Ex2 simple feature object into data.frame and also to use column ADM2_CODE as the row index.\n\ncluster_vars <- nga_wp_Ex2_DG\nrow.names(cluster_vars) <- cluster_vars$\"ADM2_CODE\"\nnga_wp_Ex2_ict <- select(cluster_vars, c(3:8,10))\nhead(nga_wp_Ex2_ict, 10)\n\n          wpt functional wpt non-functional pct functional pct non-functional\nNGA001001              5                  9      0.3125000          0.5625000\nNGA001002             32                 37      0.4210526          0.4868421\nNGA001003              7                  7      0.2800000          0.2800000\nNGA001004             15                 15      0.2500000          0.2500000\nNGA001005             13                 43      0.1214953          0.4018692\nNGA001006             22                 31      0.2315789          0.3263158\nNGA001007             14                 33      0.2456140          0.5789474\nNGA001008             25                 18      0.3906250          0.2812500\nNGA001009             30                117      0.1724138          0.6724138\nNGA001010              8                 19      0.2051282          0.4871795\n           pct rural pct cap < 1000 pct hand pump\nNGA001001 0.00000000      0.1250000    0.06250000\nNGA001002 0.07894737      0.1710526    0.14473684\nNGA001003 0.84000000      0.6000000    0.08000000\nNGA001004 0.81666667      0.5666667    0.06666667\nNGA001005 0.82242991      0.5233645    0.04672897\nNGA001006 0.93684211      0.6105263    0.16842105\nNGA001007 0.87719298      0.1929825    0.01754386\nNGA001008 1.00000000      0.4375000    0.10937500\nNGA001009 0.98275862      0.4367816    0.28160920\nNGA001010 0.58974359      0.3846154    0.07692308"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#data-standardisation",
    "href": "Take-home_Ex/Take-home_Ex2.html#data-standardisation",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "4.2 Data Standardisation",
    "text": "4.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\nWarning: As highlighted Z-score standardisation method will not be used as NOT all variables come are of normal distribution. For this example we will proceed with Min-Max\n\n4.2.1 Min-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nnga_wp_Ex2_ict.std <- normalize(nga_wp_Ex2_ict)\nsummary(nga_wp_Ex2_ict.std)\n\n wpt functional    wpt non-functional pct functional   pct non-functional\n Min.   :0.00000   Min.   :0.00000    Min.   :0.0000   Min.   :0.0000    \n 1st Qu.:0.02235   1st Qu.:0.04545    1st Qu.:0.3226   1st Qu.:0.2115    \n Median :0.06285   Median :0.12500    Median :0.4746   Median :0.3514    \n Mean   :0.09421   Mean   :0.15779    Mean   :0.4983   Mean   :0.3600    \n 3rd Qu.:0.12151   3rd Qu.:0.22727    3rd Qu.:0.6802   3rd Qu.:0.5000    \n Max.   :1.00000   Max.   :1.00000    Max.   :1.0000   Max.   :1.0000    \n   pct rural      pct cap < 1000   pct hand pump   \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.5826   1st Qu.:0.4118   1st Qu.:0.1875  \n Median :0.8614   Median :0.6800   Median :0.5147  \n Mean   :0.7288   Mean   :0.6138   Mean   :0.4943  \n 3rd Qu.:1.0000   3rd Qu.:0.8750   3rd Qu.:0.7805  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n4.2.2 Visualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunks below plot the scaled wpt functional & wpt non-functional field.\n\nr <- ggplot(data=nga_wp_Ex2, \n             aes(x= `wpt functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without\\nstandardisation\")\n\n\nnga_wp_Ex2_ict_std_df <- as.data.frame(nga_wp_Ex2_ict.std)\ns <- ggplot(data=nga_wp_Ex2_ict_std_df,\n       aes(x=`wpt functional`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max\\nStandardisation\")\n\n\nr + s\n\n\n\n\nNotice that the x-values have been standardised so that they fall between 0 to 1."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#computing-proximity-matrix",
    "href": "Take-home_Ex/Take-home_Ex2.html#computing-proximity-matrix",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.1 Computing proximity matrix",
    "text": "5.1 Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(nga_wp_Ex2_ict, method = 'euclidean')\nproxmat\n\n\n5.1.1 Computing hierarchical clustering (Non-spatially constrained clustering)\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.05)\n\n\n\n\n\n\n5.1.2 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(nga_wp_Ex2_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.9922221 0.9670021 0.9935483 0.9980725 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n5.1.3 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n5.1.3.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(nga_wp_Ex2_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = nga_wp_Ex2_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW    E.logW       gap     SE.sim\n [1,] 9.759796 10.879617 1.1198209 0.01454078\n [2,] 9.532971 10.426413 0.8934415 0.03881546\n [3,] 9.178684 10.211475 1.0327914 0.02516053\n [4,] 9.126162 10.088090 0.9619282 0.01713119\n [5,] 9.006787  9.985733 0.9789458 0.01307360\n [6,] 8.895835  9.891464 0.9956289 0.01286276\n [7,] 8.840645  9.805948 0.9653024 0.01459348\n [8,] 8.773782  9.728964 0.9551814 0.01791584\n [9,] 8.747021  9.661292 0.9142709 0.01850749\n[10,] 8.638142  9.602217 0.9640758 0.01750828\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 3-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n5.1.4 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.1)\nrect.hclust(hclust_ward, \n            k = 3, \n            border = 2:5)\n\n\n\n\n\n\n5.1.5 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n5.1.5.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform nga_wp_Ex2_ict data frame into a data matrix.\n\nnga_wp_Ex2_ict_mat <- data.matrix(nga_wp_Ex2_ict)\n\n\nheatmaply(normalize(nga_wp_Ex2_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 3,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria Local Government Area by WPT indicators\",\n          xlab = \"WPT indicators\",\n          ylab = \"Nigeria Local Government Area\")\n\n\n\n\n\nCluster 3 has the highest pct functional, highest pct cap < 1000, and highest pct hand pump in the Nigeria Local Government Area level.\n\n\n\n5.1.6 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain three (3) clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=3))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto nga_wp_Ex2 simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto nga_wp_Ex2 to produce an output simple feature object called nga_wp_Ex2_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nnga_wp_Ex2_cluster <- cbind(nga_wp_Ex2, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(nga_wp_Ex2_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-skater-approach",
    "href": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-skater-approach",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.2 Spatially Constrained Clustering: SKATER approach",
    "text": "5.2 Spatially Constrained Clustering: SKATER approach\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n5.2.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert nga_wp_Ex2 into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert nga_wp_Ex2 into a SpatialPolygonDataFrame called nga_wp_Ex2_sp.\n\nnga_wp_Ex2_sp <- as_Spatial(nga_wp_Ex2)\n\n\n\n5.2.2 Computing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nnga_wp_Ex2.nb <- poly2nb(nga_wp_Ex2_sp)\nsummary(nga_wp_Ex2.nb)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\n\nWe can plot the neighbours list on nga_wp_Ex2_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Nigeria Local Government Area boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(nga_wp_Ex2_sp, \n     border=grey(.5))\nplot(nga_wp_Ex2.nb, \n     coordinates(nga_wp_Ex2_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n5.2.3 Computing minimum spanning tree\n\n5.2.3.1 Calculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(nga_wp_Ex2.nb, nga_wp_Ex2_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nnga_wp_Ex2.w <- nb2listw(nga_wp_Ex2.nb, \n                   lcosts, \n                   style=\"B\")\n\nWarning in nb2listw(nga_wp_Ex2.nb, lcosts, style = \"B\"): zero sum general\nweights\n\nsummary(nga_wp_Ex2.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1        S2\nB 773 597529 264324.9 70899855 706330302\n\n\n\n\n\n5.2.4 Computing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nnga_wp_Ex2.mst <- mstree(nga_wp_Ex2.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(nga_wp_Ex2.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(nga_wp_Ex2.mst)\n\n[1] 772   3\n\n\nNote that the dimension is 772 and not 773. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of nga_wp_Ex2.mst by using head() as shown in the code chunk below.\n\nhead(nga_wp_Ex2.mst)\n\n     [,1] [,2]     [,3]\n[1,]  182  173 47.38331\n[2,]  173  170 13.34193\n[3,]  173  169 23.34723\n[4,]  169  217 15.82093\n[5,]  169  212 33.97151\n[6,]  212  221 21.95609\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(nga_wp_Ex2_sp, border=gray(.5))\nplot.mst(nga_wp_Ex2.mst, \n         coordinates(nga_wp_Ex2_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n5.2.5 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust3 <- spdep::skater(edges = nga_wp_Ex2.mst[,1:2], \n                 data = nga_wp_Ex2_ict, \n                 method = \"euclidean\", \n                 ncuts = 2)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust3)\n\nList of 8\n $ groups      : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n $ edges.groups:List of 3\n  ..$ :List of 3\n  .. ..$ node: num [1:207] 474 473 228 186 187 200 86 79 80 84 ...\n  .. ..$ edge: num [1:206, 1:3] 173 213 240 229 173 10 226 17 227 43 ...\n  .. ..$ ssw : num 4401\n  ..$ :List of 3\n  .. ..$ node: num [1:558] 398 378 329 98 322 324 407 754 746 95 ...\n  .. ..$ edge: num [1:557, 1:3] 754 746 750 95 94 749 148 98 329 322 ...\n  .. ..$ ssw : num 35216\n  ..$ :List of 3\n  .. ..$ node: num [1:8] 326 325 343 334 320 319 321 344\n  .. ..$ edge: num [1:7, 1:3] 343 326 325 334 334 334 325 320 325 334 ...\n  .. ..$ ssw : num 860\n $ not.prune   : NULL\n $ candidates  : int [1:3] 1 2 3\n $ ssto        : num 49860\n $ ssw         : num [1:3] 49860 43984 40476\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs3 <- clust3$groups\nccs3\n\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [38] 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1\n[112] 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 2 1 2 1 1 2 2 2 2 2 1 2 2 2\n[186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 2 1 2 1 2 1 2\n[223] 2 2 1 1 1 1 1 2 2 2 1 1 1 1 1 1 2 1 1 2 2 2 2 2 2 1 2 2 1 2 2 2 1 2 2 1 1\n[260] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1\n[297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 2 2 3 3 2 2 2 2 2 2 2\n[334] 3 2 2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[371] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[445] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2\n[482] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[519] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[556] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 1 1 1 1 2 1\n[593] 2 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[630] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[667] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[704] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[741] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 207, which is also the number of observations in the first cluster.\n\ntable(ccs3)\n\nccs3\n  1   2   3 \n207 558   8 \n\n\nLastly, we can also plot the pruned tree that shows the three clusters on top of Nigeria Local Government Area.\n\nplot(nga_wp_Ex2_sp, border=gray(.5))\nplot(clust3, \n     coordinates(nga_wp_Ex2_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n5.2.6 Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ngroups_mat <- as.matrix(clust3$groups)\nnga_wp_Ex2_spatialcluster <- cbind(nga_wp_Ex2_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(nga_wp_Ex2_spatialcluster, \"SP_CLUSTER\") +\n        tm_view(set.zoom.limits = c(5,10))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Take-home_Ex/Take-home_Ex2.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.3 Spatially Constrained Clustering: ClustGeo Method",
    "text": "5.3 Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n5.3.1 A short note about ClustGeo package\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n5.3.2 Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 3, \n            border = 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n5.3.2.1 Mapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups <- as.factor(cutree(nongeo_cluster, k=3))\n\n\nnga_wp_Ex2_ngeo_cluster <- cbind(nga_wp_Ex2, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(nga_wp_Ex2_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n5.3.3 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist <- st_distance(nga_wp_Ex2, nga_wp_Ex2)\ndistmat <- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below. Take note of K, it must be uppercase.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=3, graph = )\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.2 will be used as shown in the code chunk below. Reason for choosing is that we do not sacrifice too much variables homogeneity for spatial homogeneity.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=3))\n\nWe will then join back the group list with nga_wp_Ex2 polygon feature data frame by using the code chunk below.\n\nnga_wp_Ex2_Gcluster <- cbind(nga_wp_Ex2, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(nga_wp_Ex2_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2.html#visual-interpretation-of-clusters",
    "href": "Take-home_Ex/Take-home_Ex2.html#visual-interpretation-of-clusters",
    "title": "Take-home Exercise 2: Regionlization of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "5.4 Visual Interpretation of Clusters",
    "text": "5.4 Visual Interpretation of Clusters\n\n5.4.1 Visualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e pct.rural) by cluster.\n\nggplot(data = nga_wp_Ex2_Gcluster,\n       aes(x = CLUSTER, y = pct.rural)) +\n  geom_boxplot()\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest pct rural. This is followed by Cluster 2, and lastly 1.\n\n\n5.4.2 Multivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package.\n\nnga_wp_Ex2_ngeo_cluster2 <- select(nga_wp_Ex2_ngeo_cluster, c(3:8,10:11))\n\n\nggparcoord_nga <- ggparcoord(data = nga_wp_Ex2_ngeo_cluster2,\n                             columns = c(1:7),\n                             scale = \"std\",\n                             alphaLines = 0.2,\n                             boxplot = TRUE,\n                             title = \"Multiple Parallel Coordinates Plots of Clustering Variables by Cluster\") +\n    facet_grid(~ CLUSTER) +\n    theme(plot.title = element_text(size=10),\n          axis.text.x = element_text(size = 8))\nggparcoord_nga + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nThe parallel coordinate plot above reveals that LGAs in Cluster 3’s while having the highest average number of wpt functional also have the highest average pct wpt functional. Cluster 3 has the highest average “pct cap < 1000”, this is inline with them having the highest average “pct hand pump”. Hand pump usually have smaller capacity and have less components leading to lesser failures as compared to mechanical pump.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nnga_wp_Ex2_ngeo_cluster %>% \n  st_set_geometry(NULL) %>%\n  group_by(CLUSTER) %>%\n  summarise(mean_FUNC = mean(wpt.functional),\n            mean_NONFUNC = mean(wpt.non.functional),\n            mean_PCTFUNC = mean(pct.functional),\n            mean_PCTNONFUNC = mean(pct.non.functional),\n            mean_PCTRURAL = mean(pct.rural),\n            mean_PCTCAPLESS1000 = mean(pct.cap...1000),\n            mean_PCTHANDPUMP = mean(pct.hand.pump))\n\n# A tibble: 3 × 8\n  CLUSTER mean_FUNC mean_NONFUNC mean_PCTFUNC mean_PCT…¹ mean_…² mean_…³ mean_…⁴\n  <chr>       <dbl>        <dbl>        <dbl>      <dbl>   <dbl>   <dbl>   <dbl>\n1 1            17.3         18.4        0.409      0.380   0.653   0.470   0.308\n2 2            87.0         61.4        0.550      0.363   0.788   0.728   0.638\n3 3           302.          73          0.795      0.187   0.866   0.866   0.844\n# … with abbreviated variable names ¹​mean_PCTNONFUNC, ²​mean_PCTRURAL,\n#   ³​mean_PCTCAPLESS1000, ⁴​mean_PCTHANDPUMP"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#the-data",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.2 The Data",
    "text": "6.2 The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.3 Getting Started",
    "text": "6.3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#a-shirt-note-about-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#a-shirt-note-about-gwmodel",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.4 A shirt note about GWmodel",
    "text": "6.4 A shirt note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.5 Geospatial Data Wrangling",
    "text": "6.5 Geospatial Data Wrangling\n\n6.5.1 Importing geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\tanguohao86\\ISSS624\\Hands-on_Ex\\Hands-on_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n6.5.2 Updating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.6 Aspatial Data Wrangling",
    "text": "6.6 Aspatial Data Wrangling\n\n6.6.1 Importing the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n6.6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.7 Exploratory Data Analysis (EDA)",
    "text": "6.7 Exploratory Data Analysis (EDA)\nIn the section, you will learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n6.7.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n\n6.7.2 Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n6.7.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n    tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.8 Hedonic Pricing Modelling in R",
    "text": "6.8 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n6.8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n6.8.2 Multiple Linear Regression Method\n\n6.8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame. Note: condo_resale must not be the spatial type.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n6.8.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\n\n6.8.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nNote: Look at the adjusted R-squared to determine the effectiveness of the model. Freehold is categorical , if 1, the price increase by the stated amount, For prox_mrt, need to take note of the sign.\n\n\n6.8.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customisation options, refer to Tutorial: tbl_regression\n\n6.8.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n6.8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.8.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n6.8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nRemember to switch back to “plot” mode before continue.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on_Ex4 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.9 Building Hedonic Pricing Models using GWmodel",
    "text": "6.9 Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n6.9.1 Building Fixed Bandwidth GWR Model\n\n6.9.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. (Quiz: Do you know why it is in metre?)\n\n\n6.9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 11:18:51 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 11:18:52 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.\n\n\n\n6.9.2 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n6.9.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n6.9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 11:18:58 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 11:18:59 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n6.9.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\n\n6.9.5 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n6.9.6 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n6.9.6.1 By URA Plannign Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#the-data",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#the-data",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.2 The Data",
    "text": "6.2 The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.3 Getting Started",
    "text": "6.3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#a-shirt-note-about-gwmodel",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#a-shirt-note-about-gwmodel",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.4 A shirt note about GWmodel",
    "text": "6.4 A shirt note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#geospatial-data-wrangling",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.5 Geospatial Data Wrangling",
    "text": "6.5 Geospatial Data Wrangling\n\n6.5.1 Importing geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\tanguohao86\\ISSS624\\In-class_Ex\\In-class_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n6.5.2 Updating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to verify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now at the very last line.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#aspatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#aspatial-data-wrangling",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.6 Aspatial Data Wrangling",
    "text": "6.6 Aspatial Data Wrangling\n\n6.6.1 Importing the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job. The data consist of continuous variable and dummy variables. dummy variables are “FAMILY_FRIENDLY”, “FREEHOLD”, “LEASEHOLD_99YR” where there are only 0 or 1.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n6.6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414). Take note that the longitude and latitude columns are subsequently removed after st_transform()\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#exploratory-data-analysis-eda",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.7 Exploratory Data Analysis (EDA)",
    "text": "6.7 Exploratory Data Analysis (EDA)\nIn the section, you will learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n6.7.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed distribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation. Bear in mind that the R-squared results needs to be transformed back\n\n\n6.7.2 Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n6.7.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nNext, the code chunks below is used to create an interactive point symbol map. tmap_options(check.and.fix = TRUE) is added after tm_shape or tm_polygons as long lines and shape will potentially overlap each other. For more information regarding tmap_options.\n\ntm_shape(mpsz_svy21)+\n    tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#hedonic-pricing-modelling-in-r",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#hedonic-pricing-modelling-in-r",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.8 Hedonic Pricing Modelling in R",
    "text": "6.8 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n6.8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE. Bear in mind that null hypothesis is always referring to the model using meal.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n6.8.2 Multiple Linear Regression Method\n\n6.8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the independent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame. Note: condo_resale must not be the spatial type.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\",\n         number.cex=0.50)\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building. Note: |coefficient| is close to 0.85\n\n\n\n6.8.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\n\n6.8.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nNote: Look at the adjusted R-squared to determine the effectiveness of the model. Note: Freehold is categorical , if 1, the price increase by the stated amount, For prox_mrt, need to take note of the sign to see the effect (whether it increases or decreases)\n\n\n6.8.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customisation options, refer to Tutorial: tbl_regression\n\n6.8.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity. This is the next step to check for multicollinearity\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n6.8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.8.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests (all approx. 0) are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed. For more information to check on normality, please click here\n\n\n6.8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nRemember to switch back to “plot” mode before continue.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep. We can only use distance-based matrix for linear regression.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.9 Building Hedonic Pricing Models using GWmodel",
    "text": "6.9 Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n6.9.1 Building Fixed Bandwidth GWR Model\n\n6.9.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be used to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach agreement. We are using the CV approach in this case.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.34 metres. (Quiz: Do you know why it is in metre?) Adaptive = FALSE hence metres.\n\n\n6.9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-11 05:57:51 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-11 05:57:52 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the global multiple linear regression model AICcof 42967.1.\n\n\n\n6.9.2 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n6.9.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n6.9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-11 05:57:59 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-11 05:58:00 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n6.9.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\n\n6.9.5 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n6.9.6 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map. Note: sync = TRUE to synchronize the left and right views\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n6.9.6.1 By URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#a-short-note-about-gwmodel",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#a-short-note-about-gwmodel",
    "title": "In-class_Ex3 - 6 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.4 A short note about GWmodel",
    "text": "6.4 A short note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  }
]